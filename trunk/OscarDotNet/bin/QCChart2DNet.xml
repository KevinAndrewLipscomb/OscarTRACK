<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QCChart2DNet</name>
    </assembly>
    <members>
        <member name="T:com.quinncurtis.chart2dnet.Arc2D">
            <summary>
             This method implements an arc class, adding  routines for checking an 
             arcs intersection with points and rectangles.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Rectangle2D">
            <summary>
             This method implements a rectangle class, adding  routines for setting the rectangle frame, and returning  
             the points forming the rectangles frame.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Rectangle2D.x">
            <summary>
             Specifies the upper left x-position of the rectangle.
            </summary>    
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Rectangle2D.y">
            <summary>
             Specifies the upper left y-position of the rectangle.
            </summary> 
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Rectangle2D.height">
            <summary>
             Specifies the height of the rectangle.
            </summary> 
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Rectangle2D.width">
            <summary>
             Specifies the width of the rectangle.
            </summary> 
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.#ctor">
            <summary>
             The default Rectangle2D constructor
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.Copy(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              Copies the source Rectangle2D object. 
            </summary>
            <param name="source"> The source Rectangle2D object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.Clone">
            <summary>
             Returns an object that is a clone of this Rectangle2D object. 
            </summary>
            <returns> Returns a clone of this Rectangle2D object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.NormalizeHW">
            <summary>
             Defines the position and size of the Rectangle2D object. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetFrame(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Defines the position and size of the Rectangle2D object. 
            </summary>
            <param name="xx"> The x-position of the upper left of the rectangle. </param>
            <param name="yy"> The y-position of the upper left of the rectangle. </param>
            <param name="ww"> The width of the rectangle. </param>
            <param name="hh"> The height of the rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetFrame(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Defines the position and size of the Rectangle2D object. 
            </summary>
            <param name="r"> Specifies the size of the rectangle. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetFrame(System.Drawing.RectangleF)">
            <summary>
             Defines the position and size of the Rectangle2D object. 
            </summary>
            <param name="r"> Specifies the size of the rectangle. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetFrameFromDiaglonal(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Defines the position and size of the Rectangle2D object. 
            </summary>
            <param name="x1"> The x-position of the upper left of the rectangle. </param>
            <param name="y1"> The y-position of the upper left of the rectangle. </param>
            <param name="x2"> The x-position of the opposite corner of the rectangle. </param>
            <param name="y2"> The y-position of the opposite corner of the rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetLocation(System.Double,System.Double)">
            <summary>
             Defines the position the Rectangle2D object. 
            </summary>
            <param name="xx"> The x-position of the upper left of the rectangle. </param>
            <param name="yy"> The y-position of the upper left of the rectangle. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This constructor creates an Rectangle2D object defined  by its position, height and width. 
            </summary>
            <param name="xx"> The x-position of the upper left of the rectangle. </param>
            <param name="yy"> The y-position of the upper left of the rectangle. </param>
            <param name="ww"> w The width of the rectangle. </param>
            <param name="hh"> h The height of the rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.#ctor(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             This constructor creates an Rectangle2D object based on the properties  of a Rectangle2D object. 
            </summary>
            <param name="r"> The source rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.#ctor(System.Drawing.RectangleF)">
            <summary>
             This constructor creates an Rectangle2D object based on the properties  of a RectangleF object. 
            </summary>
            <param name="r"> The source rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetDiagonalCorner(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             Sets the corner opposite the x,y position of the  rectangle. 
            </summary>
            <param name="p"> A point defining the position of lower right corner of the rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetDiagonalCorner">
            <summary>
             This method returns the corner opposite the x,y position of the  rectangle. 
            </summary>
            <returns>  Returns a point defining the position of the lower right corner of the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetFrameFromDiagonal(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Initializes a rectangle object based on a pair of opposite corners. 
            </summary>
            <param name="x1"> The x-position of the upper left of the rectangle. </param>
            <param name="y1"> The y-position of the upper left of the rectangle. </param>
            <param name="x2"> The x-position of the lower right of the rectangle. </param>
            <param name="y2"> The y-position of the lower right of the rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetFrameFromDiagonal(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             Initializes a rectangle object based on a pair of opposite corners. 
            </summary>
            <param name="p1"> The position of the upper left of the rectangle. </param>
            <param name="p2"> The position of the lower right of the rectangle. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetX">
            <summary>
             Returns the upper left of the rectangle. 
            </summary>
            <returns> Returns the upper left x-position of the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetY">
            <summary>
             Returns the upper left y-position of the rectangle. 
            </summary>
            <returns> Returns the upper left y-position of the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetX1">
            <summary>
             Returns the upper left x-position of the rectangle. 
            </summary>
            <returns> Returns the upper left x-position of the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetY1">
            <summary>
             Returns the upper left y-position of the rectangle. 
            </summary>
            <returns> Returns the upper left y-position of the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetWidth">
            <summary>
             Returns the width of the rectangle. 
            </summary>
            <returns> Returns the width of the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetHeight">
            <summary>
             Returns the height of the rectangle. 
            </summary>
            <returns> Returns the height of the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetX2">
            <summary>
             Returns the lower right x-position of the rectangle. 
            </summary>
            <returns> Returns the lower right x-position of the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetY2">
            <summary>
             Returns the lower right y-position of the rectangle. 
            </summary>
            <returns> Returns the lower right y-position of the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetX1(System.Double)">
            <summary>
             Sets the upper left x-position of the rectangle. 
            </summary>
            <param name="xx"> Sets the upper left x-position of the rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetY1(System.Double)">
            <summary>
             Sets the upper left y-position of the rectangle. 
            </summary>
            <param name="yy"> Sets the upper left y-position of the rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetX2(System.Double)">
            <summary>
             Sets the lower right x-position of the rectangle. 
            </summary>
            <param name="x2"> Sets the lower right x-position of the rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.SetY2(System.Double)">
            <summary>
             Sets the lower right y-position of the rectangle. 
            </summary>
            <param name="y2"> Sets the lower right y-position of the rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetCenterX">
            <summary>
              Returns the x-value of the center of the rectangle.   
            </summary>
            <returns> Returns the  x-value of the center of the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetCenterY">
            <summary>
              Returns the y-value of the center of the rectangle.   
            </summary>
            <returns> Returns the  y-value of the center of the rectangle .</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetRectangleF">
            <summary>
              Returns the the position and size of the rectangle as a RectangleF object.   
            </summary>
            <returns> Returns the position and size of the rectangle as a RectangleF object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.GetRectangle">
            <summary>
              Returns the the position and size of the rectangle as a Rectangle object.   
            </summary>
            <returns> Returns the position and size of the rectangle as a Rectangle object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.Contains(System.Double,System.Double)">
            <summary>
              Returns true if the point (xx,yy) is contained in the rectangle.   
            </summary>
            <param name="xx"> The x-value of the test point.</param>
            <param name="yy"> The y-value of the test point.</param>
            <returns> Returns true if the point (xx,yy) is contained in the rectangle. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.Contains(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              Returns true if the point p is contained in the rectangle.   
            </summary>
            <param name="p"> The test point.</param>
            <returns> Returns true if the point p is contained in the rectangle. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.IntersectsWith(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              Returns true if the rectangle testr intersects the rectangle.   
            </summary>
            <param name="testr"> The test rectangle.</param>
            <returns> Returns true if the rectangle testr intersects the rectangle.   </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Rectangle2D.Contains(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              Returns true if the rectangle testr is contained by the rectangle.   
            </summary>
            <param name="testr"> The test rectangle.</param>
            <returns>  Returns true if the rectangle testr is contained by the rectangle.     </returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Rectangle2D.X">
            <summary>
             Get/Set the x-value of the rectangle. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Rectangle2D.Y">
            <summary>
             Get/Set the y-value of the rectangle. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Rectangle2D.Width">
            <summary>
             Get/Set the width of the rectangle. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Rectangle2D.Height">
            <summary>
             Get/Set the height of the rectangle. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arc2D.OPEN">
            <summary>
              The closure type for an open arc with no path segments  connecting 
              the two ends of the arc segment.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arc2D.CHORD">
            <summary>
              The closure type for an arc closed by drawing a straight  line 
              segment from the start of the arc segment to the end of the  arc segment.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arc2D.PIE">
            <summary>
              The closure type for an arc closed by drawing straight line  segments from the 
              start of the arc segment to the center  of the full ellipse and from that point 
              to the end of the arc segment.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arc2D.startAngle">
            <summary>
              The starting angle of the arc in degrees.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arc2D.extentAngle">
            <summary>
              The angular extent of the arc in degrees.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arc2D.arcType">
            <summary>
              The arc type. Specify one of the arc type constants.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.InitDefaults">
            <summary>	
             Initializes default values for the plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.Copy(com.quinncurtis.chart2dnet.Arc2D)">
            <summary>
              Copies the source Arc2D object. 
            </summary>
            <param name="source"> The source Arc2D object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.Clone">
            <summary>
             Returns an object that is a clone of this Arc2D object. 
            </summary>
            <returns> Returns a clone of this Arc2D object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.#ctor">
            <summary>
              Constructs a new OPEN arc, initialized to location (0, 0),  size (0, 0), angular extents 
              (start = 0, extent = 0).
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
              Constructs a new arc, initialized to the specified location,  size, angular extents, and 
              closure type.  
            </summary>
            <param name="x"> The x-coordinate of the upper left corner of the arc rectangle.  </param>
            <param name="y"> The y-coordinate of the upper left corner of the arc rectangle.  </param>
            <param name="w"> The overall width of the full ellipse defining the arc rectangle.  </param>
            <param name="h"> The overall height of the full ellipse defining the arc rectangle.  </param>
            <param name="start"> The starting angle of the arc in degrees.   </param>
            <param name="extent"> The angular extent of the arc in degrees.   </param>
            <param name="ntype"> The closure type for the arc: not used at this time. {</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.#ctor(com.quinncurtis.chart2dnet.Rectangle2D,System.Double,System.Double,System.Int32)">
            <summary>
              Constructs a new arc using the specified location,  size, angular extents, and closure type.  
            </summary>
            <param name="ellipseBounds"> The bounding rectangle that is the defining ellipse of the arc. </param>
            <param name="start"> The starting angle of the arc in degrees.   </param>
            <param name="extent"> The angular extent of the arc in degrees.   </param>
            <param name="ntype"> The closure type for the arc: not used at this time. {</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.GetStartAngle">
            <summary>
              Returns the starting angle of the arc.  
            </summary>
            <returns> A double value that represents the starting angle  of the arc in degrees. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.GetExtentAngle">
            <summary>
              Returns the angular extent of the arc.  
            </summary>
            <returns> A double value that represents the angular extent of  the arc in degrees. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.SetArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
              Sets the location, size, angular extents, and closure type of  this arc.  
            </summary>
            <param name="x"> The x-coordinate of the upper left corner of the arc rectangle.  </param>
            <param name="y"> The y-coordinate of the upper left corner of the arc rectangle.  </param>
            <param name="w"> The overall width of the ellipse defining the arc. </param>
            <param name="h"> The overall height of the ellipse defining the arc. </param>
            <param name="stAng"> The starting angle of the arc in degrees. </param>
            <param name="extAng"> The angular extent of the arc in degrees. </param>
            <param name="closure"> The closure type for the arc:  {</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.SetStartAngle(System.Double)">
            <summary>
              Sets the starting angle of the arc.  
            </summary>
            <param name="stAng"> The starting angle of the arc in degrees. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.SetExtentAngle(System.Double)">
            <summary>
              Sets the angular extent of the arc.  
            </summary>
            <param name="extAng"> The angular extent of the arc in degrees. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.GetArcarcType">
            <summary>
              Returns the arc closure type of the arc: {
            </summary>
            <returns> One of the integer constant closure types defined  in this class. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.GetStartPoint">
            <summary>
              Returns the starting point of the arc in xy coordinates.  
            </summary>
            <returns> A point representing the  x,y coordinates of the starting point of the arc.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.GetEndPoint">
            <summary>
              Returns the ending point of the arc in xy coordinates.  
            </summary>
            <returns> A point representing the  x,y coordinates of the ending point of the arc.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.SetArc(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Dimension,System.Double,System.Double,System.Int32)">
            <summary>
              Sets the location, size, angular extents, and closure type of the arc.  
            </summary>
            <param name="loc"> The point representing the coordinates of  the upper left corner of the arc. </param>
            <param name="size"> The  width  and height of the full ellipse of which this arc is  
            a partial section. </param>
            <param name="stAng"> The starting angle of the arc in degrees.   </param>
            <param name="extAng"> The angular extent of the arc in degrees.   </param>
            <param name="closure"> The closure type for the arc: not used at this time. {</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.SetArc(com.quinncurtis.chart2dnet.Rectangle2D,System.Double,System.Double,System.Int32)">
            <summary>
              Sets the location, size, angular extents, and closure type of the arc.  
            </summary>
            <param name="rect"> The bounding rectangle that defines the arcs defining ellipse. </param>
            <param name="stAng"> The starting angle of the arc in degrees.   </param>
            <param name="extAng"> The angular extent of the arc in degrees.   </param>
            <param name="closure"> The closure type for the arc: not used at this time. {</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.SetArc(com.quinncurtis.chart2dnet.Arc2D)">
            <summary>
              Sets this arc to be the same as the specified arc.  
            </summary>
            <param name="a"> The source arc to use to set the arc's values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.SetArcByCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
              Sets the position, bounds, angular extents, and closure type of the arc.  
            </summary>
            <param name="x"> The x-coordinate of the center of the arc rectangle.  </param>
            <param name="y"> The y-coordinate of the center of the arc rectangle.  </param>
            <param name="radius"> The radius of the arc.  </param>
            <param name="stAng"> The starting angle of the arc in degrees.   </param>
            <param name="extAng"> The angular extent of the arc in degrees.   </param>
            <param name="closure"> The closure type for the arc: not used at this time {</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.SetArcarcType(System.Int32)">
            <summary>
              Sets the closure type of this arc to the specified value: 
               <CODE>OPEN</CODE>, <CODE>CHORD</CODE>, or <CODE>PIE</CODE>.  
            </summary>
            <param name="ntype"> The integer constant that represents the closure  type of this arc: 
            not used at this time {</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.SetArcFrame(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Sets the location and size of the outer bounds of this arc  to the specified values.  
            </summary>
            <param name="x"> The x-coordinate of the upper left corner of the arc rectangle.  </param>
            <param name="y"> The y-coordinate of the upper left corner of the arc rectangle.  </param>
            <param name="w"> The width of the arc's bounding box. (Specified in  double precision.) </param>
            <param name="h"> The height of the arc's bounding box. (Specified in  double precision.)</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.CartesianToPolar(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts the coordinates of a point from Cartesian  coordinates to polar coordinates. 
            </summary>
            <param name="dest"> Returns the coordinates of the point using polar coordinates,  where the polar 
            magnitude is store in source.x, and the polar angle  in source.y. </param>
            <param name="source"> The coordinates of the point in Cartesian coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.Contains(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              Determine whether or not the arc contains the specified rectangle.  
            </summary>
            <param name="testrect"> The coordinates of the rectangle.   </param>
            <returns> Returns true if the arc intersects the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.Contains(System.Double,System.Double)">
            <summary>
              Determine whether or not the arc contains the specified point (x,y).  
            </summary>
            <param name="x"> The x-coordinate of the point.   </param>
            <param name="y"> The y-coordinate of the point.   </param>
            <returns> Returns true if the arc contains the point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.Contains(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              Determine whether or not the arc contains the specified point p.  
            </summary>
            <param name="p"> The coordinates of the point.   </param>
            <returns> Returns true if the arc contains the point.</returns>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.Contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Determine whether or not the arc contains the specified rectangle.  
            </summary>
            <param name="x"> The x-coordinate of the upper left corner of the test rectangle.  </param>
            <param name="y"> The y-coordinate of the upper left corner of the test rectangle.  </param>
            <param name="w"> The width of the rectangle.  </param>
            <param name="h"> The height of the rectangle.   </param>
            <returns> Returns true if the arc contains the rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arc2D.IntersectsWith(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              Determine whether or not the arc intersects the specified rectangle.  
            </summary>
            <param name="r"> The test rectangle.  </param>
            <returns> Returns true if the arc intersects the testrectangle.</returns>	
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Arc2D.StartAngle">
            <summary>
              Get/Set the starting angle of the arc in degrees.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Arc2D.ExtentAngle">
            <summary>
             Get/Set the angular extent of the arc in degrees.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Arrow">
            <summary>
             The Arrow class creates arrow symbols  in the ArrowPlot plot types.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartObj">
            <summary> 
              The ChartObj class is the abstract base class for all chart objects in the QCChart2D class library.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.USER_COORD_MAX">
            <summary> 
             Maximum allowable value for a conversion to window device coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NOOBJECT">
            <summary> 
             Specifies that the current plot type is invalid.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LINE_PLOT">
            <summary> 
             Line plot type (SimpleLinePlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LINE_MARKER_PLOT">
            <summary> 
             Line marker plot type (SimpleLineMarkerPlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BAR_PLOT">
            <summary> 
             Bar plot type (SimpleBarPlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SCATTER_PLOT">
            <summary> 
             Scatter plot type (ScatterPlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ICHARTOBJECTPLOT">
            <summary> 
             A simple object plot type (SimpleObjPlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GROUPBAR">
            <summary> 
             Group bar plot type (GroupBarPlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.STACKEDBAR">
            <summary> 
             Stacked bar plot type (StackedBarPlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.STACKEDLINE">
            <summary> 
             Stacked line plot type (StackedLinePlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MULTILINE">
            <summary> 
             Multi-line plot type (MultiLinePlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERRORBAR">
            <summary> 
             Error bar plot type (ErrorBarPlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FLOATINGBAR">
            <summary> 
              Floating bar plot type (FloatingBarPlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OHLC">
            <summary> 
             Open-High-Low-Close plot type (OHLCPlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CANDLESTICK">
            <summary> 
             Candlestick plot type (Candlestick)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BUBBLE_PLOT">
            <summary> 
             Bubble plot type (BubblePlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ARROW_PLOT">
            <summary> 
             Arrow plot type (ArrowPlot)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LINEGAP">
            <summary> Line gap plot type (LineGrapPlot) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CELL_PLOT">
            <summary> Cell plot type (CellPlot) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.HISTOGRAM_PLOT">
            <summary> Histogram plot type (HistogramPlot) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PIECHART">
            <summary> Pie chart plot type (PieChart) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.POLAR_LINE_PLOT">
            <summary> Polar line plot type (PolarLinePlot) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.POLAR_SCATTER_PLOT">
            <summary> Polar scatter plot type (PolarScatterPlot) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CONTOURLINE">
            <summary> Contour line plot type (ContourPlot) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AXIS">
            <summary> 
             Axis chart object type (Axis)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LINEARAXIS">
            <summary> Linear axis chart object type (LinearAxis) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LOGAXIS">
            <summary> 
             Logarithmic axis chart object type(LogAxis)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS">
            <summary> Date/time axis chart object type (TimeAxis) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.POLARAXES">
            <summary> Polar axes chart object type (PolarAxes) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PROBABILITY_AXIS">
            <summary> Probability axes chart object type (ProbabilityAxis) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PROBABILITY_SIGMA_AXIS">
            <summary> Probability sigma axes chart object type (ProbabilitySigmaAxis) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CUSTOMAXIS">
            <summary> Custom axis chart object type (CustomAxis) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ABSTRACTAUTOSCALE">
            <summary> Abstract auto scale object (Autoscale) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LINEAR_AUTOSCALE">
            <summary> Linear auto scale object (LinearAutoscale) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LOG_AUTOSCALE">
            <summary> Logarithmic auto scale object (LogAutoscale) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIME_AUTOSCALE">
            <summary> Time/Date auto scale object (TimeAutoscale) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PROBABILITY_AUTOSCALE">
            <summary> Normal Probability auto scale object (NormalProbabilityAutoScale) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AUTOCHART">
            <summary> Auto-Chart Obj ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRID">
            <summary> 
             Grid object for linear, logarithmic and time axis grids (Grid)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.POLARGRID">
            <summary> Grid object for polar axes (PolarGrid) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AXISLABELS">
            <summary> Abstract axis labels object (AxisLabels) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NUMERICAXISLABELS">
            <summary> Numeric axis labels for use with linear and logarithmic axes (NumericAxisLabels) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.STRINGAXISLABELS">
            <summary> String axis labels for use with linear and logarithmic axes (StringAxisLabels) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXISLABELS">
            <summary> Time axis labels for use with time/date axes (TimeAxisLabels) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.POLARAXESLABELS">
            <summary> Polar axis labels  (PolarAxesLabels) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BACKGROUND">
            <summary> 
             Chart background object (Background)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.IMAGE">
            <summary> A chart image (Image) ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BUFFEREDIMAGE">
            <summary> A chart buffered image ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ARROW">
            <summary> 
             A chart arrow object (Arrow)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ARC2D_OBJ">
            <summary> 
             A chart shape object (ChartShape)
            </summary>
            
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SHAPE">
            <summary> 
             A chart shape object (ChartShape)
            </summary>	 
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SYMBOL">
            <summary> 
             A chart symbol object (ChartSymbol)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TEXT">
            <summary> 
             A chart text object (ChartText)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NUMERICLABEL">
            <summary> 
             A chart numeric label object (NumericLabel)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMELABEL">
            <summary> 
             A chart time label object (TimeLabel)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.STRINGLABEL">
            <summary> 
             A chart string label object (StringLabel)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BARDATAPOINTVALUE">
            <summary> 
             A chart bar data point value object (BarDatapointValue)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CHARTATTRIBUTE">
            <summary> 
             A chart attribute (ChartAttribute)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CHARTBRUSHES">
            <summary> 
             A chart brush cache (ChartBrushes)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CHARTPENS">
            <summary> 
             A chart pen cache (ChartPens)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRAPHTITLE">
            <summary> 
             A chart graph title object (ChartTitle)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AXISTITLE">
            <summary> 
             A chart graph axis title object (AxisTitle)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LEGEND">
            <summary> 
             A chart legend object (Legend)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BUBBLELEGEND">
            <summary> 
             A chart bubble legend object 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LEGENDITEM">
            <summary> 
             A chart legend item object (LegendItem)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BUBLELEGENDITEM">
            <summary> 
             A chart buble legend legend item
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ZOOM">
            <summary> 
             A chart zoom object (ChartZoom)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MARKER">
            <summary> 
             A chart marker object (Marker)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATACURSOR">
            <summary> 
             A chart data cursor object (DataCursor)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CHARTCALENDAR">
            <summary> 
             A chart calendar object (ChartCalendar)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.USER_COORDINATES">
            <summary> 
             A UserCoordinates object 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.WORLD_COORDINATES">
            <summary> 
             A WorldCoordinates object 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.WORKING_COORDINATES">
            <summary> 
             A WorkingCoordinates object 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PHYSICAL_COORDINATES">
            <summary> 
             A PhysicalCoordinates object 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CARTESIAN_COORDINATES">
            <summary> 
             A CartesianCoordinates object 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIME_COORDINATES">
            <summary> 
             A TimeCoordinates object 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.POLAR_COORDINATES">
            <summary> 
             A PolarCoordinates object 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PROBABILITY_COORDINATES">
            <summary> 
             A Normal Probability Coordinates object 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LINEAR_SCALE_OBJ">
            <summary> 
             A linear scale object (LinearScale)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LOG_SCALE_OBJ">
            <summary> 
             A logarithmic scale object (LogScale)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIME_SCALE_OBJ">
            <summary> 
             A time scale object (TimeScale)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NORM_PROBABILITY_SCALE_OBJ">
            <summary> 
             A normal probability scale object (NormalProbabilityScale)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ABSTRACT_DATASET">
            <summary> 
             An abstract dataset object (ChartDataset)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SIMPLE_DATASET">
            <summary> 
             A simple dataset object (SimpleDataset)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GROUP_DATASET">
            <summary> 
             A group dataset object (GroupDataset)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIME_SIMPLE_DATASET">
            <summary> 
             A simple, time, dataset object (TimeSimpleDataset)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIME_GROUP_DATASET">
            <summary> 
             A group, time, dataset object (TimeGroupDataset)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CONTOUR_DATASET">
            <summary> 
             A simple, time, dataset object (ContourDataset)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MOVING_AVERAGE_X">
            <summary> 
             A dataset moving average constant for x-values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MOVING_AVERAGE_Y">
            <summary> 
             A dataset moving average constant for y-values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MOVING_AVERAGE_XY">
            <summary> 
             A dataset moving average constant for x- and y-values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.COMBINE_DATASET_X">
            <summary> Combine the x-values of two datasets ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.COMBINE_DATASET_Y">
            <summary> Combine the y-values of two datasets ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.COMBINE_DATASET_XY">
            <summary> Combine the x- and y-values of two datasets ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.COMBINE_DATASET_ADD">
            <summary> 
             Combine two datasets by adding corresponding values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.COMBINE_DATASET_SUBTRACT">
            <summary> 
             Combine two datasets by subtracting corresponding values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.COMBINE_DATASET_MULTIPLY">
            <summary> 
             Combine two datasets by multiplying corresponding values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.COMBINE_DATASET_DIVIDE">
            <summary> 
             Combine two datasets by diving corresponding values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NO_STEP">
            <summary> 
             Interpolate directly from one point to the next, drawing a line from (x1, y1) to (x2, y2)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.STEP_START">
            <summary> 
             Connect two points by drawing two lines (x1, y1) to (x1, y2) to (x2, y2)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.STEP_END">
            <summary> 
             Connect two points by drawing two lines (x1, y1) to (x2, y1) to (x2, y2)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.STEP_NO_RISE_LINE">
            <summary> 
             Connect two points by first drawing a line from (x1, y2) to (x2, y2)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PLOT_BACKGROUND">
            <summary> 
             Background for the plotting area of the chart
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRAPH_BACKGROUND">
            <summary> 
             Background for the graph area of the chart
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ALTBARMODE">
            <summary> 
             Use user-defined texture for background texture
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.USERTEXTUREMODE">
            <summary> 
             Use user-defined texture for background texture
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.USERGRADIENTMODE">
            <summary> 
             Use user-defined gradient for background gradient
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SIMPLEGRADIENTMODE">
            <summary> 
             Use simple gradient for background gradient
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SIMPLECOLORMODE">
            <summary> 
             Use a single color for background
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.JUSTIFY_MIN">
            <summary> 
             Justify in the direction of decreasing coordinate values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.JUSTIFY_CENTER">
            <summary> 
             Center justify
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.JUSTIFY_MAX">
            <summary> 
             Justify in the direction of increasing coordinate values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.INSIDE_INDICATOR">
            <summary> 
             Position text inside indicator
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.INSIDE_BAR">
            <summary> 
             Position bar data value inside bar
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OUTSIDE_BAR">
            <summary> 
             Position bar data value outside bar
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OUTSIDE_INDICATOR">
            <summary> 
             Position text value outside indicator
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CENTERED_BAR">
            <summary> 
             Position bar data value centered, inside bar
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OUTSIDE_PLOTAREA_MIN">
            <summary> 
             Position bar data value outside of plot area minimum
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.INSIDE_PLOTAREA_MIN">
            <summary> 
             Position data value inside the plot area minimum
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OUTSIDE_PLOTAREA_MAX">
            <summary> 
             Position bar data value outside the plot area maximum
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.INSIDE_PLOTAREA_MAX">
            <summary> 
             Position bar data value inside plot area maximum
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRAPHAREA_BOTTOM">
            <summary> 
             Position bar data value inside graph area minimum
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRAPHAREA_TOP">
            <summary> 
             Position bar data value inside graph area maximum
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRAPHAREA_LEFT">
            <summary> 
             Position bar data value inside graph area minimum
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRAPHAREA_RIGHT">
            <summary> 
             Position bar data value inside graph area maximum
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.INSIDE_BARBASE">
            <summary> 
             Position bar data value inside base value of the bar
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OUTSIDE_BARBASE">
            <summary> 
             Position bar data value outside base value of the bar
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PLOTAREA_CENTER">
            <summary> 
             Position bar data value center on the plot area
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.VERT_DIR">
            <summary> 
             Oriented in the vertical direction
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.HORIZ_DIR">
            <summary> 
             Oriented in the horizontal direction
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.X_AXIS">
            <summary> 
             Specifies the x-axis, or an x-coordinate value
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.Y_AXIS">
            <summary> 
             Specifies the y-axis, or an y-coordinate value
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.Z_AXIS">
            <summary> 
             Specifies the z-axis, or an z-coordinate value
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.POLAR_AXIS">
            <summary> 
             Specifies a set of polar axes, or a polar coordinate value
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BOTH_AXES">
            <summary> Specifies both x- and y-axes or coordinates ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NEITHER_AXIS">
            <summary> Specifies neither x- or y-axes or coordinates ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LINEAR_SCALE">
            <summary> 
             Specifies a linear scale
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LOG_SCALE">
            <summary> 
             Specifies a log scale
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIME_SCALE">
            <summary> 
             Specifies a time scale
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PROBABILITY_SCALE">
            <summary> 
             Specifies a normal probability scale
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NUMERIC_COORDINATE">
            <summary> 
             Specifies a scale that uses numeric values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIME_COORDINATE">
            <summary> 
             Specifies a scale that uses time values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AXIS_MIN">
            <summary> 
             Draw in the direction of decreasing coordinate values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AXIS_CENTER">
            <summary> Center justify ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AXIS_MAX">
            <summary> 
             Draw in the direction of increasing coordinate values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TICK_MAJOR">
            <summary> 
             Minor tick mark
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TICK_MINOR">
            <summary> 
             Major tick mark
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRID_MAJOR">
            <summary> 
             Draw grid lines using the major tick mark positions
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRID_MINOR">
            <summary> 
             Draw grid lines using the minor tick mark positions
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRID_ALL">
            <summary> 
             Draw grid lines using the major and minor tick mark positions
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NO_AUTOSCALE">
            <summary> 
             Auto-scale round mode set is none, for internal use only, no rounding may occur, may not work under all conditions
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AUTOAXES_FAR">
            <summary> 
             Auto-scale round mode set is far, usually rounding to the next major tick mark
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AUTOAXES_NEAR">
            <summary> 
             Auto-scale round mode set is near, usually rounding to the next minor tick mark
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AUTOAXES_EXACT">
            <summary> 
             Auto-scale using the exact minimum and maximum values, no rounding
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AUTOAXES_UNSTACKED">
            <summary> 
             Assume data is not stacked in auto-scale calculations
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AUTOAXES_STACKED">
            <summary> 
             Assume data is stacked in auto-scale calculations
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SIZE_BUBBLE_RADIUS">
            <summary> 
             The size mode of bubble plots has bubble size proportional to bubble radius
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SIZE_BUBBLE_AREA">
            <summary> 
             The size mode of bubble plots has bubble size proportional to bubble area
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LABEL_ALL">
            <summary> 
             Label the axis minimum point, origin, and maximum point
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LABEL_MIN">
            <summary> 
             Label the axis minimum point
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LABEL_INTERCEPT">
            <summary> 
             Label the axis origin point
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LABEL_ORIGIN">
            <summary> 
             Label the axis origin point
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LABEL_MAX">
            <summary> 
             Label the axis maximum point
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DEV_POS">
            <summary> 
             Position defined using device, or window device coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.USER_POS">
            <summary> 
             Position defined using device, or window device coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PHYS_POS">
            <summary> 
             Position defined using physical coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.POLAR_POS">
            <summary> 
             Position defined using polar coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NORM_GRAPH_POS">
            <summary> 
             Position defined using graph normalized coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NORM_PLOT_POS">
            <summary> 
             Position defined using plot normalized coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ACTUAL_SIZE">
            <summary> 
             Scale image to exact size of original image
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SCALE_FACTOR_SIZE">
            <summary> 
             Scale image using x and y scale factors
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.COORD_SIZE">
            <summary> 
             Scale image height and width values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LEFT_BORDER">
            <summary> 
             Specifies the left border
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TOP_BORDER">
            <summary> 
             Specifies the top border
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RIGHT_BORDER">
            <summary> 
             Specifies the right border
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BOTTOM_BORDER">
            <summary> 
             Specifies the bottom border
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LEGEND_HEADER">
            <summary> 
             Specifies the legend header, the topmost line of the legend
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LEGEND_SUBHEAD">
            <summary> 
             Specifies the legend subhead, the line directly under the legend header
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LEGEND_FOOTER">
            <summary> 
             Specifies the legend footer, the last most line of the legend
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CHART_HEADER">
            <summary> 
             Specifies the chart header, justified with respect to the top of the chart
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CHART_SUBHEAD">
            <summary> 
             Specifies the chart subhead, the line directly under the chart header
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CHART_FOOTER">
            <summary> 
             Specifies the chart footer, justified with respect to the bottom of the chart
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CENTER_GRAPH">
            <summary> 
             Center title with respect to the graph area
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CENTER_PLOT">
            <summary> 
             Center title with respect to the plot area
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MARKER_NULL">
            <summary> 
             No marker
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MARKER_VLINE">
            <summary> 
             Vertical line marker
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MARKER_HLINE">
            <summary> 
             Horizontal line marker
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MARKER_CROSS">
            <summary> 
             Cross hair marker
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MARKER_BOX">
            <summary> 
             Box marker
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MARKER_HVLINE">
            <summary> 
             Combination Horizontal and Vertical line marker
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NOSYMBOL">
            <summary> 
             No scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SQUARE">
            <summary> 
             Square scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.UPTRIANGLE">
            <summary> 
             Up triangle scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DOWNTRIANGLE">
            <summary> 
             Down scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DIAMOND">
            <summary> 
             Diamond scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CROSS">
            <summary> 
             Cross scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PLUS">
            <summary> 
             Plus scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.STAR">
            <summary> 
             Star scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LINE">
            <summary> 
             Line scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.HBAR">
            <summary> 
             Horizontal bar scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.VBAR">
            <summary> 
             Vertical bar scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CIRCLE">
            <summary> 
             Circle scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CUSTOMSYMBOL">
            <summary> 
             Custom scatter plot symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RIGHT_BUTTON">
            <summary> 
             Right button
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LEFT_BUTTON">
            <summary> 
             Left button
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PIELABEL_NONE">
            <summary> 
             No pie label text
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PIELABEL_STRING">
            <summary> 
             String only pie label
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PIELABEL_NUMVALUE">
            <summary> 
             Numeric value only pie label
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PIELABEL_STRINGNUMVAL">
            <summary> 
             String and numeric value pie label
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PIELABEL_INSLICE">
            <summary> 
             Pie labels inside pie slice
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PIELABEL_OUTSLICE">
            <summary> 
             Pie labels outside pie slice
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DEFAULTFORMAT">
            <summary> 
             Default format
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DECIMALFORMAT">
            <summary> 
             Decimal (1234.5678) numeric format
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SCIENTIFICFORMAT">
            <summary> 
             Scientific (1.2345678e4) numeric format
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BUSINESSFORMAT">
            <summary> 
             Business (1.23K) numeric format
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ENGINEERINGFORMAT">
            <summary> 
             The engineering format use decimal format for numbers less than +-10e6,  and scientific format for all others
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PERCENTFORMAT">
            <summary> 
             The number is multiplied by 100 and displayed with a trailing % symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.EXPONENTFORMAT">
            <summary> 
             The exponent is similar to the scientific format, except that the  exponent is displayed as a superscript
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CURRENCYBUSINESSFORMAT">
            <summary> 
             Similar to the business format, except that a $ is appended to the front.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CURRENCYFORMAT">
            <summary> 
             Similar to the decimal format except a $ is appended to the front.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT">
            <summary> 
             A time/date numeric format
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PERCENT_NOPERCENTSIGN_FORMAT">
            <summary> 
             The number is multiplied by 100 and displayed without a trailing % symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SIGMA_FORMAT">
            <summary> 
             The number is multiplied by 100 and displayed with a trailing % symbol
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEBASE_TICKS">
            <summary> 
             Ticks (100 nanosecond interval) time base
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEBASE_MILLISECOND">
            <summary> 
             Milliseconds time base
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEBASE_SECOND">
            <summary> 
             Seconds time base
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEBASE_MINUTE">
            <summary> 
             Minutes time base
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEBASE_HOUR">
            <summary> 
             Hours time base
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEBASE_DAY">
            <summary> 
             Days time base
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEBASE_WEEK">
            <summary> 
             Weeks time base
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEBASE_MONTH">
            <summary> 
             Months time base
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEBASE_YEAR">
            <summary> 
             Years time base
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_50YEAR10YEAR">
            <summary> 
             50 year major tick mark spacing, 10 year minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_20YEAR5YEAR">
            <summary> 
             20 year major tick mark spacing, 5 year minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_10YEARYEAR">
            <summary> 
             10 year major tick mark spacing, 1 year minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_5YEARYEAR">
            <summary> 
             5 year major tick mark spacing, 1 year minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_YEAR">
            <summary> 1 year major tick mark spacing ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_YEARQUARTER">
            <summary> 
             1 year major tick mark spacing, 1 quarter minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_YEARMONTH">
            <summary> 
             1 year major tick mark spacing, 1 month minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_QUARTER">
            <summary> 1 quarter major tick mark spacing ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_QUARTERMONTH">
            <summary> 
             1 quarter major tick mark spacing, 1 month minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MONTH">
            <summary> 
             1 month major tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MONTHWEEK">
            <summary> 
             1 month major tick mark spacing, 1 week minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MONTHDAY">
            <summary> 
             1 month major tick mark spacing, 1 day minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_WEEK">
            <summary> 
             1 week major tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_WEEKDAY">
            <summary> 
             1 week major tick mark spacing, 1 day minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_DAY">
            <summary> 
             1 day major tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_DAY12HOUR">
            <summary> 
             1 day major tick mark spacing, 12 hour minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_DAY8HOUR">
            <summary> 
             1 day major tick mark spacing, 8 hour minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_DAY4HOUR">
            <summary> 
             1 day major tick mark spacing, 4 hour minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_DAY2HOUR">
            <summary> 
             1 day major tick mark spacing, 2 hour minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_DAYHOUR">
            <summary> 
             1 day major tick mark spacing, 1 hour minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_12HOURHOUR">
            <summary> 
             12 hour major tick mark spacing, 1 hour minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_8HOURHOUR">
            <summary> 
             8 hour major tick mark spacing, 1 hour minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_4HOURHOUR">
            <summary> 
             4 hour major tick mark spacing, 1 hour minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_2HOURHOUR">
            <summary> 
             2 hour major tick mark spacing, 1 hour minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_HOUR">
            <summary> 
             1 hour major tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_HOUR30MINUTE">
            <summary> 
             1 hour major tick mark spacing, 30 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_HOUR15MINUTE">
            <summary> 
             1 hour major tick mark spacing, 15 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_HOUR10MINUTE">
            <summary> 
             1 hour major tick mark spacing, 10 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_HOUR5MINUTE">
            <summary> 
             1 hour major tick mark spacing, 5 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_HOUR2MINUTE">
            <summary> 
             1 hour major tick mark spacing, 2 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_HOURMINUTE">
            <summary> 
             1 hour major tick mark spacing, 1 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_30MINUTEMINUTE">
            <summary> 
             30 minute major tick mark spacing, 1 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_15MINUTEMINUTE">
            <summary> 
             15 minute major tick mark spacing, 1 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_10MINUTEMINUTE">
            <summary> 
             10 minute major tick mark spacing, 1 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_5MINUTEMINUTE">
            <summary> 
             5 minute major tick mark spacing, 1 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_2MINUTEMINUTE">
            <summary> 
             2 minute major tick mark spacing, 1 minute minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MINUTE">
            <summary> 
             1 minute major tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MINUTE30SECOND">
            <summary> 
             1 minute major tick mark spacing, 30 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MINUTE15SECOND">
            <summary> 
             1 minute major tick mark spacing, 15 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MINUTE10SECOND">
            <summary> 
             1 minute major tick mark spacing, 10 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MINUTE5SECOND">
            <summary> 
             1 minute major tick mark spacing, 5 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MINUTE2SECOND">
            <summary> 
             1 minute major tick mark spacing, 2 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MINUTESECOND">
            <summary> 
             1 minute major tick mark spacing, 1 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_30SECONDSECOND">
            <summary> 
             30 second major tick mark spacing, 1 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_15SECONDSECOND">
            <summary> 
             15 second major tick mark spacing, 1 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_10SECONDSECOND">
            <summary> 
             10 second major tick mark spacing, 1 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_5SECONDSECOND">
            <summary> 
             5 second major tick mark spacing, 1 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_2SECONDSECOND">
            <summary> 
             2 second major tick mark spacing, 1 second minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_SECOND">
            <summary> 
             1 second major tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_SECONDMILLISECOND">
            <summary> 
             1 Second major and 100 millisecond minor tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MILLISECOND">
            <summary> 
             
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MILLISECOND1">
            <summary> 
             Millisecond scale with 1 digit to the right of decimal
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MILLISECOND2">
            <summary> 
             Millisecond scale with 2 digits to the right of decimal
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEAXIS_MILLISECOND3">
            <summary> 
             Millisecond scale with 3 digits to the right of decimal
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_NONE">
            <summary> 
             No time format
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_24HMS">
            <summary> 
             24 hour (hour:minutes:seconds) time format - Example 23:59:59
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_24HM">
            <summary> 
             24 hour (hour:minutes) time format - Example 23:59
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_MS">
            <summary> 
             (minutes:seconds) time format - Example 59:59
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_12HMS">
            <summary> 
             12 hour (hour:minutes:seconds) time format - Example 11:59:59
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_12HM">
            <summary> 
             12 hour (hour:minutes) time format - Example 1:59
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_24HMSD">
            <summary> 
             24 hour (hour:minutes:seconds.milliseconds) time format - Example 23:59:59.9
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_24HMSDD">
            <summary> 
             24 hour (hour:minutes:seconds.milliseconds) time format - Example 23:59:59.99
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_12HMSD">
            <summary> 
             12 hour (hour:minutes:seconds.milliseconds) time format - Example 11:59:59.999
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_12HMSDD">
            <summary> 
             12 hour (hour:minutes:seconds.milliseconds) time format - Example 11:59:59.9
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_MSD">
            <summary> 
             (minutes:seconds) time format - Example 59:59.9
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_MSDD">
            <summary> 
             (minutes:seconds.milliseconds) time format - Example 59:59.99
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_MSDDD">
            <summary> 
             (minutes:seconds.milliseconds) time format - Example 59:59.999
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_STANDARD">
            <summary> 
             Date format ( Jan 2, 1998)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_MDY">
            <summary> 
             Date format ( 1/2/98, 1/2/02)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_DMY">
            <summary> 
             Date format ( 2/1/98, 2/1/02)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_MY">
            <summary> 
             Date format ( 1/98)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_Q">
            <summary> 
             Date format ( Q1)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_MMMM">
            <summary> 
             Date format ( January)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_DDDD">
            <summary> 
             Date format ( Tuesday)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_MMM">
            <summary> 
             Date format ( Jan)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_DDD">
            <summary> 
             Date format ( Tue)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_M">
            <summary> 
             Date format ( Jan)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_D">
            <summary> 
             Date format ( Tue)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_Y">
            <summary> 
             Date format ( 98)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_MDY2000">
            <summary> 
             Date format (1/2/1998, 1/2/2002)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_DMY2000">
            <summary> 
             Date format ( 2/1/1998, 2/1/2002)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_MY2000">
            <summary> 
             Date format ( 1/1998)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TIMEDATEFORMAT_Y2000">
            <summary> 
             Date format ( 1998)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CROSSOVER_NONE">
            <summary> 
             No crossover labels for time axis
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CROSSOVER_DAY">
            <summary> 
             Check for day crossover labels for time axis
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CROSSOVER_WEEK">
            <summary> 
             Check for week crossover labels for time axis
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CROSSOVER_MONTH">
            <summary> 
             Check for month crossover labels for time axis
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CROSSOVER_YEAR">
            <summary> 
             Check for year crossover labels for time axis
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NO_DATECROSSOVER">
            <summary> 
             Do not display date crossover labels for time axis
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.REPLACE_DATECROSSOVER">
            <summary> 
             Replace the standard tick mark label with a crossover tick mark label
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.UNDER_DATECROSSOVER">
            <summary> 
             Place the crossover label under the standard tick mark label
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OVERLAP_LABEL_DRAW">
            <summary> 
             Draw all tick mark labels, even if they overlap
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OVERLAP_LABEL_DELETE">
            <summary> 
             If a tick mark label overlaps the previous tick mark label, do not draw the label
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OVERLAP_LABEL_STAGGER">
            <summary> 
             If a tick mark label overlaps the previous tick mark label, do not draw the label
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.WEEK_7D">
            <summary> 
             7 day week mode (Sunday through Saturday)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.WEEK_5D">
            <summary> 
             5 day week mode (Monday through Friday)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MOVE_X">
            <summary> 
             Restrict the direction of move operations to the x-coordinate direction
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MOVE_Y">
            <summary> 
             Restrict the direction of move operations to the y-coordinate direction
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MOVE_XY">
            <summary> 
             Allow unrestricted move operations
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FNP_X">
            <summary> 
             Calculate the nearest point based on the x-coordinate physical coordinate system
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FNP_Y">
            <summary> 
             Calculate the nearest point based on the y-coordinate physical coordinate system
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FNP_DIST">
            <summary> 
             Calculate the nearest point based on the shortest distance using the physical coordinate system
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FNP_NORMX">
            <summary> 
             Calculate the nearest point based on the x-coordinate plot normalized coordinate system
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FNP_NORMY">
            <summary> 
             Calculate the nearest point based on the y-coordinate plot normalized coordinate system
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FNP_NORMDIST">
            <summary> 
             Calculate the nearest point based on the shortest distance using the physical coordinate system.  
             This should be used if the x and y physical coordinate system do not have an approximately  1:1 aspect ratio.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NONE">
            <summary> 
             No error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_COMPONENT">
            <summary> 
             Component error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SCALING">
            <summary> 
             A scaling object is null
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SCALERANGE">
            <summary> 
             A scale range is considered invalid - minimum and maximum values the same
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULLVIEWPORT">
            <summary> 
             null viewport
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SMALLVIEWPORT">
            <summary> Viewport to small ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_BORDER">
            <summary> Borders to large ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AXIS">
            <summary> 
             Non-specific axis error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AXISLABLES">
            <summary> 
             Axis labels error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULLBASEAXIS">
            <summary> 
             Base axis is null, object needs a valid base axis type )
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_WRONGAXISTYPE">
            <summary> 
             Object expects a different axis type (Can't use a numeric axis labels with a time axis)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AXISRANGE">
            <summary> 
            Axis range error - minimum and maximum the same value
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AXISTICKS">
            <summary> 
             Axis tick mark spacing must be a finite, positive number, for example 0.0 is invalid tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_POLARAXES">
            <summary> Polar axis labels need to reference a valid polar axes object ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FONT">
            <summary> 
             The font for the text object is null
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_TEXT">
            <summary> 
             A non-specific text object error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_TIMELABEL">
            <summary> 
             A non-specific time axis label error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SYMBOL">
            <summary> 
             A non-specific symbol error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SHAPE">
            <summary> 
             A non-specific shape error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_IMAGE">
            <summary> 
             A non-specific image error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_LEGEND">
            <summary> 
             A non-specific legend error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_LEGENDITEMTEXT">
            <summary> 
             The text for a legend item is null
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_LEGENDITEMSYMBOL">
            <summary> 
             The symbol for a legend item is null
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SUPERZOOM">
            <summary> 
             A non-specific super zoom error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_OBJECTMISMATCH">
            <summary> 
             Object no type expected
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SIMPLEDATASET">
            <summary> 
             Error in creating a simple dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_GROUPDATASET">
            <summary> 
             Error in creating a group dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_CONTOURDATASET">
            <summary> 
             Error in creating a contour dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_DATASET">
            <summary> 
             Error in creating a dataset, probably the x-values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_DATASETSIZE">
            <summary> 
             Error in creating a dataset, probably from a file, where the number of data points is less than 2,  
             and the number of groups less than 1.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_ARRAY_NEW">
            <summary> 
             Problem allocating an array
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_OBJ_NEW">
            <summary> 
             Temporary object cannot be allocated
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_BAD_POLYSURFACE">
            <summary> 
             Bad polysurface
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_GRID_ROW_COL">
            <summary> 
             Error in the number of rows or columns in an evenly spaced grid
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_DELAUNAY">
            <summary> Error in the Delaunay triangularization algorithm ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_PLOTOBJ">
            <summary> public object error ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_BARDATAVALUE">
            <summary> 
             The bar defining the position of the numeric text is invalid.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FILEIO">
            <summary> 
             Generic file i/o error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FILEOPEN">
            <summary> 
             File open error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FILEWRITE">
            <summary> 
             File write error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FILECLOSE">
            <summary> 
             File close error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AUTOSCALE">
            <summary> 
             Non-specific auto scale error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AUTOSCALE_DATASET">
            <summary> 
             ChartDataset invalid in auto scale calculation
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AUTOSCALE_DATASETSARRAY">
            <summary> 
             ChartDataset array invalid in auto scale calculation
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AUTOSCALE_TRANSFORM">
            <summary> 
             Transform invalid in auto scale calculation
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULL_PROCESSVAR">
            <summary> 
             Null process variable error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULL_ANNUNCIATOR_RECT">
            <summary> 
             Null annunciator rectangle error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_INVALID_ALARM_EVENT_ARGUEMENT">
            <summary> 
             Invalid alarm event
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_INVALID_ROUNDED_RECTANGLE_ARGUEMENT">
            <summary> 
             Invalid rounded rectangle argument
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULL_METER_INDICATOR">
            <summary> 
             Null meter error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULL_PLOT_TEMPLATE">
            <summary> 
             Null plot template error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NONE_STRING">
            <summary> 
             No error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_COMPONENT_STRING">
            <summary> 
             Component error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SCALING_STRING">
            <summary> 
             A scaling object is null
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SCALERANGE_STRING">
            <summary> 
             A scale range is considered invalid - minimum and maximum values the same
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULLVIEWPORT_STRING">
            <summary> 
             null viewport
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SMALLVIEWPORT_STRING">
            <summary> Viewport to small ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_BORDER_STRING">
            <summary> Borders to large ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AXIS_STRING">
            <summary> 
             Non-specific axis error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AXISLABLES_STRING">
            <summary> 
             Axis labels error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULLBASEAXIS_STRING">
            <summary> 
             Base axis is null, object needs a valid base axis type )
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_WRONGAXISTYPE_STRING">
            <summary> 
             Object expects a different axis type (Can't use a numeric axis labels with a time axis)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AXISRANGE_STRING">
            <summary> 
            Axis range error - minimum and maximum the same value
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AXISTICKS_STRING">
            <summary> 
             Axis tick mark spacing must be a finite, positive number, for example 0.0 is invalid tick mark spacing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_POLARAXES_STRING">
            <summary> Polar axis labels need to reference a valid polar axes object ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FONT_STRING">
            <summary> 
             The font for the text object is null
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_TEXT_STRING">
            <summary> 
             A non-specific text object error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_TIMELABEL_STRING">
            <summary> 
             A non-specific time axis label error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SYMBOL_STRING">
            <summary> 
             A non-specific symbol error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SHAPE_STRING">
            <summary> 
             A non-specific shape error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_IMAGE_STRING">
            <summary> 
             A non-specific image error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_LEGEND_STRING">
            <summary> 
             A non-specific legend error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_LEGENDITEMTEXT_STRING">
            <summary> 
             The text for a legend item is null
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_LEGENDITEMSYMBOL_STRING">
            <summary> 
             The symbol for a legend item is null
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SUPERZOOM_STRING">
            <summary> 
             A non-specific super zoom error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_OBJECTMISMATCH_STRING">
            <summary> 
             Object no type expected
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_SIMPLEDATASET_STRING">
            <summary> 
             Error in creating a simple dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_GROUPDATASET_STRING">
            <summary> 
             Error in creating a group dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_CONTOURDATASET_STRING">
            <summary> 
             Error in creating a contour dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_DATASET_STRING">
            <summary> 
             Error in creating a dataset, probably the x-values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_DATASETSIZE_STRING">
            <summary> 
             Error in creating a dataset, probably from a file, where the number of data points is less than 2,  and the number of groups less than 1.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_ARRAY_NEW_STRING">
            <summary> 
             Problem allocating an array
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_OBJ_NEW_STRING">
            <summary> 
             Temporary object cannot be allocated
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_BAD_POLYSURFACE_STRING">
            <summary> 
             Bad polysurface
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_GRID_ROW_COL_STRING">
            <summary> 
             Error in the number of rows or columns in an evenly spaced grid
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_DELAUNAY_STRING">
            <summary> Error in the Delaunay triangularization algorithm ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_PLOTOBJ_STRING">
            <summary> public object error ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_BARDATAVALUE_STRING">
            <summary> 
             The bar defining the position of the numeric text is invalid.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FILEIO_STRING">
            <summary> 
             Generic file i/o error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FILEOPEN_STRING">
            <summary> 
             File open error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FILEWRITE_STRING">
            <summary> 
             File write error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FILECLOSE_STRING">
            <summary> 
             File close error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AUTOSCALE_STRING">
            <summary> 
             Non-specific auto scale error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AUTOSCALE_DATASET_STRING">
            <summary> 
             ChartDataset invalid in auto scale calculation
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AUTOSCALE_DATASETSARRAY_STRING">
            <summary> 
             ChartDataset array invalid in auto scale calculation
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_AUTOSCALE_TRANSFORM_STRING">
            <summary> 
             Transform invalid in auto scale calculation
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULL_PROCESSVAR_STRING">
            <summary> 
             Null process variable string
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULL_ANNUNCIATOR_RECT_STRING">
            <summary> 
             Null annunciator rectangle string
            </summary>		
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_INVALID_ALARM_EVENT_ARGUEMENT_STRING">
            <summary> 
             Invalid alarm event string
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_INVALID_ROUNDED_RECTANGLE_ARGUEMENT_STRING">
            <summary> 
             Invalid rounded rectangle string
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULL_METER_INDICATOR_STRING">
            <summary> 
             Null meter indicator string
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_NULL_PLOT_TEMPLATE_STRING">
            <summary> 
             Null plot template string
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MIN_LOG_VALUE">
            <summary> 
             Smallest allowable value for log scale conversions
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MAX_LOG_VALUE">
            <summary> 
             Largest allowable value for log scale conversions
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.rBadDataValue">
            <summary> 
             The value used as a flag to mark a bad data value
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SECONDSPERDAY">
            <summary> 
             Default value for seconds per day
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NOT_MOVEABLE">
            <summary> 
             Object is not movable
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OBJECT_MOVEABLE">
            <summary> 
             The graph object is movable as a whole
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATA_MOVEABLE">
            <summary> 
             Individual data points of a plot object are movable
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NO_CLIPPING">
            <summary> 
             Graph object is not clipped
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.GRAPH_AREA_CLIPPING">
            <summary> 
             Graph object is clipped to the graph area
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PLOT_AREA_CLIPPING">
            <summary> 
             Graph object is clipped to the plot area
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.INHERIT_CLIPPING">
            <summary> 
             Graph object leaves the current state of clipping unchanged
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SIMPLE_PLOTAREA_CLIPPING">
            <summary> 
             UNUSED - clipping mode for simplified plot area clipping
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FULL_PLOTAREA_CLIPPING">
            <summary> 
             UNUSED - clipping mode for full plot area clipping
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LS_SOLID">
            <summary> 
             Line style constant - solid
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LS_DASH_8_4">
            <summary> 
             Line style constant - repeating pattern: 8 dots on, 4 dots off
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LS_DASH_4_4">
            <summary> 
             Line style constant - repeating pattern: 4 dots on, 4 dots off
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LS_DASH_4_2">
            <summary> 
             Line style constant - repeating pattern: 4 dots on, 2 dots off
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LS_DASH_2_2">
            <summary> 
             Line style constant - repeating pattern: 2 dots on, 2 dots off
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LS_DOT_1_1">
            <summary> 
             Line style constant - repeating pattern: 1 dots on, 1 dots off
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LS_DOT_1_2">
            <summary> 
             Line style constant - repeating pattern: 1 dots on, 2 dots off
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LS_DOT_1_4">
            <summary> 
             Line style constant - repeating pattern: 1 dots on, 4 dots off
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LS_DOT_1_8">
            <summary> 
             Line style constant - repeating pattern: 1 dots on, 8 dots off
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LS_DASH_DOT">
            <summary> 
             Line style constant - repeating pattern: 8 dots on, 4 dots off, 1 dot on, 4 dots off 
             </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PRT_EXACT">
            <summary> Pages and graphs are printed so that paper is used maximally.
             Text is printed proportionately to other objects, aspect7 ratio is NOT maintained
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PRT_PROP">
            <summary> Pages are printed so that paper is used maximally. Graphs are printed
             proportionately to the view size. Aspect ratio of the graph view is maintained
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PRT_MAX">
            <summary> Pages are printed so that paper is used maximally. Graphs are printed
             proportionately to paper size. Aspect ratio of the graph view is NOT maintained
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PRT_RECT">
            <summary> Print to the specified rectangle.  ///</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.XY_PLANE">
            <summary> 
             The XY plane
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.XZ_PLANE">
            <summary> 
             The XZ plane
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.YZ_PLANE">
            <summary> 
             The YZ plane
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.XY_MINZ_PLANE">
            <summary> 
             The XY minimum Z plane
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.XZ_MINY_PLANE">
            <summary> 
             The XZ minimum Y plane
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.YZ_MINX_PLANE">
            <summary> 
             The YZ minimum X plane
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.XY_MAXZ_PLANE">
            <summary> 
             The XY maximum Z plane
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.XZ_MAXY_PLANE">
            <summary> 
             The XZ maximum Y plane
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.YZ_MAXX_PLANE">
            <summary> 
             The YZ maximum X plane
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CONTOUR_FILL">
            <summary> 
             Fill the area between contour levels with a color
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CONTOUR_LINE">
            <summary> 
             Draw contour levels using a line
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CONTOUR_LINEANDFILL">
            <summary> 
             Draw the contour levels using a line and fill the area between the contour levels with a color
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CONTOUR_LINEWALK">
            <summary> 
             Contour lines are calculated by finding a contour, and then tracking that contour line  until it 
             returns to the beginning, or runs off the edge of the contour plot. Useful  for pen plotters.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CONTOUR_LINEPOLYGON">
            <summary> 
             Contour lines are calculated by analyzing each polygon, one by one, for every possible contour level within.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OBJECT_DISABLE">
            <summary> 
             Do not process the graph object
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OBJECT_ENABLE">
            <summary> 
             Process and draw the graph object
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OBJECT_ENABLE_NODRAW">
            <summary> 
             Process the graph object so that positioning information is accurate, but do not draw.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NO_RESIZE_OBJECTS">
            <summary> 
             Do not resize graph objects when the chart window is resized
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AUTO_RESIZE_OBJECTS">
            <summary> 
             Resize the objects in the graph when the chart window is resized
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MANUAL_RESIZE_OBJECTS">
            <summary> 
             The resizeMultiplier property for each objects is used to resize the object.  This property should be 
             explicitly set by the programmer if this mode is set.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.COLUMN_MAJOR">
            <summary> 
             Data in a file is organized so that adjacent x-values are rows in the file,  each group of y-values 
             start a new column
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ROW_MAJOR">
            <summary> 
             Data in a file is organized so that adjacent x-values are columns in the file,  each group of 
             y-values start a new row
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.POLYSURFACE_SQUAREGRID">
            <summary> 
             A polysurface is built of square polygons
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.POLYSURFACE_TRIANGLEGRID">
            <summary> 
             A polysurface is built of triangle polygons
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NO_FASTCLIP">
            <summary> Normal, complete, clipping of entire dataset against x and y plot area coordinate system.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FASTCLIP_X">
            <summary> Data is assumed monotonic (always increasing) in x. All data before the first
              x-value of the dataset actually in the plot area is discarded, not drawn and clipped as
             in the NO_FASTCLIP mode.  All data after the first x-value that is greater than the ending x-coordinate of
             the plot area is also discarded. This can speed things up because if a dataset has 1,000,000
             data points, and only 100 are in the plotting area, only 100 points are actually plotted using
             the line drawing routines. This is most useful in zooming applications.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FASTCLIP_Y">
            <summary> Data is assumed monotonic (always increasing) in y. All data before the first
              y-value of the dataset actually in the plot area is discarded, not drawn and clipped as
             in the NO_FASTCLIP mode.  All data after the first y-value that is greater than the ending y-coordinate of
             the plot area is also discarded. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LM_S">
            <summary> 
             No Commment
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATA_TOOLTIP_CUSTOM">
            <summary> 
             Secifies a user-defined tooltip format
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATA_TOOLTIP_X">
            <summary> 
             Displays the x-value of a datapoint in the tooltip box
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATA_TOOLTIP_Y">
            <summary> 
             Displays the y-value of a datapoint in the tooltip box
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATA_TOOLTIP_XY_ONELINE">
            <summary> 
             Displays the x- and y-values of a datapoint on a single line, separated by a comma, in the tooltip box
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATA_TOOLTIP_XY_TWOLINE">
            <summary> 
             Displays the x- and y-values of a datapoint on two separate lines in the tooltip box
            </summary>	 
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATA_TOOLTIP_GROUP_MULTILINE">
            <summary> 
             Displays the x- and y-values of a group dataset on separate lines in the tooltip box
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATA_TOOLTIP_OHLC">
            <summary> 
             Displays the x- and y-values of a group dataset in an OHLC format on separate lines in the tooltip box
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATACOMPRESS_NONE">
            <summary> 
             No data compression, just create dataset base on starting and ending values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATACOMPRESS_SKIP">
            <summary> 
             Create a new dataset using every nth point from source dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATACOMPRESS_AVERAGE">
            <summary> 
             Create a new dataset using an average of every n values from source dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATACOMPRESS_MIN">
            <summary> 
             Create a new dataset using the minimum value for every n points from source dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATACOMPRESS_MAX">
            <summary> 
             Create a new dataset using the maximum value for every n points from source dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATACOMPRESS_MINMAX">
            <summary> 
             Create a new dataset using the minimum and maximum value for every n points from source dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATACOMPRESS_SUM">
            <summary> 
             Create a new dataset using the sum of every n points from source dataset
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BACKGROUND_RECTANGLE">
            <summary> 
             Basic sharp cornered rectangle background
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SHAPE_RECTANGLE">
            <summary> 
             Basic sharp cornered rectangle background
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BACKGROUND_ROUNDEDRECTANGLE">
            <summary> 
             Rounded rectangle background
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SHAPE_ROUNDEDRECTANGLE">
            <summary> 
             Rounded rectangle background
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BACKGROUND_ELLIPSE">
            <summary> 
             Ellipse background, used mostly by meters
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SHAPE_ELLIPSE">
            <summary> 
             Ellipse background, used mostly by meters
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.YEAR">
            <summary> 
             A static counter that keeps track of how many ChartObj derived objects are created.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MONTH">
            <summary>
              Field number indicating the  month.  
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.WEEK_OF_YEAR">
            <summary>
              Field number indicating the  week number within the current year.  
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.WEEK_OF_MONTH">
            <summary>
              Field number indicating the  week number within the current month.  
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DATE">
            <summary>
              Field number indicating the  day of the month.  
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DAY_OF_MONTH">
            <summary>
              Field number indicating the  day of the month.  
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DAY_OF_YEAR">
            <summary>
              Field number indicating the day  number within the current year. The first day of the year has value 1.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DAY_OF_WEEK">
            <summary>
              Field number indicating the day  of the week. This field takes values <code>SUNDAY</code>,  
              <code>MONDAY</code>, <code>TUESDAY</code>, <code>WEDNESDAY</code>,  <code>THURSDAY</code>, 
              <code>FRIDAY</code>, and <code>SATURDAY</code>. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.HOUR">
            <summary>
              Field number indicating the  hour of the morning or afternoon. <code>HOUR</code> is used for the 12-hour  
              clock.  E.g., at 10:04:15.250 PM the <code>HOUR</code> is 10. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.HOUR_OF_DAY">
            <summary>
              Field number indicating the  hour of the day. <code>HOUR_OF_DAY</code> is used for the 24-hour clock.  
              E.g., at 10:04:15.250 PM the <code>HOUR_OF_DAY</code> is 22. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MINUTE">
            <summary>
              Field number indicating the  minute within the hour.  E.g., at 10:04:15.250 PM the <code>MINUTE</code> is 4.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SECOND">
            <summary>
              Field number indicating the  second within the minute.  E.g., at 10:04:15.250 PM the <code>SECOND</code> is 15.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MILLISECOND">
            <summary>
              Field number indicating the  millisecond within the second.  E.g., at 10:04:15.250 PM 
              the <code>MILLISECOND</code> is 250.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TICKS">
            <summary>
              Field number indicating TICKS. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MTICKS">
            <summary>
              Field number indicating millisecond  TICKS (i.e. TICKS / 10000L). 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SUNDAY">
            <summary>
              Value of the <code>DAY_OF_WEEK</code> field indicating  Sunday.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MONDAY">
            <summary>
              Value of the <code>DAY_OF_WEEK</code> field indicating  Monday.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TUESDAY">
            <summary>
              Value of the <code>DAY_OF_WEEK</code> field indicating  Tuesday.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.WEDNESDAY">
            <summary>
              Value of the <code>DAY_OF_WEEK</code> field indicating  Wednesday.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.THURSDAY">
            <summary>
              Value of the <code>DAY_OF_WEEK</code> field indicating  Thursday.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FRIDAY">
            <summary>
              Value of the <code>DAY_OF_WEEK</code> field indicating  Friday.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SATURDAY">
            <summary>
              Value of the <code>DAY_OF_WEEK</code> field indicating  Saturday.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.JANUARY">
            <summary>
              Value of the <code>MONTH</code> field indicating the  first month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FEBRUARY">
            <summary>
              Value of the <code>MONTH</code> field indicating the  second month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MARCH">
            <summary>
              Value of the <code>MONTH</code> field indicating the  third month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.APRIL">
            <summary>
              Value of the <code>MONTH</code> field indicating the  fourth month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.MAY">
            <summary>
              Value of the <code>MONTH</code> field indicating the  fifth month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.JUNE">
            <summary>
              Value of the <code>MONTH</code> field indicating the  sixth month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.JULY">
            <summary>
              Value of the <code>MONTH</code> field indicating the  seventh month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.AUGUST">
            <summary>
              Value of the <code>MONTH</code> field indicating the  eighth month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SEPTEMBER">
            <summary>
              Value of the <code>MONTH</code> field indicating the  ninth month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OCTOBER">
            <summary>
              Value of the <code>MONTH</code> field indicating the  tenth month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NOVEMBER">
            <summary>
              Value of the <code>MONTH</code> field indicating the  eleventh month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.DECEMBER">
            <summary>
              Value of the <code>MONTH</code> field indicating the  twelfth month of the year.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.UNDECIMBER">
            <summary>
              Value of the <code>MONTH</code> field indicating the  thirteenth month of the year. 
              Although <code>ChartCalendar</code>  does not use this value, lunar calendars do.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_GRAPH_OBJ">
            <summary>  A RT graph object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_PROCESSVAR">
            <summary>  A RT process variable object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_COMBO_PROCESSVAR">
            <summary>  A RT combo process variable object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ALARM">
            <summary>  A RT alarm object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_PROCESSVAR_ALARM">
            <summary>  A RT process variable object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_DATASET">
            <summary>  A RT dataset object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SIMPLE_DATASET">
            <summary>  A RT simple dataset object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_GROUP_DATASET">
            <summary>  A RT group dataset object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TIME_SIMPLE_DATASET">
            <summary>  A RT time simple dataset object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TIME_GROUP_DATASET">
            <summary>  A RT time group dataset object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SYMBOL">
            <summary>  A RT symbol object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_PLOT">
            <summary>  A RT plot object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SINGLE_VALUE_INDICATOR">
            <summary>  A RT single value indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_MULTIVALUE_INDICATOR">
            <summary>  A RT multiple value indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_BAR_INDICATOR">
            <summary>  A RT bar indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_MULTIBAR_INDICATOR">
            <summary>  A RT multi-bar indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ALARM_INDICATOR">
            <summary>  A RT alarm indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_MULTIALARM_INDICATOR">
            <summary>  A RT multi-alarm indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_FACEPLATE">
            <summary>  A RT meter faceplate object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_COORDINATES">
            <summary>  A RT meter frame object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_NMETER">
            <summary>  A RT needle meter object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_AXIS">
            <summary>  A RT meter object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_AXIS_LABELS">
            <summary>  A RT meter axis labels object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_STRING_AXIS_LABELS">
            <summary>  A RT meter string axis labels object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_INDICATOR">
            <summary>  A RT meter indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_NEEDLE_INDICATOR">
            <summary>  A RT meter needle indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_SYMBOL_INDICATOR">
            <summary>  A RT mete symbol indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_ARC_INDICATOR">
            <summary>  A RT meter arc indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SINGLE_CHANNEL_PANEL_METER">
            <summary>  A RT single channel panel meter object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_NUMERIC_PANEL_METER">
            <summary>  A RT numeric panel meter object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_STRING_PANEL_METER">
            <summary>  A RT string panel meter object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ALARM_PANEL_METER">
            <summary>  A RT alarm panel meter object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TIME_PANEL_METER">
            <summary>  A RT time panel meter object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_3DFRAME">
            <summary>  A RT 3D frame object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TEXTFRAME">
            <summary>  A RT text frame object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_BARTAG">
            <summary>  A RT bar tag object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ROUNDED_RECTANGLE2D">
            <summary>  A RT round rectangle object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_GROUP_MULTIVALUE_PLOT">
            <summary>  A RT group multi-value plot object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SIMPLE_SINGLEVALUE_PLOT">
            <summary>  A RT simple single value plot object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_MULTIPOINTER_INDICATOR">
            <summary>  A RT multi-point indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_POINTER_INDICATOR">
            <summary>  A RT point indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_BAR_NUMERIC_VALUE">
            <summary>  A RT bar numeric value object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_BAR_TIME_VALUE">
            <summary>  A RT bar time value object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_GEN_SHAPE">
            <summary>  A RT general shape object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_PIDCONTROL">
            <summary>  A RT PID Control object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTO_BARGRAPH">
            <summary>  An auto bargraph object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTO_METER">
            <summary>  An auto meter  object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTO_SCROLL_GRAPH">
            <summary>  An auto meter  object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NOT_SPECIALCONTROL_TYPE">
            <summary>
            Not a special control type.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TRACKBAR_TYPE">
            <summary>
            A .Net trackbar scroll bar type.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.HSCROLLBAR_TYPE">
            <summary>
            A horizontal scroll bar type.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.VSCROLLBAR_TYPE">
            <summary>
            A .Net vertical scroll bar type.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SIMPLEBUTTON_TYPE">
            <summary>
            A .Net simple button type.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RADIOBUTTON_TYPE">
            <summary>
            A .Net radio button type.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_CONTROL_BUTTON_TYPE">
            <summary>
            A RT radio button type derived from the .Net button type, making a much more flexible button
            with respect to chaning the button colors and text when the button is selected.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_CONTROL_TRACKBAR_TYPE">
            <summary>
            A RT trackbar type derived from the .Net TrackBar type, supports floating point numbers, unlike TrackBar.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PICTUREBOX_TYPE">
            <summary>
            A .Net PictureBox type.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_FORM_CONTROL">
            <summary>
            A RTFormControl object
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_FORM_CONTROL_PANEL_METER">
            <summary>
            A RTFormControlPanelMeter object
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_FORM_CONTROL_GRID">
            <summary>
            A RTFormControlGrid object
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_NEEDLE_SIMPLE_SUBTYPE">
            <summary>  A RT meter needle simple object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_NEEDLE_PIEWEDGE_SUBTYPE">
            <summary>  A RT meter needle pie wedge object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_NEEDLE_ARROW_SUBTYPE">
            <summary>  A RT meter needle arrow object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_ARC_BAND_SUBTYPE">
            <summary>  A RT meter arc band object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_SEGMENTED_ARC_SUBTYPE">
            <summary>  A RT  meter segmented arc object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_SINGLE_SEGMENT_ARC_SUBTYPE">
            <summary>  A RT meter single segment arc object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_SYMBOL_ARC_SUBTYPE">
            <summary>  A RT  meter symbol arc </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_SINGLE_SYMBOL_SUBTYPE">
            <summary>  A RT meter single symbol object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_BAR_SOLID_SUBTYPE">
            <summary>  A RT solid bar indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_BAR_SEGMENTED_SUBTYPE">
            <summary>  A RT segmented bar indicator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_BAR_SINGLE_SEGMENT_SUBTYPE">
            <summary>  A RT single segment bar indicator  object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_POINTER_SUBTYPE">
            <summary>  A RT pointer indicator </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SCROLL_FRAME">
            <summary>  A RT scroll frame object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ANNUNCIATOR_PLOT">
            <summary>  A RT annunciator plot object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_MULTIVALUE_ANNUNCIATOR">
            <summary>  A RT multichannel annunciator object </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_ARC_RADIUS_CAP">
            <summary>  A RT meter arc radius cap constant </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_ARC_FLAT_CAP">
            <summary>  A RT meter arc flat cap constant  </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_METER_ARC_WEDGE_WIDTH_CAP">
            <summary>  A RT meter arc wedge width cap constant  </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ALARM_NONE">
            <summary>  A RT alarm type constant: No alarm</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ALARM_LOWERTHAN">
            <summary>  A RT alarm type constant: Lower than alarm</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ALARM_GREATERTHAN">
            <summary>  A RT alarm type constant: Greater than alarm</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SETPOINT_VALUE">
            <summary>  A RT alarm type constant: Setpoint, not an alarm</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_NO_SYMBOL">
            <summary>  A RT symbol type constant: No symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_LEFT_LOW_ALARM_SYMBOL">
            <summary>  A RT symbol type constant: Left low alarm symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_LEFT_SETPOINT_SYMBOL">
            <summary>  A RT symbol type constant: Left setpoint symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_LEFT_HIGH_ALARM_SYMBOL">
            <summary>  A RT symbol type constant: Left high alarm symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_RIGHT_LOW_ALARM_SYMBOL">
            <summary>  A RT symbol type constant: Right low alarm symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_RIGHT_SETPOINT_SYMBOL">
            <summary>  A RT symbol type constant: Right setpoint symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_RIGHT_HIGH_ALARM_SYMBOL">
            <summary>  A RT symbol type constant: Right high alarm symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TOP_LOW_ALARM_SYMBOL">
            <summary>  A RT symbol type constant: Top low alarm symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TOP_SETPOINT_SYMBOL">
            <summary>  A RT symbol type constant: Top setpoint symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TOP_HIGH_ALARM_SYMBOL">
            <summary>  A RT symbol type constant: Top high alarm symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_BOTTOM_LOW_ALARM_SYMBOL">
            <summary>  A RT symbol type constant: Bottom low alarm symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_BOTTOM_SETPOINT_SYMBOL">
            <summary>  A RT symbol type constant: Bottom setupoint symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_BOTTOM_HIGH_ALARM_SYMBOL">
            <summary>  A RT symbol type constant: Bottom high alarm symbol. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TRACKBAR_VERTICAL_RIGHT_POINTER">
            <summary>  A RT symbol type constant: The indicator for a vertical trackbar control. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TRACKBAR_HORIZONTAL_DOWN_POINTER">
            <summary>  A RT symbol type constant: The indicator for a horizontal trackbar control. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TRACKBAR_VERTICAL_CENTER_POINTER">
            <summary>  A RT symbol type constant: The indicator for a vertical trackbar control. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TRACKBAR_HORIZONTAL_CENTER_POINTER">
            <summary>  A RT symbol type constant: The indicator for a horizontal trackbar control. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_DISPLAY_NO_ALARM">
            <summary>  A RT alarm display constant: Display no alarms. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_DISPLAY_PRIMARY_ALARM">
            <summary>  A RT alarm display constant: Display alarms for primary channel. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_DISPLAY_ALL_ALARMS">
            <summary>  A RT alarm display constant: Display alarms for all channels. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_NO_ALARM_LIMIT_INDICATOR">
            <summary>  A RT alarm display constant: No alarm limit indicators. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ALARM_LIMIT_SYMBOL_INDICATOR">
            <summary>  A RT alarm display constant: Display symbols as alarm limit indicators. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ALARM_LIMIT_LINE_INDICATOR">
            <summary>  A RT alarm display constant: Display lines as alarm limit indicators. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ALARM_LIMIT_BACKGROUND_INDICATOR">
            <summary>  A RT alarm display constant: Display filled areas as alarm limit indicators. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ALARM_TRANSITION_NONE_NORMAL">
            <summary>  A RT alarm transition constant: No change in alarm state. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ALARM_TRANSITION_INCREASING_TO_HIGH">
            <summary>  A RT alarm transition constant: Alarm transition increasing to high. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ALARM_TRANSITION_NONE_HIGH">
            <summary>  A RT alarm transition constant: Alarm transition none, high alarm. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ALARM_TRANSITION_DECREASING_FROM_HIGH">
            <summary>  A RT alarm transition constant: Alarm transition decreasing from high. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ALARM_TRANSITION_DECREASING_TO_LOW">
            <summary>  A RT alarm transition constant: Alarm transition decreasing to low. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ALARM_TRANSITION_NONE_LOW">
            <summary>  A RT alarm transition constant: Alarm transition none, low alarm. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ALARM_TRANSITION_INCREASING_FROM_LOW">
            <summary>  A RT alarm transition constant: Alarm transition increasing from low. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_NO_AUTOSCALE_X">
            <summary>  A scroll frame scroll mode constant: No auto-scale of x-axis. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTOSCALE_X">
            <summary>  A scroll frame scroll mode constant: Auto-scale of x-axis. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTOSCALE_X_MIN">
            <summary>  A scroll frame scroll mode constant: Auto-scale of x-axis for minimum value only. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTOSCALE_X_MAX">
            <summary>  A scroll frame scroll mode constant: Auto-scale of x-axis for maximum value only. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTOSCALE_X_MINMAX">
            <summary>  A scroll frame scroll mode constant: Auto-scale of x-axis for minimum and maximum values. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_FIXEDEXTENT_MOVINGSTART_AUTOSCROLL">
            <summary>  A scroll frame scroll mode constant: Auto-scale of x-axis, fixed extent moving start. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_MAXEXTENT_FIXEDSTART_AUTOSCROLL">
            <summary>  A scroll frame scroll mode constant: Auto-scale of x-axis, max extent, fixed star. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_FIXEDNUMPOINT_AUTOSCROLL">
            <summary>  A scroll frame scroll mode constant: Auto-scale for N most recent data points. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_FIXEDEXTENT_AUTOWRAP_AUTOSCROLL">
            <summary>  A scroll frame scroll mode constant: Auto wrap of values on x-axis, no re-scale. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTOSCALE_X_CURRENT_SCALE">
            <summary>  A scroll frame scroll mode constant: Auto-scale using current min and max values of x-scale. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_NO_AUTOSCALE_Y">
            <summary>  A scroll frame scroll mode constant: No auto-scale of y-axis. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTOSCALE_Y">
            <summary>  A scroll frame scroll mode constant: Auto-scale of y-axis. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTOSCALE_Y_MIN">
            <summary>  A scroll frame scroll mode constant: Auto-scale of y-axis for minimum value only. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTOSCALE_Y_MAX">
            <summary>  A scroll frame scroll mode constant: Auto-scale of y-axis for maximum value only. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTOSCALE_Y_MINMAX">
            <summary>  A scroll frame scroll mode constant: Auto-scale of y-axis for minimum and maximum values. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_AUTOSCALE_Y_CURRENT_SCALE">
            <summary>  A scroll frame scroll mode constant: Auto-scale using current min and max values of y-scale. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_MONOTONIC_X_MODE">
            <summary>  A scroll frame scroll mode constant: Specifies that x-values are monotonic, i.e. every increasing 
            as in time based data. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_NOT_MONOTONIC_X_MODE">
            <summary>  A scroll frame scroll mode constant: Specifies that x-values are NOT monotonic, i.e. 
            x-values can backtrack.. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_INDICATOR_COLOR_NO_ALARM_CHANGE">
            <summary>  A RT alarm indicator color mode constant: Do not change indicator primary color on alarm. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_INDICATOR_COLOR_CHANGE_ON_ALARM">
            <summary>  A RT alarm indicator color mode constant: Change indicator primary color on alarm. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TEXT_BACKGROUND_COLOR_CHANGE_ON_ALARM">
            <summary>  A RT alarm indicator color mode constant: Change panel meter background color on alarm. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ROUND_VALUE">
            <summary>  A RT indicator segment mode rounding constant: Round values when calculating if segment on/off. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_FLOOR_VALUE">
            <summary>  A RT indicator segment mode rounding constant: Take the floor of values when calculating if 
            segment on/off. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_CEILING_VALUE">
            <summary>  A RT indicator segment mode rounding constant: Take the ceiling of values when calculating if 
            segment on/off. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OUTSIDE_RADIUS_BOTTOM">
            <summary>  A RT meter indicator text position constant: Position meter text outside the bottom of the 
            meters defining radius. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.INSIDE_RADIUS_BOTTOM">
            <summary>  A RT meter indicator text position constant: Position meter text inside the bottom of the 
            meters defining radius. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OUTSIDE_RADIUS_TOP">
            <summary>  A RT meter indicator text position constant: Position meter text outside the top of the 
            meters defining radius. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.INSIDE_RADIUS_TOP">
            <summary>  A RT meter indicator text position constant: Position meter text inside the top of the 
            meters defining radius. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BELOW_REFERENCED_TEXT">
            <summary>  A RT meter indicator text position constant: Position meter text below the previous 
            text item. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ABOVE_REFERENCED_TEXT">
            <summary>  A RT meter indicator text position constant: Position meter text above the previous 
            text item. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LEFT_REFERENCED_TEXT">
            <summary>  A RT meter indicator text position constant: Position meter text left the previous 
            text item. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RIGHT_REFERENCED_TEXT">
            <summary>  A RT meter indicator text position constant: Position meter text right the previous 
            text item. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CENTER_RADIUS_TOP">
            <summary>  A RT meter indicator text position constant: Position meter text at center of meter 
            radius, justified JUSTIFY_MAX in y direction </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CENTER_RADIUS_BOTTOM">
            <summary>  A RT meter indicator text position constant: Position meter text at center of meter 
            radius, justified JUSTIFY_MIN in y direction </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CENTER_RADIUS_LEFT">
            <summary>  A RT meter indicator text position constant: Position meter text at center of meter 
            radius, justified JUSTIFY_MIN in x direction </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CENTER_RADIUS_RIGHT">
            <summary>  A RT meter indicator text position constant: Position meter text at center of meter 
            radius, justified JUSTIFY_MAX in x direction </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RADIUS_BOTTOM">
            <summary>  A RT meter indicator text position constant: Position meter text at bottom of meter 
            radius </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RADIUS_TOP">
            <summary>  A RT meter indicator text position constant: Position meter text at top of meter 
            radius.</summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RADIUS_LEFT">
            <summary>  A RT meter indicator text position constant: Position meter text at left of meter 
            radius. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RADIUS_RIGHT">
            <summary>  A RT meter indicator text position constant: Position meter text at right of meter 
            radius. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RADIUS_CENTER">
            <summary>  A RT meter indicator text position constant: Position meter text at center of meter 
            radius. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BELOW_CENTERED_PLOTAREA">
            <summary>  A RT Panel Meter  position constant: Position bottom center above plot area. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ABOVE_CENTERED_PLOTAREA">
            <summary>  A RT Panel Meter  position constant: Position top center above plot area. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LEFT_CENTERED_PLOTAREA">
            <summary>  A RT Panel Meter  position constant: Position left center plot area. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RIGHT_CENTERED_PLOTAREA">
            <summary>  A RT Panel Meter  position constant: Position right center plot area. </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.CUSTOM_POSITION">
            <summary>  A RT meter indicator text position constant: Position meter text at custom position. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.METER_LABEL_HORIZONTAL">
            <summary> A RT meter axis label text orientation constant:  Position meter axis labels text at 
            horizontal to tick mark. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.METER_LABEL_RADIAL_1">
            <summary> A RT meter axis label text orientation constant:  Position meter axis labels text 
            parallel to tick mark.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.METER_LABEL_RADIAL_2">
            <summary> A RT meter axis label text orientation constant:  Position meter axis labels text parallel 
            to tick mark.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.METER_LABEL_PERPENDICULAR">
            <summary> A RT meter axis label text orientation constant:  Position meter axis labels text at right 
            angles to tick mark. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LIGHT_UPPER_LEFT">
            <summary> A RT 3D frame light direction constant: Light from upper left. </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LIGHT_UPPER_RIGHT">
            <summary> A RT 3D frame light direction constant: Light from upper right.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LIGHT_LOWER_LEFT">
            <summary> A RT 3D frame light direction constant: Light from lower left.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LIGHT_LOWER_RIGHT">
            <summary> A RT 3D frame light direction constant: Light from upper right.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LIGHT_STRAIGHT_ON">
            <summary> A RT 3D frame light direction constant: Light from straight on.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LIGHT_NONE">
            <summary> A RT 3D frame light direction constant: No light.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.INSET_3D_LOOK">
            <summary> A RT 3D frame light direction constant: Inset 3D look.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.OUTSET_3D_LOOK">
            <summary> A RT 3D frame light direction constant: Outset 3D look.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.LEFT_SIDE">
            <summary> A RT 3D frame side constant: Left side.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.TOP_SIDE">
            <summary> A RT 3D frame side constant: Top side.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RIGHT_SIDE">
            <summary> A RT 3D frame side constant: Right side.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BOTTOM_SIDE">
            <summary> A RT 3D frame side constant: Bottom side.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.HIGHLIGHT_COLOR">
            <summary> A RT 3D frame side color constant: Highlight color.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SHADOW_COLOR">
            <summary> A RT 3D frame side color constant: Shadow color.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_CUSTOM_STRING">
            <summary> A Panel Meter string type constant: User specified string.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_TAG_STRING">
            <summary> A Panel Meter string type constant: Use the tag string of the representative process 
            variable.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_UNITS_STRING">
            <summary> A Panel units string type constant: Use the units string of the representative process 
            variable.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_UNIQUEID_STRING">
            <summary> A Panel units string type constant: Use the uniqueIdentifier string of the representative 
            process variable.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_SHORT_DESCRIPTION_STRING">
            <summary> A Panel units string type constant: Use the shortDescription string of the representative 
            process variable.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_DETALED_DESCRIPTION_STRING">
            <summary> A Panel units string type constant: Use the detailedDescription string of the representative 
            process variable.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.NO_ASPECT_RATIO_CORRECTION">
            <summary> A shape drawing constant, no aspect ratio correction for drawing circles.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FIXED_X_ASPECT_RATIO_CORRECTION">
            <summary> A shape drawing constant, use the width of the defining box to draw a circle with a 1:1 
            aspect ratio.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.FIXED_Y_ASPECT_RATIO_CORRECTION">
            <summary> A shape drawing constant, use the height of the defining box to draw a circle with a 1:1 
            aspect ratio.</summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RTPID_POSITIONCONTROL">
            <summary>
            PID position control constant.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RTPID_VELOCITYCONTROL">
            <summary>
            PID velocity control constant.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_CONTROL_TOGGLEBUTTON_SUBTYPE">
            <summary>
            A subtype of the RTControlGroupButton type derived from the .Net Button type, 
            supports a momentary button action that can change color and text when the button is pressed.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_CONTROL_MOMENTARYBUTTON_SUBTYPE">
            <summary>
            A subtype of the RTControlGroupButton type derived from the .Net Button type, 
            supports a toggle button action that can change color and text when the button is pressed.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_CONTROL_RADIOBUTTON_SUBTYPE">
            <summary>
            A subtype of the RTControlGroupButton type derived from the .Net Button type, 
            supports a radio button action that can change color and text when the button is pressed.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_ORIG_CONTROL_SIZE">
            <summary>
            Use the size of the original control passed in
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_MIN_CONTROL_SIZE">
            <summary>
            Use the recommended minimum control size
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.RT_INDICATORRECT_CONTROL_SIZE">
            <summary>
            Size the control as large as the containing object allows.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.SCREEN_RENDERING">
            <summary>
            Graphics context is a screen rendering context.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.BUFFERED_IMAGE_RENDERING">
            <summary>
            Graphics context is a buffered image context.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PRINTER_RENDERING">
            <summary>
            Graphics context is a printer rendering context.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PRE_RENDER_NONE">
            <summary>
            Do not pre-render graph objects before actual display rendering.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PRE_RENDER_ALL">
            <summary>
            Pre-render all graph objects before actual display rendering.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PRE_RENDER_AXES">
            <summary>
            Pre-render just axis objects before display rendering.
            </summary>>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.PRE_RENDER_ZORDER_CHANGE">
            <summary>
            Pre-render objects if the z-order of any objects has changed.
            </summary>>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FILEREAD">
            <summary> 
             File read error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.ERROR_FILEREAD_STRING">
            <summary> 
             File read error
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.sizeOfDouble">
            <summary> 
             Specifies the size of the double type.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.chartObjIDCntr">
            <summary>
             The current count of created instances of the ChartObj class.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.thisChartObjID">
            <summary> 
             The chartObjIDCntr value for this specific object
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartObj.chartObjType">
            <summary> 
             Specifies the chart object type.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartObj.#ctor">
            <summary> 
              The default ChartObj constructor.
            </summary>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartObj.Copy(com.quinncurtis.chart2dnet.ChartObj)">
            <summary> 
              Copies the source object. 
            </summary>
            <param name="source"> The source object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartObj.Clone">
            <summary> 
              The abstract clone method.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartObj.ErrorCheck(System.Int32)">
            <summary> 
              Throws an exception if an error exists in the error chain. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartObj.GetChartObjType">
            <summary> 
             Returns the chart object type. 
            </summary>
            <returns> Returns the chart object type. See the Chart Object Type Constants  in the 
            GRID_MINOR file for a current list of chart object types.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartObj.GetThisChartObjID">
            <summary> 
             Returns the chartObjID value for this specific object. 
            </summary>
            <returns> Returns the chartObjID value for this specific object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartObj.GetChartObjIDCntr">
            <summary> 
             Returns the current value of the chartObjIDCntr static counter. 
            </summary>
            <returns> Returns the current value of the chartObjIDCntr static counter.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartObj.ChartObjType">
            <summary> 
             Get/Set the chart object type. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arrow.arrowShaftHalfWidth">
            <summary>
             The half width of the arrow shaft in Device Coordinates (the part of the arrow not including the arrowhead).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arrow.arrowShaftLength">
            <summary>
             The length of the arrow shaft in Device Coordinates (the part of the arrow not including the arrow head).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arrow.arrowHeadHalfWidth">
            <summary>
             The half width of the arrow head in Device Coordinates (the part of the arrow not including the arrow shaft).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arrow.arrowHeadLength">
            <summary>
             The length of the arrow head in Device Coordinates (the part of the arrow not including the arrow shaft).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arrow.arrowBaseScaleFactor">
            <summary>
             This property controls scales the arrow so that an arrowScaleFactor of 1.0 corresponds  
             to an arrow that has a length in normalized coordinates of 1.0.
             Leave this value at 1.0.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arrow.arrowScaleFactor">
            <summary>
             This property controls the overall scale of the arrow. Using the default values, a value of  
             1.0 corresponds to an arrow that has a length of 10 pixels.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arrow.arrowShape">
            <summary>
             The arrow shape is stored as a GraphicsPath object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Arrow.minArrowValue">
            <summary>
             A small value used to limit the minimum size of arrow parts.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.ErrorCheck(System.Int32)">
            <summary>
              Checks the current graph object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.#ctor">
            <summary>
              The default Arrow constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              This constructor creates a new Arrow object using the specified dimension parameters. 
            </summary>
            <param name="arrowshafthalfwidth"> Sets the half width of the arrow shaft. </param>
            <param name="arrayshaftlength"> Sets the length of the arrow shaft. </param>
            <param name="arrowheadhalfwidth"> Sets the half width of the arrow head. </param>
            <param name="arrowheadlength"> Sets the length of the arrow head.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.SetArrow(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              This methods sets the dimensions of an Arrow object. 
            </summary>
            <param name="arrowshafthalfwidth"> Sets the half width of the arrow shaft. </param>
            <param name="arrayshaftlength"> Sets the length of the arrow shaft. </param>
            <param name="arrowheadhalfwidth"> Sets the half width of the arrow head. </param>
            <param name="arrowheadlength"> Sets the length of the arrow head.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.Clone">
            <summary>
             Returns an object that is a clone of this Arrow object. 
            </summary>
            <returns> Returns a clone of this Arrow object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.Copy(com.quinncurtis.chart2dnet.Arrow)">
            <summary>
              Copies the source Arrow object. 
            </summary>
            <param name="source"> The source Arrow object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.DefineArrowShape">
            <summary>
              Calculates the final dimensions of the Arrow object by  multiplying each dimension by the 
              arrowBaseScaleFactor and the arrowScaleFactor.  It then defines the shape of the GraphicsPath 
              object used to draw the arrow.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.GetArrowShape">
            <summary>
              Returns the GraphicsPath object used to draw the arrow. 
            </summary>
            <returns> Returns the GraphicsPath object used to draw the arrow.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.SetArrowShaftHalfWidth(System.Double)">
            <summary>
              Sets the arrow shaft half width. 
            </summary>
            <param name="width"> Sets the arrow shaft half width.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.GetArrowShaftHalfWidth">
            <summary>
              Returns the arrow shaft half width. 
            </summary>
            <returns> Returns the arrow shaft half width.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.SetArrowShaftLength(System.Double)">
            <summary>
              Sets the arrow shaft length. 
            </summary>
            <param name="length"> Sets the arrow shaft length.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.GetArrowShaftLength">
            <summary>
              Returns the arrow shaft length. 
            </summary>
            <returns> Returns the arrow shaft length.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.SetArrowHeadHalfWidth(System.Double)">
            <summary>
              Sets the arrow head half width. 
            </summary>
            <param name="width"> Sets the arrow head half width.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.GetArrowHeadHalfWidth">
            <summary>
              Returns the arrow head half width. 
            </summary>
            <returns> Returns the arrow head half width.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.SetArrowHeadLength(System.Double)">
            <summary>
              Sets the arrow head length. 
            </summary>
            <param name="length"> Sets the arrow head length.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.GetArrowHeadLength">
            <summary>
              Returns the arrow head length. 
            </summary>
            <returns> Returns the arrow head length.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.SetArrowScaleFactor(System.Double)">
            <summary>
              Sets the arrow scale factor. A value of 1.0 sets the length  of the arrow to 10 pixels
              assuming  other values are left at the defaults. 
              
            </summary>
            <param name="length"> Sets the arrow shaft half width.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Arrow.GetArrowScaleFactor">
            <summary>
              Returns the arrow scale factor. 
            </summary>
            <returns> Returns the arrow scale factor.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Arrow.ArrowShaftHalfWidth">
            <summary>
              Set/Get the arrow shaft half width. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Arrow.ArrowShaftLength">
            <summary>
              Set/Get the arrow shaft length. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Arrow.ArrowHeadHalfWidth">
            <summary>
              Sets the arrow head half width. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Arrow.ArrowHeadLength">
            <summary>
              Sets the arrow head length. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Arrow.ArrowScaleFactor">
            <summary>
              Sets the arrow scale factor. A value of 1.0 sets the length  of the arrow to 10 pixels
              assuming  other values are left at the defaults. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ArrowPlot">
            <summary>
              The ArrowPlot class displays a collection of arrows as defined by  the data in a group 
              dataset. The position,  size, and rotation of each arrow in the collection is independently 
              controlled.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.GroupPlot">
            <summary>
              The GroupPlot class is the abstract base class for the plot types that use  group (multiple y-values 
              for each x-value) data.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartPlot">
            <summary>
              The ChartPlot class extends the GraphObj class and is the abstract base class  
              for all plot chart objects in the QCChart2D class library.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.GraphObj">
            <summary>
              The Obj class is the abstract base class for all graphical chart objects in the QCChart2D class library.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.chartObjComponent">
            <summary>
             A reference to the ChartView component that the chart object is placed in
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.defaultChartObjScale">
            <summary>
             A reference to a default Scale scale used instead of null for the initial value of chartObjScale.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.chartObjScale">
            <summary>
             A reference to the Scale scale that the chart object uses for its coordinate system.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.chartObjEnable">
            <summary>
             Set to true to enable the processing of this chart object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.chartObjClipping">
            <summary>
             Set to clipping for this chart object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.moveableType">
            <summary>
             Specifies if this object is movable (true).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.updateFlag">
            <summary>
             Set to true if the object needs updating.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.positionType">
            <summary>
             Specifies what coordinate system is referenced in the currentLocation  position variable.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.location">
            <summary>
             Specifies the current position of the object, referencing the coordinate  system positionType.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.chartObjAttributes">
            <summary>
             Specifies the graph attributes (color, fill, line style, line thickness, etc)  of the object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.thePath">
            <summary>
             A general path variable used to hold the drawing path of the object. This  path is used to draw the object, 
             and for hit testing
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.boundingBox">
            <summary>
             An area variable holding the bounding box coordinates of the object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.intersectionTestDistance">
            <summary>
             If a test point is within this value of a plot trace, using device units,  is considered to intersect that 
             point
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.defaultChartFont">
            <summary>
             Specifies the default font used by all text objects that have not had  a font explicitly set.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.zOrder">
            <summary>
             Every object has a z-order value. Each z-order value does NOT have to  be unique. If z-order sorting is 
             turned on in the ChartView object,  objects are sorted by z-order before they are drawn.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.resizeMultiplier">
            <summary>
             Every object has absolute size parameters, such as font size or line thickness.  When a window is resized, 
             these absolute size parameters are NOT changed.  Instead, the value of the resizeMultiplier is adjusted to 
             represent the  change. In calculating the display font size and the display line thickness,  the size 
             properties are multiplied by the resizeMultiplier.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GraphObj.compositeGraphObj">
            <summary>
             Returns whether an GraphObj is a composite object (true) or a simple object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.#ctor">
            <summary>
              The default GraphObj constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.Copy(com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
              Copies the source object. 
            </summary>
            <param name="source"> The source object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.ErrorCheck(System.Int32)">
            <summary>
              Checks the current object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetLocation(System.Double,System.Double)">
            <summary>
             Sets the position of the chart object, using the coordinate system specified  by the property positionType. 
            </summary>
            <param name="x"> Specifies the x-coordinate of the object position. </param>
            <param name="y"> Specifies the y-coordinate of the object position.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetLocation(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             Sets the position of the chart object, using the coordinate system specified  by the property positionType. 
            </summary>
            <param name="xy"> Specifies the x- and y-coordinate of the object position.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetLocation">
            <summary>
             Returns the position of the chart object, using the coordinate system specified  by the property positionType. 
            </summary>
            <returns> Returns the position of the chart object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetLocation(com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
             Sets the position of the chart object, using the coordinate system specified  by the npositiontype parameter. 
            </summary>
            <param name="xy"> Specifies the x- and y-coordinate of the object position. </param>
            <param name="npositiontype"> Specifies the what coordinate system the x and y parameters  reference. 
            Use one of the position type  constants: DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS, NORM_PLOT_POS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetLocation(System.Double,System.Double,System.Int32)">
            <summary>
             Sets the position of the chart object, using the coordinate system specified  by the npositiontype parameter. 
            </summary>
            <param name="x"> Specifies the x-coordinate of the object position. </param>
            <param name="y"> Specifies the y-coordinate of the object position. </param>
            <param name="npositiontype"> Specifies the what coordinate system the x and y parameters  reference. 
            Use one of the position type  constants: DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS, NORM_PLOT_POS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetLocation(System.Int32)">
            <summary>
             Returns the position of the chart object, converting the position to the coordinate system specified  
             by the npositiontype parameter. 
            </summary>
            <param name="npositiontype"> Specifies what coordinate system the position needs to  converted to. 
            Use one of the position type  constants: DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS, NORM_PLOT_POS. </param>
            <returns> Returns the position of the chart object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetLocation(com.quinncurtis.chart2dnet.ChartCalendar,System.Double)">
            <summary>
             Sets the position of the chart object, using the coordinate system specified  by the property positionType. 
            </summary>
            <param name="xdate"> Specifies the x-coordinate of the object position. </param>
            <param name="y"> Specifies the y-coordinate of the object position.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetLocation(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Returns the position of the chart object, using the coordinate system specified  by the property positionType. 
            </summary>
            <param name="xdate"> Returns the x-position as a ChartCalendar object. </param>
            <returns> Returns the y-position of the chart object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.MoveRel(System.Double,System.Double)">
            <summary>
             Move the object relative to its current position, using the coordinate system specified  by the 
             property positionType. 
            </summary>
            <param name="dx"> Specifies relative move of the x-coordinate of the object position. </param>
            <param name="dy"> Specifies the relative move of the y-coordinate of the object position.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetPositionType">
            <summary>
             Returns the current position type. 
            </summary>
            <returns> Returns the current position type. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.GraphObj.SetPositionType(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetPositionType(System.Int32)">
            <summary>
             Sets the current position type. 
            </summary>
            <param name="posmode"> Sets the current position type. Use one of the position type  constants: 
            DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS, NORM_PLOT_POS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetMoveableType">
            <summary>
             Returns how the object can be moved: whether it can be moved as a single object (OBJECT_MOVEABLE) 
             or whether individual data points can be moved (DATA_MOVEABLE). 
            </summary>
            <returns> Returns one of the move type constants: NOT_MOVEABLE, OBJECT_MOVEABLE, DATA_MOVEABLE. 
            The NOT_MOVEABLE move type is self evident. The OBJECT_MOVEABLE move type means the object as a 
            whole can be moved. Examples of OBJECT_MOVEABLE objects are text objects (ChartText) and axis 
            objects (Axis). The DATA_MOVEABLE move type means individual data points within the object 
            can be moved independently. Examples of DATA_MOVEABLE object are line plots (SimpleLinePlot), 
            bar plots (SimpleBarPlot) and scatter plots (SimpleScatterPlot).</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetChartObjComponent(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
             Sets the reference to the ChartView component that the chart object is placed in 
            </summary>
            <param name="component"> A reference to the ChartView component that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetChartObjComponent">
            <summary>
             Returns a reference to the ChartView component that the chart object is placed in 
            </summary>
            <returns> Returns a reference to the ChartView component that the chart object is placed in</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetChartObjScale(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             Sets the reference to the PhysicalCoordinates object that the chart object is placed in 
            </summary>
            <param name="transform"> A reference to the PhysicalCoordinates object that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetChartObjScale">
            <summary>
             Returns a reference to the PhysicalCoordinates scale object that the chart object is placed in 
            </summary>
            <returns> Returns a reference to the PhysicalCoordinates component that the chart object is placed in.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetChartObjEnable(System.Int32)">
            <summary>
             Enables the chart object. A chart object is drawn only if it is enabled.  A chart object is enabled by default. 
            </summary>
            <param name="benable"> Use one of the chart object enable constants: OBJECT_DISABLE, OBJECT_ENABLE, 
            OBJECT_ENABLE_NODRAW. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetChartObjEnable">
            <summary>
             Returns true if the chart object is enabled. 
            </summary>
            <returns> Returns true if the chart object is enabled.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetChartObjClipping(System.Int32)">
            <summary>
             Sets the object clipping mode. Use one of the object clipping  constants: NO_CLIPPING, 
             GRAPH_AREA_CLIPPING, PLOT_AREA_CLIPPING,  or INHERIT_CLIPPING. 
            </summary>
            <param name="clipping"> Sets the object clipping mode.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetChartObjClipping">
            <summary>
             Returns the object clipping mode. 
            </summary>
            <returns> Returns the object clipping mode. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.GraphObj.SetChartObjClipping(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetUpdateFlag(System.Boolean)">
            <summary>
             Set to true if the object needs to be updated before rendering. For  future use. 
            </summary>
            <param name="bupdate"> True signifies that the object needs to be updated before rendering.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetUpdateFlag">
            <summary>
             Returns true if the object needs to be updated before rendering. Not  implemented, for future use. 
            </summary>
            <returns> Returns true if the object needs to be updated before rendering.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetColor(System.Drawing.Color)">
            <summary>
             Sets the primary line color for the chart object. 
            </summary>
            <param name="rgbcolor"> Sets the primary line color for the chart object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetColor">
            <summary>
             Returns the primary line color for the chart object. 
            </summary>
            <returns> Returns the primary line color for the chart object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetLineWidth(System.Double)">
            <summary>
             Sets the line width for the chart object. 
            </summary>
            <param name="linewidth"> Sets the line width, in window device coordinates, for the chart object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetLineWidth">
            <summary>
             Returns the line width for the chart object. 
            </summary>
            <returns> Returns the line width, in window device coordinates, for the chart object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetLineStyle(System.Drawing.Drawing2D.DashStyle)">
            <summary>
             Sets the line style for the chart object. 
            </summary>
            <param name="linestyle"> Sets the line style for the chart object. 
            Use one of the DashStyle line enumerated line styles. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetLineStyle">
            <summary>
             Returns the line style for the chart object. 
            </summary>
            <returns> Returns the line style for the chart object. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.GraphObj.SetLineStyle(System.Drawing.Drawing2D.DashStyle)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetChartObjAttributes(com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
             Sets the attributes for a chart object using an ChartAttribute object. 
            </summary>
            <param name="attr"> Sets the attributes for a chart object using an ChartAttribute object. </param>
            <see cref="T:com.quinncurtis.chart2dnet.ChartAttribute"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetZOrder(System.Int32)">
            <summary>
             Sets the z-order of the object in the chart.  Every object has a z-order value. Each z-order 
             value does NOT have to  be unique. If z-order sorting is turned on in the ChartView object,  
             objects are sorted by z-order before they are drawn. 
            </summary>
            <param name="zorder"> Sets the z-order of the object in the chart.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetZOrder">
            <summary>
             Returns the z-order value of the chart object. 
            </summary>
            <returns> Returns the z-order value of the chart object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetChartObjAttributes">
            <summary>
             Returns a copy of the attributes for a chart object. 
            </summary>
            <returns> Returns a copy of the attributes for a chart object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetDefaultChartFont(System.Drawing.Font)">
            <summary>
             Sets the default font used by all text objects that have not had  a font explicitly set. 
             This is a static object and becomes the default  font for all GraphObj classes. 
            </summary>
            <param name="tfont"> A reference to the desired font.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetDefaultChartFont">
            <summary>
             Returns a reference to the default font. 
            </summary>
            <returns> Returns a reference to the default font.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetBoundingBox">
            <summary>
             Returns the bounding box for the chart object. Not all chart objects  have bounding boxes. 
             Be sure and check for null. 
            </summary>
            <returns> Returns the bound box for the chart object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.Draw(System.Drawing.Graphics)">
            <summary>
              The abstract draw method for this class. Subclasses should override  this function and draw the object. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetIntersectionTestDistance(System.Double)">
            <summary>
            Sets the value of the intersectionTestDistance property. If a test  point specified using the 
            CheckIntersection method is within this  value of plot object trace, it is considered to intersect the object. 
            </summary>
            <param name="intersectiontestdistance"> Sets the value of the intersectionTestDistance property.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetIntersectionTestDistance">
            <summary>
              Returns the value of the intersectionTestDistance property. 
            </summary>
            <returns> Returns the value of the intersectionTestDistance property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.DefaultCheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The default CheckIntersection method. It test to see if the test point  is within the 
              intersectionTestDistance of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The default CheckIntersection method. It test to see if the test point  is within the 
              intersectionTestDistance of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.SetResizeMultiplier(System.Double)">
            <summary>
             Sets the resize multiplier of the object.  Every object has absolute size parameters, 
             such as font size or line thickness.  When a window is resized, these absolute size parameters 
             are NOT changed.  Instead, the value of the resizeMultiplier is adjusted to represent the  change. 
             In calculating the display font size and the display line thickness,  the size properties are 
             multiplied by the resizeMultiplier.  In general, this method is called in the ChartView class in 
             response to  window resize messages and should not be called elsewhere. 
            </summary>
            <param name="multiplier"> Sets the value of the resize multiplier.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.GetResizeMultiplier">
            <summary>
             Returns the resize multiplier of the object. 
            </summary>
            <returns> Returns the value of the resize multiplier.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.PrePlot(System.Drawing.Graphics)">
            <summary>
             This method a general setup method called before  the graph object is drawn. It creates a new 
             GraphicsPath  for the object, sets the current scale, sets clipping  appropriate to the object, 
             and casts the Graphics context  to a Graphics context. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <returns> The graphics context cast to a Graphics object. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GraphObj.AddInternalObjects">
            <summary>
             This virtual method is called in the ChartView class and triggers combination objects to 
             create all internal ChartObj objects.
             </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.PositionType">
            <summary>
             Get/Sets the current position type. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.MoveableType">
            <summary>
             Returns how the object can be moved. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.ChartObjComponent">
            <summary>
             Sets the reference to the ChartView component that the chart object is placed in 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.ChartObjScale">
            <summary>
             Sets the reference to the PhysicalCoordinates object that the chart object is placed in 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.ChartObjEnable">
            <summary>
             Enables/Disables the chart object. A chart object is drawn only if it is enabled.  A chart object 
             is enabled by default. 
             Use one of the chart object enable constants: OBJECT_DISABLE, OBJECT_ENABLE, OBJECT_ENABLE_NODRAW.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.ChartObjClipping">
            <summary>
             Sets the object clipping mode. Use one of the object clipping  constants: NO_CLIPPING, 
             GRAPH_AREA_CLIPPING, PLOT_AREA_CLIPPING,  or INHERIT_CLIPPING. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.LineColor">
            <summary>
             Sets the  line color for the chart object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.FillColor">
            <summary>
             Sets the fill color for the chart object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.LineWidth">
            <summary>
             Sets the line width for the chart object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.LineStyle">
            <summary>
             Sets the line style for the chart object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.ZOrder">
            <summary>
             Sets the z-order of the object in the chart.  Every object has a z-order value. Each z-order value does 
             NOT have to  be unique. If z-order sorting is turned on in the ChartView object,  objects are sorted 
             by z-order before they are drawn. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.ChartObjAttributes">
            <summary>
             Sets the attributes for a chart object using an ChartAttribute object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.BoundingBoxRect">
            <summary>
             Returns the bounding box for the chart object. Not all chart objects  have bounding boxes. 
             Be sure and check for null. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.BoundingBox">
            <summary>
             Returns the bounding box for the chart object. Not all chart objects  have bounding boxes. 
             Be sure and check for null. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.CompositeGraphObj">
            <summary>
             Returns whether an GraphObj is a composite object (true) or a simple object;
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.ThePath">
            <summary>
             A general path variable used to hold the drawing path of the object. This  path is used to draw the object, 
             and for hit testing
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.ResizeMultiplier">
            <summary>
             Every object has absolute size parameters, such as font size or line thickness.  When a window is resized, 
             these absolute size parameters are NOT changed.  Instead, the value of the resizeMultiplier is adjusted to 
             represent the  change. In calculating the display font size and the display line thickness,  the size 
             properties are multiplied by the resizeMultiplier.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GraphObj.DefaultChartFont">
            <summary>
             Specifies the default font used by all text objects that have not had  a font explicitly set.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.fillBaseValue">
            <summary>
             The base value, in physical coordinates, of solid (bars and filled areas) plot objects.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.barWidth">
            <summary>
             The width of bars in bar graph plot objects.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.barOrient">
            <summary>
             The orientation (HORIZ_DIR or VERT_DIR) of bars in bar graph plot objects. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.coordinateSwap">
            <summary>	
             Set to true for situations where the x and y-coordinates of a dataset are swapped for plotting purposes,
               usually as a change in the barOrient parameter for some plots.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.barJust">
            <summary>
             The justification of bars in bar graph plot objects. Use one of the bar justification 
             constants: JUSTIFY_MIN, JUSTIFY_CENTER, or JUSTIFY_MAX.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.numSegments">
            <summary>
             This field specifies how many segments in require a unique ChartAttribute object,  
             stored in the segmentAttributesArrayList field. For simple plot objects (line plots, bar plots,  
             and scatter plots it should be set equal to the number of data points, if the segment  
             color mode is used. For group plots it should be set to the number of groups.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.segmentColorMode">
            <summary>
             Set this flag true and each data segment in a simple plot is set to the attribute of the  
             corresponding ChartAttribute object in the segmentAttributesArrayList vector.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.segmentAttributesArrayList">
            <summary>
             This vector holds a list of ChartAttribute objects, one for each segment,  that are used 
             when segment attributes are used in group plots and simple plots.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.showDatapointValue">
            <summary>
             If the plot supports it, this property will turn on the display of  data values next to the 
             associated data point.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.plotLabelTemplate">
            <summary>
             If the plot supports it, this NumericLabel object is used as a  template to size, color and 
             format the data point numeric values.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.barDatapointLabelPosition">
            <summary>
             Bar plots that support the display of data point values have the option of  displaying the 
             data points numeric values above the bar, below the bar,  or centered in the bar. Use one of 
             the data point label position  constants: INSIDE_BAR, OUTSIDE_BAR, or CENTERED_BAR.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.stepMode">
            <summary>
             Lines plots that support this option draw the line connecting two data points  using the 
             mode specified by this parameter. Use one of the line plot  step constants: NO_STEP, STEP_START, 
             STEP_END, or STEP_NO_RISE_LINE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPlot.fastClipMode">
            <summary>
             ChartPlot types that support this option increase clipping speed by terminating  the plot 
             drawing rout1ine by not drawing line segments when the x-value is  less than the coordinate 
             system minimum x-value, and terminating the drawing  rout1ine when the x-values are greater 
             than the coordinate system maximum x-value.  No plot type currently support this option
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.InitDefaults">
            <summary>
              Initializes default values for the plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the plot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.Copy(com.quinncurtis.chart2dnet.ChartPlot)">
            <summary>
              Copies the source plot object. 
            </summary>
            <param name="source"> The source plot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.#ctor">
            <summary>
              The default ChartPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SegmentAttributesSet(System.Int32)">
            <summary>
             Sets the graphics attributes for the current graphics context to the attributes associated  
             with a specific ChartAttribute object in the segmentAttributesArrayList vector. 
            </summary>
            <param name="index"> The index of the ChartAttribute object in the segmentAttributesArrayList vector.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SegmentSymbolAttributesSet(System.Int32,com.quinncurtis.chart2dnet.ChartSymbol)">
            <summary>
             Sets the graphics attributes for a symbol to the attributes associated  with a specific 
             ChartAttribute object in the segmentAttributesArrayList vector. 
            </summary>
            <param name="index"> The index of the ChartAttribute object in the segmentAttributesArrayList vector.</param>
            <param name="chartsymbol"> The symbol that has its attributes set.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.CreateLineFillArrays(System.Double[],System.Double[],System.Double[],System.Double[],System.Boolean[],System.Int32,System.Int32)">
            <summary>
              This method creates a closed polygon that can be filled. It is  used by the filled line plot 
              objects to fill underneath the line. 
            </summary>
            <param name="xdest"> Returns an array of x-coordinates for the closed polygon. </param>
            <param name="ydest"> Returns an array of y-coordinates for the closed polygon. </param>
            <param name="xsource"> The source array for the x-coordinates. </param>
            <param name="ysource"> The source array for the y-coordinates. </param>
            <param name="valid"> The valid array for the line plot object. </param>
            <param name="numpoints"> The number of points in the xsource and ysource arrays. </param>
            <param name="norient"> The orientation of the fill. The fill polygon is created  using the 
            fillBaseValue property as either the base of the filled polygon  for the y-dimension (VERT_DIR) or 
            the x-dimension (HORIZ_DIR).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.InitSegmentAttributes(com.quinncurtis.chart2dnet.ChartAttribute[],System.Int32)">
            <summary>
             Sets the size of the segmentAttributesArrayList vector and initializes it  with the specified 
             ChartAttribute objects. 
            </summary>
            <param name="attribs"> An array of ChartAttribute objects, size nnumsegments. </param>
            <param name="nnumsegments"> The number of segments. For group plot objects this should  be set 
            to the number of groups. For simple plot objects using the segment color  mode this should be set to the number 
            of data points.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.InitSegmentAttributes(com.quinncurtis.chart2dnet.ChartAttribute[],com.quinncurtis.chart2dnet.GroupDataset)">
            <summary>
             Sets the size of the segmentAttributesArrayList vector and initializes it  with the 
             specified ChartAttribute objects. 
            </summary>
            <param name="attribs"> An array of ChartAttribute objects, size nnumsegments. </param>
            <param name="dataset"> The dataset for the group plot </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.InitSegmentAttributes(com.quinncurtis.chart2dnet.ChartAttribute,com.quinncurtis.chart2dnet.GroupDataset)">
            <summary>
             Sets the size of the segmentAttributesArrayList vector and initializes it  with the 
             specified ChartAttribute object. 
            </summary>
            <param name="attribs"> A ChartAttribute object. </param>
            <param name="dataset"> The dataset for the group plot</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.InitSegmentAttributes(com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
             Sets all attribute objects in the segmentAttributesArrayList vector to a  copy of the 
             specified ChartAttribute object. The segmentAttrib vector is  initialized to the number of data points, 
             theDataset.GetNumberDatapoints(), in the dataset. 
            </summary>
            <param name="attrib"> All ChartAttribute objects in the segmentAttrib vector are set  equal to a 
            copy of this attribute.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.InitSegmentAttributes">
            <summary>
             Sets all attribute objects in the segmentAttributesArrayList vector to a  copy of the current 
             object attributes. The segmentAttrib vector is  initialized to the number of data points, 
             theDataset.GetNumberDatapoints(), in the dataset.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.InitSegmentAttributes(com.quinncurtis.chart2dnet.ChartAttribute,System.Int32)">
            <summary>
             Sets all attribute objects in the segmentAttributesArrayList vector to a  copy of the specified 
             ChartAttribute object. 
            </summary>
            <param name="attrib"> All ChartAttribute objects in the segmentAttrib vector are set  equal to a 
            copy of this attribute. </param>
            <param name="nnumsegments"> The number of segments. For group plot objects this should  be set to 
            the number of groups. For simple plot objects using the segment color  mode this should be set 
            to the number of data points.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.ResizeSegmentAttributes(System.Int32)">
            <summary>
             This method resizes the segment attributes vector, usually in response to  in a change in the 
             underlying group dataset. If the new number of segments  is less than or equal to the old number, 
             the old attributes for the original segments  are copied to the new. Otherwise new, ChartAttribute 
             objects are  created for any new segments. 
            </summary>
            <param name="numsegments"> The number of segments. For group plot objects this should  be set to
             the number of groups in the new dataset.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetSegmentAttributes(System.Int32)">
            <summary>
             This method returns a reference to the segment attribute object at the  index nsegment. 
            </summary>
            <param name="nsegment"> The index in the segmentAttributesArrayList vector of the attribute  object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetSegmentAttributes(System.Int32,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
             Sets the attribute object at the index nsegment to a copy of  the specified ChartAttribute object. 
            </summary>
            <param name="nsegment"> The index in the segmentAttributesArrayList vector of the attribute  object. </param>
            <param name="attrib"> The ChartAttribute object at the index nsegment is set to  a copy of this object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetSegmentFillColor(System.Int32,System.Drawing.Color)">
            <summary>
             Sets the fill color of the attribute object at the  index nsegment. 
            </summary>
            <param name="nsegment"> The index in the segmentAttributesArrayList vector of the attribute  object. </param>
            <param name="rgbcolor"> The fill color of the ChartAttribute object at the index  nsegment is set to this value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetSegmentLineColor(System.Int32,System.Drawing.Color)">
            <summary>
             Sets the line color of the attribute object at the  index nsegment. 
            </summary>
            <param name="nsegment"> The index in the segmentAttributesArrayList vector of the attribute  object. </param>
            <param name="rgbcolor"> The line color of the ChartAttribute object at the index  nsegment is set to this value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetSegmentColor(System.Int32,System.Drawing.Color)">
            <summary>
             Sets the line and fill color of the attribute object at the  index nsegment. 
            </summary>
            <param name="nsegment"> The index in the segmentAttributesArrayList vector of the attribute  object. </param>
            <param name="rgbcolor"> The line and fill color of the ChartAttribute object at the index  nsegment is 
            set to this value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.FreeSegmentColors">
            <summary>
             This method frees the memory associated with the segmentAttributesArrayList vector  and turns the 
             segment color mode off.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetSegmentAttributesMode(System.Boolean)">
            <summary>
             This method turns the segment attribute mode on and off. 
            </summary>
            <param name="bmode"> True turns the segment attributes on, false turns it off.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetSegmentAttributesMode">
            <summary>
             This method returns the state of the segment attribute mode. 
            </summary>
            <returns> Returns true if the segment attribute mode is on.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.DrawBarDatapointValue(System.Drawing.Graphics,System.Double,System.Double,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             This method draws a bar data point value, based on the bar position  and orientation. 
            </summary>
            <param name="g2"> Specifies the graphics context. </param>
            <param name="x"> The x-value of the datapoint represented by the bar. </param>
            <param name="y"> The y-value of the datapoint represented by the bar </param>
            <param name="barrect"> The rectangle of the bar.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.DrawSimpleDatapointValue(System.Drawing.Graphics,System.Double,System.Double,System.Double)">
            <summary>
             This method draws a data point value, based on the point position. 
            </summary>
            <param name="g2"> Specifies the graphics context. </param>
            <param name="x"> The x-value of the datapoint represented by the bar. </param>
            <param name="y"> The y-value of the datapoint represented by the bar </param>
            <param name="displayvalue1"> The numeric value that is displayed next to the data point.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.CheckValidPoint(System.Double,System.Double,System.Boolean)">
            <summary>
             This method checks to see if the current data point is valid 
            </summary>
            <param name="x"> The x-value of the data point. </param>
            <param name="y"> The y-value of the data point. </param>
            <param name="valid"> The valid data flag of the data point. </param>
            <returns> Returns true if the data point is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point is near one of the data points. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Returns nearest point data for assoicated test. </param>///
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.PrePlot(System.Drawing.Graphics)">
            <summary>
             The prePlot method is called prior to the actual drawing of a plot object.  It creates a new general path 
             object for drawing into, sets  the current coordinate system to the axis coordinate system,  sets the 
             clipping for the plot object, and casts the Graphics object  to a Graphics object. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <returns> Returns the input Graphics object g cast to a Graphics object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.CalcNearestPoint(com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              An abstract method that must compare a test point against all of the xy points  in a dataset and 
              calculates which point in the dataset  is nearest the test point. The nearness test has many  
              different forms:  Nearness Mode Constant Description  FNP_X nearest x  FNP_Y nearest y  FNP_DIST 
              shortest distance  FNP_NORMX nearest normalized x  FNP_NORMY nearest normalized y  FNP_NORMDIST 
              shortest normalized distance 
            </summary>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the xy values of the dataset point nearest the test point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetDataset">
            <summary>
             An abstract method that must returns a reference to the current dataset. 
            </summary>
            <returns> Returns a reference to the current dataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetBarOrient(System.Int32)">
            <summary>
              Sets the orientation for bar plots. 
            </summary>
            <param name="barorient"> Sets the orientation for bar graphs. Use one of the orientation constants:  
            HORIZ_DIR or VERT_DIR.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetBarOrient">
            <summary>
              Returns the orientation for bar plots. 
            </summary>
            <returns> Returns the orientation for bar graphs. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetBarOrient(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetBarWidth(System.Double)">
            <summary>
              Sets the width of bars, in physical coordinates, for bar plots. 
            </summary>
            <param name="rwidth"> Sets the width of bars, in physical coordinates, for bar plots.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetBarWidth">
            <summary>
              Returns the width of bars, in physical coordinates, for bar plots. 
            </summary>
            <returns> Returns the width of bars, in physical coordinates, for bar plots.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetFillBaseValue(System.Double)">
            <summary>
              Sets the base value, in physical coordinates, of solid (bars and filled areas) plot objects. 
            </summary>
            <param name="rbase"> Sets the base value, in physical coordinates, of solid (bars and filled areas)  
            plot objects.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetFillBaseValue">
            <summary>
              Returns the base value, in physical coordinates, of solid (bars and filled areas) plot objects. 
            </summary>
            <returns> Returns the base value, in physical coordinates, of solid (bars and filled areas) 
            plot objects.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetBarJust(System.Int32)">
            <summary>
              Sets the justification of bars in bar graph plot objects. 
            </summary>
            <param name="barjust"> Sets justification of bars in bar graph plot objects. Use  one of the 
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER,JUSTIFY_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetBarJust">
            <summary>
              Returns the justification of bars in bar graph plot objects. 
            </summary>
            <returns> Returns the justification of bars in bar graph plot objects. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetBarJust(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetPlotLabelTemplate(com.quinncurtis.chart2dnet.NumericLabel)">
            <summary>
             Sets the plot objects data point template.  If the plot supports it, this NumericLabel object is 
             used as a  template to size, color and format the data point numeric values. 
            </summary>
            <param name="numlabel"> An instance of an NumericLabel object that has been  initialized so that 
            the font, font size, color and numeric format  represent a template for the display of data point 
            numeric values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetPlotLabelTemplate">
            <summary>
             Returns the plot objects data point template. 
            </summary>
            <returns> Returns an instance of an NumericLabel object that has been  initialized so that the 
            font, font size, color and numeric format  represent a template for the display of data point 
            numeric values. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetPlotLabelTemplate(com.quinncurtis.chart2dnet.NumericLabel)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetShowDatapointValue(System.Boolean)">
            <summary>
             If the plot supports it, this method will turn on the display of  data values next to the 
             associated data point. 
            </summary>
            <param name="show"> Set to true to turn on the display of data point values. </param>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetPlotLabelTemplate(com.quinncurtis.chart2dnet.NumericLabel)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetShowDatapointValue">
            <summary>
             Returns true if the showDatapointValue flag is set true. 
            </summary>
            <returns> Returns true if the showDatapointValue flag is set true. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetShowDatapointValue(System.Boolean)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetBarDatapointLabelPosition(System.Int32)">
            <summary>
              Bar plots that support the display of data point values have the option of  displaying the 
              data points numeric values above the bar, below the bar,  or centered in the bar. Use one of 
              the data point label position  constants: INSIDE_BAR, OUTSIDE_BAR, or CENTERED_BAR. 
            </summary>
            <param name="pos"> Sets the bar data point label position.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetBarDatapointLabelPosition">
            <summary>
              Returns the bar data point label position. 
            </summary>
            <returns> Returns the bar data point label position. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetBarDatapointLabelPosition(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetLabelTemplateDecimalPos">
            <summary>
              Returns number of digits to the right of the decimal point in the plotLabelTemplate property. 
            </summary>
            <returns> Returns number of digits to the right of the decimal point in the plotLabelTemplate property. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetLabelTemplateDecimalPos(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetLabelTemplateDecimalPos(System.Int32)">
            <summary>
              Sets number of digits to the right of the decimal point in the plotLabelTemplate property. 
            </summary>
            <param name="ndecplace"> Sets number of digits to the right of the decimal point in the 
            plotLabelTemplate property.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetLabelTemplateNumericFormat">
            <summary>
              Returns the numeric format of the plotLabelTemplate property. 
            </summary>
            <returns> Returns the numeric format of the plotLabelTemplate property. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetPlotLabelTemplate(com.quinncurtis.chart2dnet.NumericLabel)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetLabelTemplateNumericFormat(System.Int32)">
            <summary>
              Sets the numeric format of the plotLabelTemplate property. 
            </summary>
            <param name="nformat"> Sets the numeric format of the plotLabelTemplate property. </param>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetPlotLabelTemplate(com.quinncurtis.chart2dnet.NumericLabel)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetStepMode">
            <summary>
             Returns the plot objects step mode. 
            </summary>
            <returns> Returns the plot objects step mode. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetStepMode(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetStepMode(System.Int32)">
            <summary>
             Sets the plot objects step mode. 
            </summary>
            <param name="stepmode"> Sets the plot objects step mode.  Use one of the line plot  
            step constants: NO_STEP, STEP_START, STEP_END, or STEP_NO_RISE_LINE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetCoordinateSwap">
            <summary>
             Returns the plot objects coordinate swap mode. 
            </summary>
            <returns> Returns the plot objects coordinate swap mode. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetStepMode(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetCoordinateSwap(System.Boolean)">
            <summary>
             Sets the plot objects coordinate swap mode. Not to be called 
            </summary>
            <param name="swap"> Sets the plot objects coordinate swap mode.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.GetFastClipMode">
            <summary>
             Returns the plot objects fast clip mode. 
            </summary>
            <returns> Returns the plot objects fast clip mode. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPlot.SetFastClipMode(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPlot.SetFastClipMode(System.Int32)">
            <summary>
             Sets the plot objects fast clip mode. If there is no fast clipping, all data values  in a 
             dataset are plotting in the plot object classes. Data outside of the current  plotting does 
             not appear because it is clipped by the Java API routines.  If the FASTCLIP_X or FAST_CLIPY mode 
             is used, data is analyzed before it is plotted and  data points outside of the current plotting 
             window are discarded.  This can speed things up because if a dataset has 1,000,000  data points, 
             and only 100 are in the plotting area, only 100 points are actually plotted using  the Java line 
             drawing routines. This is most useful in zooming applications where the  user zooms from a very 
             large number of data points to a very small number.  In order for fast clipping to work, the data 
             must be monotonic (always increasing) in the  direction of the fast clipping. Sampled data, where 
             the x-axis is time, is an example  of monotonic data, where the time values always increase with 
             each succeeding sample,  never backtracking. 
            </summary>
            <param name="fastclip"> Sets the plot objects step mode.  Use one of the fast clip plot constants: 
            NO_FASTCLIP, FASTCLIP_X, FASTCLIP_Y.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.BarOrient">
            <summary>
             Set/Get the orientation (HORIZ_DIR or VERT_DIR) of bars in bar graph plot objects. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.BarWidth">
            <summary>
              Set/Get the width of bars, in physical coordinates, for bar plots. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.FillBaseValue">
            <summary>
              Set/Get the base value, in physical coordinates, of solid (bars and filled areas) plot objects. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.BarJust">
            <summary>
              Set/Get the justification of bars in bar graph plot objects. Use one of the bar justification 
              constants: JUSTIFY_MIN, JUSTIFY_CENTER, or JUSTIFY_MAX.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.PlotLabelTemplate">
            <summary>
             Set/Get the plot objects data point template.  If the plot supports it, this NumericLabel 
             object is used as a  template to size, color and format the data point numeric values. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.ShowDatapointValue">
            <summary>
             If the plot supports it, this method will turn on/off the display of  data values next to the 
             associated data point. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.BarDatapointLabelPosition">
            <summary>
              Bar plots that support the display of data point values have the option of  displaying the 
              data points numeric values above the bar, below the bar,  or centered in the bar. Use one of 
              the data point label position  constants: INSIDE_BAR, OUTSIDE_BAR, or CENTERED_BAR. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.LabelTemplateDecimalPos">
            <summary>
              Set/Get number of digits to the right of the decimal point in the plotLabelTemplate property. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.LabelTemplateNumericFormat">
            <summary>
              Set/Get the numeric format of the plotLabelTemplate property. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.StepMode">
            <summary>
             Set/Get the plot objects step mode. Use one of the line plot  step constants: NO_STEP, STEP_START, 
             STEP_END, or STEP_NO_RISE_LINE.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPlot.FastClipMode">
            <summary>
             Set/Get the plot objects fast clip mode. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GroupPlot.groupDataset">
            <summary>
             This field holds a reference to the data represented by this plot object. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GroupPlot.displayDataset">
            <summary>
             This field holds a reference to the fast clip, truncated version, data represented by this plot object. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GroupPlot.fastClipOffset">
            <summary>
             This field the starting offset of the displayDataset, with respect to the original dataset. This value is
             used by the get nearest point methods.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GroupPlot.stackMode">
            <summary>
             The stack mode (TRUE for stacked bars and lines) for group bars.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.#ctor">
            <summary>
              The default GroupPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the current group plot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.InitDefaults">
            <summary>
              Initializes default values for the group plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.Copy(com.quinncurtis.chart2dnet.GroupPlot)">
            <summary>
              Copies the source group plot object. 
            </summary>
            <param name="source"> The source group plot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.CalcGroupYSumArray(com.quinncurtis.chart2dnet.DoubleArray,com.quinncurtis.chart2dnet.DoubleArray2D,com.quinncurtis.chart2dnet.BoolArray)">
            <summary>
              Calculates and returns a 2D array of y-values, that differ from the source  group dataset in that for 
              each group, the y-values represent the sum of the  current and previous y-values. This is a utility 
              rout1ine used by the  StackedLinePlot class. 
            </summary>
            <param name="xvalues"> An array, that specifies the x-values of a group dataset. </param>
            <param name="yvalues"> An array that specifies the y-values of a group dataset. </param>
            <param name="valid"> An array that specifies the valid array of the group dataset. </param>
            <returns> Returns a 2D array of y-values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.GetStackMode">
            <summary>
              Specifies whether the current group plot is of the cumulative, stacked type.  Stacked bar plots and stacked 
              line plots are the two group plot types that  return true. 
            </summary>
            <returns> Returns true if the current group plot type is either a stacked bar  plot or a stacked line plot.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.SetGroupDataset(com.quinncurtis.chart2dnet.GroupDataset)">
            <summary>
             Replaces the current GroupDataset object with a new one. 
            </summary>
            <param name="dataset"> Specifies the new GroupDataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.GetGroupDataset">
            <summary>
             Returns a reference to the current GroupDataset. 
            </summary>
            <returns> Returns a reference to the current GroupDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.SetDataset(com.quinncurtis.chart2dnet.GroupDataset)">
            <summary>
             Replaces the current GroupDataset object with a new one. 
            </summary>
            <param name="dataset"> Specifies the new GroupDataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.GetDataset">
            <summary>
             Returns a reference to the current GroupDataset. 
            </summary>
            <returns> Returns a reference to the current GroupDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPlot.CalcNearestPoint(com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against all of the xy points  in a simple dataset and calculates 
              which point in the dataset  is nearest the test point. The nearness test has many  different forms:  
              Nearness Mode Constant Description  FNP_X nearest x  FNP_Y nearest y  FNP_DIST shortest distance  
              FNP_NORMX nearest normalized x  FNP_NORMY nearest normalized y  FNP_NORMDIST shortest normalized distance 
            </summary>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GroupPlot.GroupDataset">
            <summary>
             Set/Get the current GroupDataset object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GroupPlot.DisplayDataset">
            <summary>
             Set/Get the current displayDataset object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GroupPlot.StackMode">
            <summary>
              Set/Get whether the current group plot is of the cumulative, stacked type.  Stacked bar plots and stacked 
              line plots are the two group plot types that  return true. 
            </summary>
            <returns> Returns true if the current group plot type is either a stacked bar  plot or a stacked line plot.</returns>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ArrowPlot.baseArrow">
            <summary>
             The Arrow object used to draw the arrows. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.#ctor">
            <summary>
              The default ArrowPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the ArrowPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.InitDefaults">
            <summary>
              Initializes default values for the ArrowPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.Copy(com.quinncurtis.chart2dnet.ArrowPlot)">
            <summary>
              Copies the source ArrowPlot object. 
            </summary>
            <param name="source"> The source ArrowPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.Clone">
            <summary>
             Returns an object that is a clone of this ArrowPlot object. 
            </summary>
            <returns> Returns a clone of this ArrowPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new ArrowPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new ArrowPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,com.quinncurtis.chart2dnet.Arrow,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new ArrowPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new ArrowPlot object. </param>
            <param name="dataset"> The group dataset sets the position, size and rotation of  individual 
                         arrows. The data in the dataset is organized in the following  manner:  X x-position 
                         of the arrow point.  Y[0] y-position of the arrow point.  Y[1] Size of the arrow. 
                         A size of 1.0 creates an arrow with a length  of 10 pixels
                         Y[2] The rotation of the arrow, using the point of the arrow as the  
                         rotation origin, in degrees. </param>
            <param name="basearrow"> An instance of an Arrow object used to draw the  arrows in this ArrowPlot object. </param>
            <param name="attrib"> Sets the color, line and fill characteristics for the arrows  in this ArrowPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.InitArrowPlot(com.quinncurtis.chart2dnet.GroupDataset,com.quinncurtis.chart2dnet.Arrow,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor initializes the dataset, base arrow  object and attributes of this ArrowPlot object. 
            </summary>
            <param name="dataset"> The group dataset sets the position, size and rotation of  individual arrows. 
                        The data in the dataset is organized in the following  manner:  X x-position of the arrow point.  
                        Y[0] y-position of the arrow point.  Y[1] Size of the arrow. A size of one creates an arrow 
                        with a length of 10 pixels.  Y[2] The rotation of the arrow, 
                        using the point of the arrow as the  rotation origin, in degrees. </param>
            <param name="basearrow"> An instance of an Arrow object used to draw the  arrows in this ArrowPlot object. </param>
            <param name="attrib"> Sets the color, line and fill characteristics for the arrows  in this ArrowPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.CalcArrowShape(com.quinncurtis.chart2dnet.Arrow,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              This method converts returns an ChartShape object which represents  an arrow positioned, scaled and 
              rotated for the current coordinate system. 
            </summary>
            <param name="arrow"> The base Arrow object. </param>
            <param name="x"> The x-position of the point of the arrow. </param>
            <param name="y"> The y-position of the point of the arrow. </param>
            <param name="size"> The scale factor of the arrow. </param>
            <param name="angle"> The rotation angle, in degrees, of the arrow.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.DrawArrowPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws an arrow plot using the current arrow plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The arrow plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the ArrowPlot object  is drawn in 
              the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.SetBaseArrow(com.quinncurtis.chart2dnet.Arrow)">
            <summary>
              Sets (makes a copy) of the base arrow object used to draw the arrow. 
            </summary>
            <param name="basearrow"> Sets (makes a copy) of the base arrow object used to draw the arrow.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.GetBaseArrow">
            <summary>
              Returns a copy of the base arrow object used to draw the arrows. 
            </summary>
            <returns> Returns a copy of the base arrow object used to draw the arrows.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ArrowPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects one of the arrow objects. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.AutoScale">
            <summary>
              The AutoScale class is the abstract base class for the auto-scaling  classes used to scale the plotting area 
              of graphs, and used to set the minimum  and maximum values of the axes displayed in the graphs.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.finalMin">
            <summary>
             Holds the final, calculated Auto-scale minimum value.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.finalMax">
            <summary>
             Holds the final, calculated Auto-scale maximum value.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.labelsOrigin">
            <summary>
             Holds the calculated Auto-scale label and tick mark starting position.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.initialMin">
            <summary>
             Holds the original Auto-scale minimum value.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.initialMax">
            <summary>
             Holds the original Auto-scale maximum value.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.minValue">
            <summary>
             A temporary variable used in calculating the Auto-scale minimum value.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.maxValue">
            <summary>
             A temporary variable used in calculating the Auto-scale maximum value.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.axisType">
            <summary>
             Specifies the axis type.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.roundMode">
            <summary>
             Specifies the Auto-scale rounding value.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.axisMinorTicksPerMajor">
            <summary>
             Holds the calculated Auto-scale value for the number of minor ticks per major tick interval.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.majorNthTick">
            <summary>
             Holds the calculated axis nMajortNthTick value, labels every majorNthTick major tick mark, rather 
             than every major tick mark.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.axisLabelsDecimalPos">
            <summary>
             Holds the calculated Auto-scale value for the number of digits to the right of the
             decimal point to use for axis labels.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.theDataset">
            <summary>
             Holds a reference to a dataset used as the basis for a single dataset Auto-scale calculation.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.theDatasetsArray">
            <summary>
             Holds a reference to an array of datasets used as the basis for a multiple dataset Auto-scale calculation.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.numDatasets">
            <summary>
             Specifies the number of datasets (size of the theDatasetArray array) used in multiple dataset calculations.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.theChartCoordinates">
            <summary>
             A reference to a scale used as the basis for an Auto-scale calculation.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.zeroEndpointTestValue">
            <summary>
             The constant used to determine if two values are essentially the same.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.minRangeAdjust">
            <summary>
             An auto-scale fudge factor to be subtracted from the minimum value for the range.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AutoScale.maxRangeAdjust">
            <summary>
             An auto-scale fudge factor to be added to the maximum value for the range.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.InitDefaults">
            <summary>
              Initializes default values for the auto scale object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.#ctor">
            <summary>
              The default AutoScale constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.ErrorCheck(System.Int32)">
            <summary>
              Checks the current object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.Copy(com.quinncurtis.chart2dnet.AutoScale)">
            <summary>
              Copies the source AutoScale object. 
            </summary>
            <param name="source"> The source AutoScale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.SetChartAutoScale(com.quinncurtis.chart2dnet.ChartDataset,System.Int32,System.Int32)">
            <summary>
             Initialize an AutoScale object based on the data values in a dataset. 
            </summary>
            <param name="dataset"> The auto-scale values are calculated based on the minimum  and maximum values 
            derived from this dataset. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.SetChartAutoScale(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32,System.Int32)">
            <summary>
             Initialize an AutoScale object based on the data values in a a group of datasets. 
            </summary>
            <param name="datasets"> The auto-scale values are calculated based on the minimum  and maximum values 
            derived from this array of datasets. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.SetChartAutoScale(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Int32)">
            <summary>
             Initialize an AutoScale object based on the scaling values of  an PhysicalCoordinates object. 
            </summary>
            <param name="transform"> The auto-scale values are calculated based on the minimum  and maximum scaling 
            values of this PhysicalCoordinates object. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.SetChartAutoScale(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
             Initialize an AutoScale object the specific minimum and maximum values.  The final minimum and maximum 
             values do not necessarily match these initial values. 
            </summary>
            <param name="rmin"> The auto-scale values are calculated based on this minimum value. </param>
            <param name="rmax"> The auto-scale values are calculated based on this maximum value. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcChartAutoScaleDataset">
            <summary>
             Calculate new auto-scale values based on the values in the data set  referenced by the theDataset field.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcChartAutoScaleDatasets">
            <summary>
             Calculate new auto-scale values based on the values in the data sets  referenced by the 
             theDatasetsArray field.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcDatasetRange">
            <summary>
             Calculate the minimum and maximum values for the x- or y-coordinates  of the theDataset dataset.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcDatasetsRange">
            <summary>
             Calculate the minimum and maximum values for the x- or y-coordinates  of the theDatasetsArray datasets.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcChartAutoScaleTransform">
            <summary>
             Calculate new auto-scale values based on the values in the chart scale  referenced by the 
             theChartCoordinates field.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcChartAutoScaleInitialValues">
            <summary>
             Calculate new auto-scale values based on the minimum and maximum values  stored in the initialMin and 
             initialMax fields.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.AdjustForZeroEndpoints(System.Double,System.Double)">
            <summary>
             Correct an initial range that has equal minimum and maximum values. 
            </summary>
            <param name="rmin"> The minimum value of the initial range. </param>
            <param name="rmax"> The maximum value of the initial range.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcTickInterval(System.Double)">
            <summary>
             Calculates the minor tick interval based on a normalized range. 
            </summary>
            <param name="rrange"> Specifies the value of the normalized range. </param>
            <returns> Returns the minor interval.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcNthTickMajor(System.Double)">
            <summary>
             Calculates the number of minor ticks per major tick based on a normalized range. 
            </summary>
            <param name="rrange"> Specifies the value of the normalized range. </param>
            <returns> Returns the number of minor ticks per major tick interval.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcFinalMin(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
             Calculates the auto-scale minimum, based on the rounding mode and  the calculated tick intervals. 
            </summary>
            <param name="rmin"> The current auto-scale minimum. </param>
            <param name="rtickinterval"> The current auto-scale minor tick interval value. </param>
            <param name="nthtick"> The current auto-scale value for the number of minor ticks  per major tick interval. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR). </param>
            <returns> Returns the auto-scale final minimum value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcFinalMax(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
             Calculates the auto-scale maximum, based on the rounding mode and  the calculated tick intervals. 
            </summary>
            <param name="rmax"> The current auto-scale maximum. </param>
            <param name="rtickinterval"> The current auto-scale minor tick interval value. </param>
            <param name="nthtick"> The current auto-scale value for the number of minor ticks  per major tick interval. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR). </param>
            <returns> Returns the auto-scale final maximum value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.ShiftDecimalLeft(System.Double,System.Int32)">
            <summary>
             Multiplies a number, r, by 10^n. 
            </summary>
            <param name="r"> The number to be multiplied. </param>
            <param name="n"> The number r is multiplied by 10^n. </param>
            <returns> Returns the value r  10^n.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.ShiftDecimalRight(System.Double,System.Int32)">
            <summary>
             Divides a number, r, by 10^n. 
            </summary>
            <param name="r"> The number to be divided. </param>
            <param name="n"> The number r is divided by 10^n. </param>
            <returns> Returns the value r / 10^n.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.MaskDigits(System.Double,System.Int32)">
            <summary>
             Rounds a number to the specified precision level and returns  the amount rounded off, not the rounded number. 
            </summary>
            <param name="r"> The number to be rounded. </param>
            <param name="n"> The precision level. </param>
            <returns> Returns the amount rounded off.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcOffset(System.Double,System.Int32)">
            <summary>
             Rounds a number to the specified precision level. 
            </summary>
            <param name="r"> The number to be rounded. </param>
            <param name="n"> The precision level. </param>
            <returns> Returns the rounded number.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.GetInitialMin">
            <summary>
             Returns the initial minimum value of the auto-scale setup. 
            </summary>
            <returns> Returns the initial minimum value of the auto-scale setup.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.GetInitialMax">
            <summary>
             Returns the initial maximum value of the auto-scale setup. 
            </summary>
            <returns> Returns the initial maximum value of the auto-scale setup.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.GetFinalMin">
            <summary>
             Returns the final minimum value of the auto-scale setup. 
            </summary>
            <returns> Returns the final minimum value of the auto-scale setup.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.GetFinalMax">
            <summary>
             Returns the final maximum value of the auto-scale setup. 
            </summary>
            <returns> Returns the final maximum value of the auto-scale setup.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.GetAxisMinorTicksPerMajor">
            <summary>
             Returns the number of minor ticks per major tick mark in the auto-scale setup. 
            </summary>
            <returns> Returns the number of minor ticks per major tick mark in the auto-scale setup.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.GetLabelsOrigin">
            <summary>
             Returns the starting value of labels and tick marks in the auto-scale setup. 
            </summary>
            <returns> Returns the starting value of labels and tick marks in the auto-scale setup.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.GetAxisLabelsDecimalPos">
            <summary>
             Returns the number of digits to the right of the decimal point to use for axis labels 
            </summary>
            <returns> Returns the number of digits to the right of the decimal point to use for axis labels.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.SetMinRangeAdjust(System.Double)">
            <summary>
             The initial minimum for the auto-scale calculation can be adjusted by  a value to make the 
             autoscale range larger. 
            </summary>
            <param name="r"> Sets the adjustment value for the minimum end of the range.  The adjusted minimum value is 
            calculated as  (new minimum) = (initial minimum) - r</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.SetMaxRangeAdjust(System.Double)">
            <summary>
             The initial maximum for the auto-scale calculation can be adjusted by  a value to make the autoscale range larger. 
            </summary>
            <param name="r"> Sets the adjustment value for the maximum end of the range.  The adjusted maximum value is 
            calculated as  (new maximum) = (initial maximum) + r</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.GetMinRangeAdjust">
            <summary>
             Returns the initial minimum value adjustment factor. 
            </summary>
            <returns> Returns the initial minimum value adjustment factor. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.AutoScale.SetMinRangeAdjust(System.Double)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.GetMaxRangeAdjust">
            <summary>
             Returns the initial maximum value adjustment factor. 
            </summary>
            <returns> Returns the initial maximum value adjustment factor. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.AutoScale.SetMaxRangeAdjust(System.Double)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AutoScale.CalcRoundAxisValues(System.Double,System.Double,System.Int32)">
            <summary>
             An abstract method that rounds minimum and maximum values appropriate for axis  labels. 
            </summary>
            <param name="raxmin"> The initial axis minimum value. </param>
            <param name="raxmax"> The initial axis maximum value. </param>
            <param name="nroundmode"> The new axis values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.FinalMin">
            <summary>
             Holds the final, calculated Auto-scale minimum value.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.FinalMax">
            <summary>
             Holds the final, calculated Auto-scale maximum value.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.LabelsOrigin">
            <summary>
             Holds the calculated Auto-scale label and tick mark starting position.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.InitialMin">
            <summary>
             Holds the original Auto-scale minimum value.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.InitialMax">
            <summary>
             Holds the original Auto-scale maximum value.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.MinValue">
            <summary>
             A temporary variable used in calculating the Auto-scale minimum value.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.MaxValue">
            <summary>
             A temporary variable used in calculating the Auto-scale maximum value.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.AxisType">
            <summary>
             Specifies the axis type.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.RoundMode">
            <summary>
             Specifies the Auto-scale rounding value.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.AxisMinorTicksPerMajor">
            <summary>
             Holds the calculated Auto-scale value for the number of minor ticks per major tick interval.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.MajorNthTick">
            <summary>
             Holds the calculated axis nMajortNthTick value, labels every majorNthTick major tick mark, rather 
             than every major tick mark.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.AxisLabelsDecimalPos">
            <summary>
             Holds the calculated Auto-scale value for the number of digits to the right of the
             decimal point to use for axis labels.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.TheDataset">
            <summary>
             Holds a reference to a dataset used as the basis for a single dataset Auto-scale calculation.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.TheDatasetArray">
            <summary>
             Holds a reference to an array of datasets used as the basis for a multiple dataset Auto-scale calculation.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.NumDatasets">
            <summary>
             Specifies the number of datasets (size of the theDatasetArray array) used in multiple dataset calculations.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.TheChartCoordinates">
            <summary>
             A reference to a scale used as the basis for an Auto-scale calculation.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.ZeroEndpointTestValue">
            <summary>
             The constant used to determine if two values are essentially the same.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.MinRangeAdjust">
            <summary>
             An auto-scale fudge factor to be subtracted from the minimum value for the range.
            </summary>	
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AutoScale.MaxRangeAdjust">
            <summary>
             An auto-scale fudge factor to be added to the maximum value for the range.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Axis">
            <summary>
              The Axis class is the abstract base class for all axes in the QCChart2D class library.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisLabels">
            <summary>
             Holds a reference to an axis labels object (AxisLabels) if applicable. Can't create 
             default axis labels class because that creates a circular reference.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisTicksArrayList">
            <summary>
             A vector containing a list of tick mark objects (TickMark) for this axis.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisType">
            <summary>
             Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisTickDir">
            <summary>
             Specifies the direction of the tick marks with respect to axis line.
             Use one of the following tick direction constants: AXIS_MIN, AXIS_CENTER, AXIS_MAX.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisMin">
            <summary>
             The axis line extends from axisMin to axisMax, referencing the underlying physical
             coordinate system. The axis is an object drawn referencing a physical coordinate system,
             it does not define a physical coordinate system. The axis endpoints do not need to match
             the minimum and maximum values of the underlying coordinate system.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisMax">
            <summary>
             The axis line extends from axisMin to axisMax, referencing the underlying physical
             coordinate system. The axis is an object drawn referencing a physical coordinate system,
             it does not define a physical coordinate system. The axis endpoints do not need to match
             the minimum and maximum values of the underlying coordinate system.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisMinorTickLength">
            <summary>
             The length of the axis minor tick marks in window device coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisMajorTickLength">
            <summary>
             The length of the axis major tick marks in window device coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.staggerDistance">
            <summary>
             The distance between stagger levels, in window device coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.numTickStagger">
            <summary>
             The number of levels in the tick mark labels.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.majorTickCntr">
            <summary>
             A count of the number of major tick marks used in calculating the tick mark stagger.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisTickOrigin">
            <summary>
             The starting tick mark position is defined in physical coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisNormIntercept">
            <summary>
             The axis intercept is stored in normalized coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisMinorNthTick">
            <summary>
             Draws every axisMinorNthTick. Used when drawing the tick marks for time
             axes (TimeAxis) where the number of minor tick marks between major
             tick marks is larger than what is wanted.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisMajorNthTick">
            <summary>
             Labels every axisMajorNthTick major tick mark, rather than every major tick mark.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisMinorTicksPerMajor">
            <summary>
             Places a major tick mark at every axisMinorTicksPerMajor minor tick mark.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisLineEnable">
            <summary>
             True draws the axis line connecting the tick marks.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.axisTicksEnable">
            <summary>
             True draws the axis tick marks.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Axis.maxNumTickMarks">
            <summary>
             A limit is placed on the number of tick marks that an axis can have, to avoid 
             millions of tick marks if the tick space values is inadvertently set to a much too
             small fraction of the total axis scale.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.#ctor">
            <summary>
              The default Axis constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.ErrorCheck(System.Int32)">
            <summary>
              Checks the current axis object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.InitDefaults">
            <summary>
              Initializes default values for the axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.Copy(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              Copies the source axis. 
            </summary>
            <param name="source"> The source axis object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32)">
            <summary>
              This constructor creates a new Axis object of the specified type and  scales it to match the 
              minimum and maximum values of the specified PhysicalCoordinates object. 
            </summary>
            <param name="transform"> Sets the minimum and maximum value of the axis to the associated  minimum 
            and maximum value of the coordinate system transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Double,System.Double)">
            <summary>
              This constructor creates a new Axis object of a specified type, and scales it to match  
              the specified minimum and maximum values. 
            </summary>
            <param name="transform"> Places the axes in the coordinate system defined by transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS). </param>
            <param name="minval"> Sets the minimum value for the axis. </param>
            <param name="maxval"> Sets the maximum value for the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.InitAxis(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Double,System.Double)">
            <summary>
              This method initializes the type, minimum and maximum  values of the axis. 
            </summary>
            <param name="transform"> Places the axes in the coordinate system defined by transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS). </param>
            <param name="minval"> Sets the minimum value for the axis. </param>
            <param name="maxval"> Sets the maximum value for the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.InitAxis(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32)">
            <summary>
              This method initializes the type, minimum and maximum  values of the axis. 
            </summary>
            <param name="transform"> Places the axes in the coordinate system defined by transform. The  
            axis is scaled to the minimum and maximum values of the coordinate system  represented by transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.CalcCartesianTickPoint(System.Double,System.Int32,com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
              Calculates the end points of a tick mark in device (DEV_POS) coordinates. 
            </summary>
            <param name="rvalue"> The value of the tick mark, in units of the axis, may be either be  
            the x- or the y-coordinate depending on the axis direction. This is used as  the value displayed 
            for the tick mark labels. </param>
            <param name="nticktype"> Specifies the tick mark type, TICK_MAJOR or TICK_MINOR. </param>
            <param name="startp"> The starting physical coordinates for the position of the tick mark. </param>
            <param name="stopp"> The ending physical coordinates for the position of the tick mark.</param>
            <param name="nstaggerlevel"> The stagger level.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisLimits(System.Double,System.Double)">
            <summary>
              Sets the axis minimum and maximum values of an axis in physical coordinates.  
              If the minimum value is greater than the maximum value the values  are swapped. 
            </summary>
            <param name="minval"> Sets the minimum value (field axisMin) of the axis using  physical coordinates. </param>
            <param name="maxval"> Sets the maximum value (field axisMax) of the axis using  physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.CalcMaxNumTickMarks">
            <summary>
             Calculates and returns the maximum number of tick marks that can be added to the axisTicksArrayList.  
             Assumes that the maximum number is the resolution of the pixels for the given axis.
            </summary>
            <returns>  Returns the maximum number of tick marks that can be added to the axisTicksArrayList.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.AddAxisTick(System.Double,System.Int32)">
            <summary>
              Creates a new tick mark object (TickMark) and adds it to the end  of the tick mark list (axisTicksArrayList ).
            </summary>
            <param name="rtickvalue"> The value of the tick mark, in units of the axis, may be either be 
             the x- or the y-coordinate depending on the axis direction. This is used as  the value displayed 
             for the tick mark labels. </param>
            <param name="ticktype"> Specifies the tick mark type, TICK_MAJOR or TICK_MINOR. </param>
            <returns> Returns the current number of tick marks for the axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.AddAxisTick(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Double,System.Int32)">
            <summary>
              Creates a new tick mark object (TickMark) and adds it to the end  of the tick mark list (axisTicksArrayList ). 
            </summary>
            <param name="startp"> The starting physical coordinates for the position of the tick mark. </param>
            <param name="stopp"> The ending physical coordinates for the position of the tick mark. </param>
            <param name="rtickvalue"> The value of the tick mark, in units of the axis, may be either be  
            the x- or the y-coordinate depending on the axis direction. This is used as  the value displayed 
            for the tick mark labels. </param>
            <param name="ticktype"> Specifies the tick mark type, TICK_MAJOR or TICK_MINOR. </param>
            <returns> Returns the current number of tick marks for the axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.AddAxisTick(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Double,System.Int32,System.Boolean)">
            <summary>
              Creates a new tick mark object (TickMark) and adds it to the end  of the tick mark list (axisTicksArrayList). 
              The default axis label state for a tick mark,  a label is place at major tick marks and not at minor 
              tick marks, can  be overridden. 
            </summary>
            <param name="startp"> The starting physical coordinates for the position of the tick mark. </param>
            <param name="stopp"> The ending physical coordinates for the position of the tick mark. </param>
            <param name="rtickvalue"> The value of the tick mark, in units of the axis, may be either be  the x- or 
            the y-coordinate depending on the axis direction. This is used as  the value displayed for the tick 
            mark labels. </param>
            <param name="ticktype"> Specifies the tick mark type, TICK_MAJOR or TICK_MINOR. </param>
            <param name="blabelf"> A value of true forces a label at the tick mark , regardless of the tick mark type </param>
            <returns> Returns the current number of tick marks for the axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.AddAxisTick(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32)">
            <summary>
              Adds a tick mark to a time axis. Creates a new tick mark object (TickMark)  and adds it to the end 
               of the tick mark list (axisTicksArrayList ). The default axis label state for a tick mark,  
               a label is place at major tick marks and not at minor tick marks, can  be overridden. 
            </summary>
            <param name="startp"> The starting physical coordinates for the position of the tick mark. </param>
            <param name="stopp"> The ending physical coordinates for the position of the tick mark. </param>
            <param name="rtickvalue"> The value of the tick mark, in units of the axis, may be either be  the x- or 
            the y-coordinate depending on the axis direction. This is used as  the value displayed for the tick mark 
            labels. </param>
            <param name="dtickdate"> The ChartCalendar data value associated with this tick mark. </param>
            <param name="ticktype"> Specifies the tick mark type, TICK_MAJOR or TICK_MINOR. </param>
            <returns> Returns the current number of tick marks for the axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.ResetAxisTicks">
            <summary>
              Resets the tick mark array to empty.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisTicksAttributes(System.Double,System.Double,System.Int32)">
            <summary>
              Sets the length and direction properties of a tick mark. 
            </summary>
            <param name="minorticklength"> Specifies the length of a minor tick mark in window device coordinates. </param>
            <param name="majorticklength"> Specifies the length of a major tick mark in window device coordinates. </param>
            <param name="tickdir"> Specifies the direction of the tick marks with respect to axis line.  
            Use one of the following tick direction constants: AXIS_MIN, AXIS_CENTER, AXIS_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisIntercept(System.Double)">
            <summary>
              Sets intercept of this axis with the orthogonal axis in physical coordinates. 
            </summary>
            <param name="intercept"> Sets the intercept of this axis with the orthogonal axis in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisAttrib(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
              Sets color, line thickness and line style properties of the axis. 
            </summary>
            <param name="axcolor"> Specifies the color of the axis line and tick marks. </param>
            <param name="axthickness"> Specifies the line thickness, in window device coordinates,  of 
            the axis line and tick marks. </param>
            <param name="axstyle"> Specifies the axis line style, using one of the line style  constants.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisMin(System.Double)">
            <summary>
              Sets the axis minimum value. 
            </summary>
            <param name="minval"> Sets the axisMin field, specifying the axis minimum value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisMax(System.Double)">
            <summary>
              Sets the axis maximum value. 
            </summary>
            <param name="maxval"> Sets the axisMax field, specifying the axis maximum value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisMinorTickLength(System.Double)">
            <summary>
              Sets length of a minor tick mark. 
            </summary>
            <param name="ticklength"> Specifies the length of a minor tick mark in window device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisMajorTickLength(System.Double)">
            <summary>
              Sets length and direction properties of a major tick mark. 
            </summary>
            <param name="ticklength"> Specifies the length of a major tick mark in window device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisType(System.Int32)">
            <summary>
              Sets the axis type for this axis. 
            </summary>
            <param name="axtype"> Specifies the axis type (X_AXIS or Y_AXIS) for this axis .</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisTickDir(System.Int32)">
            <summary>
              Sets the direction of a tick mark. 
            </summary>
            <param name="tickdir"> Specifies the direction of the tick marks with respect to axis line.  
            Use one of the following tick direction constants: AXIS_MIN, AXIS_CENTER, AXIS_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.DrawAxisLine(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws the axis line as a general path. 
            </summary>
            <param name="path"> The axis line is drawn using this general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.DrawAxis(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws the axis (axis line and tick marks) as a general path. 
            </summary>
            <param name="path"> The axis is drawn using this general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.DrawAxisTicks(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws the axis tick marks as a general path. 
            </summary>
            <param name="path"> The axis tick marks are drawn using this general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisMin">
            <summary>
              Returns the value of the axis minimum in physical coordinates. 
            </summary>
            <returns> Returns the value of the axis minimum field, axisMin.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisRange">
            <summary>
              Returns the value of the axis range in physical coordinates. 
            </summary>
            <returns> Returns the value of the axis range, the difference in the  fields axisMax and axisMin.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisMax">
            <summary>
              Returns the value of the axis maximum in physical coordinates. 
            </summary>
            <returns> Returns the value of the axis maximum field, axisMax.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisType">
            <summary>
              Returns the value of the axis type. 
            </summary>
            <returns> Returns the value of the axis type, X_AXIS or Y_AXIS.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisIntercept">
            <summary>
              Returns the value of the axis intercept with the orthogonal axis, in  physical coordinates. 
            </summary>
            <returns> Returns the value of the axis intercept with the orthogonal axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisMinorTickLength">
            <summary>
              Returns the value of the axis minor tick mark length, in device  (DEV_POS) coordinates. 
            </summary>
            <returns> Returns the value of the axis minor tick mark length, stored in  the field axisMinorTickLength.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisMajorTickLength">
            <summary>
              Returns the value of the axis major tick mark length in device  (DEV_POS) coordinates. 
            </summary>
            <returns> Returns the value of the axis major tick mark length, stored in  the field axisMajorTickLength.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisTickDir">
            <summary>
              Returns the direction of the axis tick marks. 
            </summary>
            <returns> Returns the direction of the axis tick marks.  Returns one of tick direction constants: 
             AXIS_MIN, AXIS_CENTER, AXIS_MAX.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisMinorNthTick">
            <summary>
              Returns the value of the axisMinorNthTick field. 
            </summary>
            <returns> Returns the value of the axisMinorNthTick field, which specifies that 
             only every axisMinorNthTick'th should be created.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisMajorNthTick">
            <summary>
              Returns the value of the axisMajorNthTick field. 
            </summary>
            <returns> Returns the value of the axisMajorNthTick field, which specifies that  
            only every axisMajorNthTick'th should be enabled for an a label.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisMinorNthTick(System.Int32)">
            <summary>
              Sets the value of the axisMinorNthTick field. 
            </summary>
            <param name="nminornthtick"> Sets the value of the axisMinorNthTick field, which specifies that  
            only every axisMinorNthTick'th should be created. This is used when  there are a large number 
            of minor ticks for each major tick, such as  a time axis where the major tick marks are minutes 
            and the minor tick  marks are seconds. For example: rather than display 60 minor tick marks  
            representing seconds between minute major tick marks, a axisMinorNthTick value  of three can 
            display a minor tick mark every three seconds, rather than  every one.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisMajorNthTick(System.Int32)">
            <summary>
              Sets the value of the axisMajorNthTick field. 
            </summary>
            <param name="nmajornthtick"> Sets the value of the axisMajorNthTick field, which specifies that 
             only every axisMajorNthTick'th should be enable for an a label.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetStaggerDistance(System.Double)">
            <summary>
             Sets the distance between stagger levels, in window device coordinates. 
            </summary>
            <param name="rstagger"> Sets the distance between stagger levels, in window device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetStaggerDistance">
            <summary>
             Returns the distance between stagger levels, in window device coordinates. 
            </summary>
            <returns> Returns the distance between stagger levels, in window device coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetNumTickStagger(System.Int32)">
            <summary>
             Sets the number of stagger levels for the axis major tick marks. 
            </summary>
            <param name="nnumstagger"> Sets the number of stagger levels for the axis major tick marks.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetNumTickStagger">
            <summary>
             Returns the number of stagger levels for the axis major tick marks. 
            </summary>
            <returns> Returns the number of stagger levels for the axis major tick marks.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.CalcAxisNormIntercept">
            <summary>
              Calculates and saves the normalized axis intercept in  the field axisNormIntercept.  
              The normalized intercept is used to reposition the axis  when the underlying physical coordinate 
              system is changed  because of re-scaling. Zooming is an example where the  normalized intercept is used.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisNormIntercept">
            <summary>
              Returns the value of the normalized axis intercept. 
            </summary>
            <returns> Returns the value of the normalized axis intercept, stored in field axisNormIntercept.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisNormIntercept(System.Double)">
            <summary>
              Sets the value of the normalized axis intercept. 
            </summary>
            <param name="normintercept"> Sets the value of the normalized axis intercept, stored in 
            field axisNormIntercept.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.RestoreAxisNormIntercept">
            <summary>
              Calculates and restores the axis intercept based on the stored, normalized  axis intercept.  
              This method is used to reposition the axis  when the underlying physical coordinate system 
              is changed  because of re-scaling. Zooming is an example where  this method is used.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisMinorTicksPerMajor">
            <summary>
              Returns the number of minor tick marks per major  tick mark. 
            </summary>
            <returns> Returns the number of minor tick marks per major tick mark,  stored in the axisMinorTicksPerMajor 
             field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisMinorTicksPerMajor(System.Int32)">
            <summary>
              Sets the number of minor tick marks per major  tick mark. 
            </summary>
            <param name="ntickmajor"> Sets the number of minor tick marks per major tick mark,  
             stored in the axisMinorTicksPerMajor field.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisTickOrigin">
            <summary>
              Returns the starting point for positioning tick marks, in physical coordinates. 
            </summary>
            <returns> Returns the starting point for positioning tick marks, stored  in the axisTickOrigin field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisTickOrigin(System.Double)">
            <summary>
              Sets the starting point for positioning tick marks, in physical coordinates. 
            </summary>
            <param name="tickorigin"> Sets the starting point for positioning tick marks, stored  in the 
             axisTickOrigin field.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisTicksArrayList">
            <summary>
              Returns the vector that holds a list of tick marks, in the form of  TickMark objects, for this axis. 
            </summary>
            <returns> Returns the vector that holds a list of tick marks, in the form of  TickMark objects, 
             for this axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetAxisLabels">
            <summary>
              Returns the axis labels object associated with this axis. 
            </summary>
            <returns> Returns the axis labels object (AxisLabels) associated  with this axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.SetAxisLabels(com.quinncurtis.chart2dnet.AxisLabels)">
            <summary>
              Sets the axis labels object associated with this axis. 
            </summary>
            <param name="axislabels"> Sets the axis labels object (AxisLabels) associated  with this axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetLastTickMark">
            <summary>
              Returns the most recent TickMark object. 
            </summary>
            <returns> Returns the last entree in the axisTicksArrayList as an TickMark object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
             Returns true if the test point is near one of the axes.
            </summary>
            <param name="testpoint"> The test point.</param>
            <param name="np"> Returns the nearest point data associated with test.</param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.PrePlot(System.Drawing.Graphics)">
            <summary>
              The prePlot method is called prior to the actual drawing of the axis.  It creates a 
              new general path object for drawing into, sets  the current coordinate system to the 
              axis coordinate system,  sets the clipping for the axis, and casts the Graphics object 
               to a Graphics object. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <returns> Returns the input Graphics object g cast to a Graphics object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.CalcAutoAxis">
            <summary>
              The abstract CalcAutoAxis method needs to be implemented in any  subclasses of this class. 
              Based on the minimum and maximum values  in the chartObjScale (PhysicalCoordinates) object 
              for this axis the values for  fields axisMin, axisMax, axisTickOrigin, and axisMinorTicksPerMajor.  
              The chartObjScale object and the axisType fields must be initialized  before this method is called.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.CalcAxisLabelsDecimalPos">
            <summary>
              The abstract CalcAxisLabelsDecimalPos method needs to be implemented in any  subclasses of this class. 
              Based the values for  fields axisMin, axisMax, axisTickOrigin, and axisMinorTicksPerMajor this  
              method calculates how may digits to the right of the decimal should  be displayed for any axis labels. 
            </summary>
            <returns> Returns the number of digits to the right of the decimal that should  be used for any axis labels.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Axis.GetCompatibleAxisLabels">
            <summary>
              The abstract GetCompatibleAxisLabels method needs to be implemented in any  subclasses of this class. 
              It should return an axis labels object that is  a subclass of the abstract AxisLabels and which is 
              compatible with the axis  subclass derived from this Axis object. 
            </summary>
            <returns> Returns an axis labels object that is a subclass of the abstract AxisLabels  and which is 
            compatible with the axis subclass derived from this Axis object.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisIntercept">
            <summary>
              Get/Set the intercept of this axis with the orthogonal axis in physical coordinates. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisMin">
            <summary>
              Get/Set the axis minimum value. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisMax">
            <summary>
              Get/Set the axis maximum value. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisMinorTickLength">
            <summary>
              Get/Set length of a minor tick mark. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisMajorTickLength">
            <summary>
              Get/Set length of a major tick mark. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisType">
            <summary>
              Get/Set if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS).
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisTickDir">
            <summary>
              Get/Set the direction of a tick mark. Use one of the tick direction constants: 
              AXIS_MIN, AXIS_CENTER, AXIS_MAX.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisMinorNthTick">
            <summary>
              Get/Sets the value of the axisMinorNthTick field. Draws every axisMinorNthTick. Used when drawing the 
              tick marks for time
             axes (TimeAxis) where the number of minor tick marks between major
             tick marks is larger than what is wanted.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisMajorNthTick">
            <summary>
              Get/Set the value of the axisMajorNthTick field.   Labels every axisMajorNthTick major tick mark, rather 
              than every major tick mark.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.StaggerDistance">
            <summary>
             Get/Set the distance between stagger levels, in window device coordinates. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.NumTickStagger">
            <summary>
             Get/Set the number of stagger levels for the axis major tick marks. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisNormIntercept">
            <summary>
              Get/Set the value of the normalized axis intercept. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisMinorTicksPerMajor">
            <summary>
              Get/Set the number of minor tick marks per major  tick mark. Places a major tick mark at every 
              axisMinorTicksPerMajor minor tick mark.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisTickOrigin">
            <summary>
              Get/Set the starting point for positioning tick marks, in physical coordinates. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisLabelsObj">
            <summary>
              Get/Set the axis labels object associated with this axis. 
            </summary>
            		 CLS Compliance Change
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisLineEnable">
            <summary>
             Set/Get to true draws the axis line connecting the tick marks.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisTicksEnable">
            <summary>
             Set/Get to true draws the axis tick marks.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Axis.AxisTicksArrayList">
            <summary>
             A vector containing a list of tick mark objects (TickMark) for this axis.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.AxisLabels">
            <summary>
              The AxisLabels class is the base class for all axes label classes in the QCChart2D class library.  
              It is an abstract subclass of the GraphObj class.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartText">
            <summary>
             The ChartText class is used to place text in a chart. ChartText objects  can be positioned using 
             any of the coordinate systems, rotated, and justified  vertically and horizontally. It also supports 
             multi-line text by inserting  a CR (carriage return) character in the string.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.textString">
            <summary>
             Holds the underlying string for simple text objects where the text can be  represented using a single string
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.textFont">
            <summary>
             Holds a reference to the font object used to display the axis label text.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.resizedTextFont">
            <summary>
             Holds a reference to the resized font object used to display the axis label text.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.textBoxMode">
            <summary>
             Specifies whether the bounding box of the text object is drawn in the text color color.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.textBoxColor">
            <summary>
             Specifies the color of the text box rectangle under label text, if the textBoxMode is true.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.xJust">
            <summary>
             Specifies the horizontal justification of the text string with respect to the current location.  
             Use one of the justification constants: JUSTIFY_MIN,JUSTIFY_CENTER, or JUSTIFY_MAX.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.yJust">
            <summary>
             Specifies the vertical justification of the text string with respect to the current location.  
             Use one of the justification constants: JUSTIFY_MIN,JUSTIFY_CENTER, or JUSTIFY_MAX.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.textRotation">
            <summary>
             Specifies the rotation, -360 to 360 degrees, of the text in the normal viewing plane.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.textBox">
            <summary>
             Holds the bounding box of the text object, specified in window device coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.lineLeading">
            <summary>
             Holds the number of device units inserted between multi-line text
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.textNudge">
            <summary>
             The text position can be moved relative (nudged), using window device coordinates,  relative to the 
             specified location of the text.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartText.originalFontSize">
            <summary>
             The original font size is the font size explicitly set for the text. Resize  operations may change the 
             displayed font size, because the display  font size is calculated as resizeMultiplier  originalFontSize.  
             The original font size remains unchanged, unless explicitly changed.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.#ctor">
            <summary>
              The default ChartText constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.ErrorCheck(System.Int32)">
            <summary>
              Checks the current chart text object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new ChartText object using the specified scale. 
            </summary>
            <param name="transform"> The text object is placed in the coordinate system defined by transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.Copy(com.quinncurtis.chart2dnet.ChartText)">
            <summary>
              Copies the source text object. 
            </summary>
            <param name="source"> The source text object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.Clone">
            <summary>
             Returns an object that is a clone of this ChartText object. 
            </summary>
            <returns> Returns a clone of this ChartText object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.InitChartText(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
              This method initializes an ChartText using the specified scale,  font, string, position, 
              justification and rotation. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object. </param>
            <param name="x"> Specifies the x-value of the text position </param>
            <param name="y"> Specifies the y-value of the text position </param>
            <param name="npostype"> Specifies  if the position of the text is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants: DEV_POS,PHYS_POS, 
            NORM_GRAPH_POS,NORM_PLOT_POS. </param>
            <param name="xjust"> Specifies the horizontal justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER orJUSTIFY_MAX. </param>
            <param name="yjust"> Specifies the vertical justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER orJUSTIFY_MAX. </param>
            <param name="rotation"> The rotation (-360 to 360 degrees) of the text in the normal viewing plane.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetTextBgColor(System.Drawing.Color)">
            <summary>
              Sets the color of the background rectangle under the text, if the textBgMode is true. 
            </summary>
            <param name="rgbcolor"> Sets the color of the background rectangle under the text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextBgColor">
            <summary>
              Returns the color of the background rectangle under the text. 
            </summary>
            <returns> Returns the color of the background rectangle under the text.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetTextBgMode(System.Boolean)">
            <summary>
              Sets the text background color mode. 
            </summary>
            <param name="bmode"> True and the rectangle under the text is cleared to the textBgColor color.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextBgMode">
            <summary>
              Returns the text background color mode. 
            </summary>
            <returns> Returns the text background color mode.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetTextBoxMode(System.Boolean)">
            <summary>
              Specifies if the text bounding box is drawn in the text color. 
            </summary>
            <param name="bmode"> True and the bounding box rectangle is drawn in the text color.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextBoxMode">
            <summary>
              Returns true if the text bounding box is draw. 
            </summary>
            <returns> Returns true if the text bounding box is drawn.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetTextBoxColor(System.Drawing.Color)">
            <summary>
              Sets the line color of the text box. 
            </summary>
            <param name="c"> Sets the line color of the text box. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextBoxColor">
            <summary>
              Returns the line color of the text box. 
            </summary>
            <returns> Returns the line color of the text box.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new ChartText using the specified scale,  font, string, position, 
              justification and rotation. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object. </param>
            <param name="x"> Specifies the x-value of the text position </param>
            <param name="y"> Specifies the y-value of the text position </param>
            <param name="npostype"> Specifies the if the position of the text is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants:DEV_POS,PHYS_POS, 
            NORM_GRAPH_POS,NORM_PLOT_POS. </param>
            <param name="xjust"> Specifies the horizontal justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER orJUSTIFY_MAX. </param>
            <param name="yjust"> Specifies the vertical justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER orJUSTIFY_MAX. </param>
            <param name="rotation"> The rotation (-360 to 360 degrees) of the text in the normal viewing plane.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String,System.Double,System.Double,System.Int32)">
            <summary>
              This constructor creates a new ChartText using the specified scale,  font, string, position and justification. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object. </param>
            <param name="x"> Specifies the x-value of the text position </param>
            <param name="y"> Specifies the y-value of the text position </param>
            <param name="npostype"> Specifies the if the position of the text is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants:DEV_POS,PHYS_POS, 
            NORM_GRAPH_POS,NORM_PLOT_POS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String)">
            <summary>
              This constructor creates a new ChartText using the specified scale,  font, and string. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.#ctor(System.Drawing.Font,System.String)">
            <summary>
              This constructor creates a new ChartText using the specified  font, and string. It cannot be used for 
              display because it does not reference  a coordinate system. 
            </summary>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetXJust(System.Int32)">
            <summary>
              Sets the horizontal justification of the text. 
            </summary>
            <param name="xjust"> Specifies the horizontal justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER orJUSTIFY_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetXJust">
            <summary>
              Returns the horizontal justification of the text. 
            </summary>
            <returns> xjust Returns the horizontal justification of the text.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetYJust(System.Int32)">
            <summary>
              Sets the vertical justification of the text. 
            </summary>
            <param name="yjust"> Specifies the vertical justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER orJUSTIFY_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetYJust">
            <summary>
              Returns the vertical justification of the text. 
            </summary>
            <returns> Returns the vertical justification of the text.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetLineLeading(System.Double)">
            <summary>
              Sets the line leading, the space between lines in multi-line text, in device units. 
            </summary>
            <param name="rlead"> Sets the line leading, the space between lines in multi-line text,  in device units.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetLineLeading">
            <summary>
              Returns the line leading, the space between lines in multi-line text, in device units. 
            </summary>
            <returns> Returns the line leading, the space between lines in multi-line text, in device units.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetTextFont(System.Drawing.Font)">
            <summary>
              Sets the font of the text. 
            </summary>
            <param name="tfont"> Sets the font of the text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextFont">
            <summary>
              Gets the font of the text. 
            </summary>
            <returns> Returns the font of the text.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.DeriveFont(System.Drawing.Font,System.Int32)">
            <summary>
             Creates a new font based on the source font.
            </summary>
            <param name="original"> The source font. </param>
            <param name="newsize"> The size for the derived font. </param>
            <returns> Returns the derived font.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetResizedTextFont">
            <summary>
             Returns a new font based on the current font, taking into account the resize multiplier. 
            </summary>
            <returns> Returns resized font.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.AddNewLineTextString(System.String)">
            <summary>
             This method adds a new line of text to the current text object. 
            </summary>
            <param name="thestring"> A string containing the new text line.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetTextString(System.String)">
            <summary>
             Sets the current text string. 
            </summary>
            <param name="thestring"> Sets the current text string.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextString">
            <summary>
             Returns the current text string. 
            </summary>
            <returns> Returns the current text string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetTextRotation(System.Double)">
            <summary>
              Sets the rotation of the text in the normal viewing plane. 
            </summary>
            <param name="rotation"> The rotation (-360 to 360 degrees) of the text in the normal viewing plane.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextRotation">
            <summary>
              Returns the rotation of the text in the normal viewing plane. 
            </summary>
            <returns> Returns the rotation, in degrees, of the text in the normal viewing plane.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetTextNudge(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              Sets the xy values of the textNudge property.  The textNudge property moves the relative position, 
              using window device coordinates,  of the text relative to the specified location of the text. 
            </summary>
            <param name="nudge"> Sets the xy values of the textNudge property.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetTextNudge(System.Double,System.Double)">
            <summary>
              Sets the xy values of the textNudge property.  The textNudge property moves the relative position, using 
              window device coordinates,  of the text relative to the specified location of the text. 
            </summary>
            <param name="x"> Sets the x-value of the textNudge property. </param>
            <param name="y"> Sets the y-value of the textNudge property.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextNudge">
            <summary>
              Returns the xy values of the textNudge property. 
            </summary>
            <returns> Returns the xy values of the textNudge property. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartText.SetTextNudge(com.quinncurtis.chart2dnet.Point2D)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextSizeX(System.Drawing.Graphics,System.Int32)">
            <summary>
              Returns the horizontal size of the text, using the specified coordinate system. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="npostype"> Specifies the coordinate system used to calculate the return value.  Use one of the 
            coordinate system constants:DEV_POS,PHYS_POS, POLAR_POS,  NORM_GRAPH_POS,NORM_PLOT_POS. </param>
            <returns> Returns the horizontal size of the text.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextSizeY(System.Drawing.Graphics,System.Int32)">
            <summary>
              Returns the vertical size of the text, using the specified coordinate system. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="npostype"> Specifies the coordinate system used to calculate the return value.  Use one of 
            the coordinate system constants:DEV_POS,PHYS_POS, POLAR_POS,  NORM_GRAPH_POS,NORM_PLOT_POS. </param>
            <returns> Returns the vertical size of the text.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextMaxSizeY(System.Drawing.Graphics,System.Int32)">
            <summary>
              Returns a value that represents the maximum height of a string using the  given font. No matter what the 
              current string is, it returns a height that  assumes that the string has both capital and lower case 
              characters, with descenders,  in the string. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="npostype"> Specifies the coordinate system used to calculate the return value.  Use one of the 
            coordinate system constants:DEV_POS,PHYS_POS, POLAR_POS,  NORM_GRAPH_POS,NORM_PLOT_POS. </param>
            <returns> Returns the maximum vertical size of the text.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.CalcTextJust(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Point2D,System.String)">
            <summary>
             This method repositions the string based on the text justification parameters. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="p"> The unjustified position is passed in here, and the new, justified  position is returned. </param>
            <param name="s"> The text object string. </param>
            <returns> Returns the justified position of the text.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetNumLines(System.String)">
            <summary>
             This method returns number of line break characters, '\n', in a string. 
            </summary>
            <param name="s"> The text object string. </param>
            <returns> Returns the number of line break characters, '\n', in a string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.CalcTextBox(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Point2D,System.String)">
            <summary>
             This method calculates the bounding box, in window device coordinates, for the current text object. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="p"> The starting position of the justified string. </param>
            <param name="s"> The text object string. </param>
            <returns> Returns a rectangle that is the bounding box of a single or multi-line string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextBox">
            <summary>
             This method returns the bounding box, in window device coordinates, for the current text object.  
             The text object must have already been drawn at its current location. 
            </summary>
            <returns> Returns a rectangle that is the bounding box of a single or multi-line string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.DrawTextBox(System.Drawing.Graphics)">
            <summary>
             This method draws the bounding box for the current text object.  The text object must have already been 
             drawn at its current location. 
            </summary>
            <returns> Draws a rectangle that is the bounding box of a single or multi-line string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetTextDimension(System.Drawing.Graphics,System.String)">
            <summary>
             Returns the height and width of the text object, taking into account multi-line  text. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="s"> The text string. </param>
            <returns> Returns the height and width of the text object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetMultilineSubstring(System.String,System.Int32)">
            <summary>
             This method returns the substring at a specific line index in a multi-line string. 
            </summary>
            <param name="s"> The text object string. </param>
            <param name="line"> The line index. </param>
            <returns> Returns the substring at a specific line index in a multi-line string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.GetMaxMultilineStringWidth(System.Drawing.Graphics,System.String)">
            <summary>
             Returns the maximum width of the lines in a mult-line string. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="s"> The text string. </param>
            <returns> Returns the maximum width of the lines in a multi-line string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.PreCalcTextBoundingBox(System.Drawing.Graphics)">
            <summary>
             It is necessary in the axis label routines to pre-calculate the text bounding  box the text object before 
             it is actually displayed, so that a test can  be made to see if the text object intersects any other 
             text objects. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.SetResizedTextFont">
            <summary>
              Establishes the resized text font as the current font. 
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.DrawText(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. It creates a rotated font transform, calculates  the starting position 
              of the justified text string, sets foreground and  background colors, then draws the string to the 
              specified graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance of 
              the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartText.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. It creates a rotated font transform, calculates  the starting position of 
              the justified text string, sets foreground and  background colors, then draws the string to the specified 
              graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartText.XJust">
            <summary>
              Set/Get the horizontal justification of the text. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartText.YJust">
            <summary>
              Set/Get the vertical justification of the text. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartText.TextFont">
            <summary>
              Set/Get the font of the text. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartText.TextString">
            <summary>
             Set/Get the current text string. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartText.TextRotation">
            <summary>
              Set/Get the rotation of the text in the normal viewing plane. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartText.TextNudge">
            <summary>
              Set/Get the xy values of the textNudge property.  The textNudge property moves the relative position, 
              using window device coordinates,  of the text relative to the specified location of the text. 
            </summary>
            
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartText.TextBgColor">
            <summary>
              Set/Get the color of the background rectangle under the text, if the textBgMode is true. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartText.TextBgMode">
            <summary>
              Set/Get the text background color mode. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartText.TextBoxMode">
            <summary>
              Set/Get the text bounding box color. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartText.TextBoxColor">
            <summary>
              Set/Get if the text bounding box is drawn in the text box color. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AxisLabels.baseAxis">
            <summary>
             Holds a reference to underlying axis (Axis) object
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AxisLabels.axisLabelsDir">
            <summary>
             Specifies the justification, AXIS_MAX or AXIS_MIN, of the axis labels with respect to the axis tick marks.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AxisLabels.axisLabelsEnds">
            <summary>
             Specifies whether there should be labels for the axis minimum (LABEL_MIN), maximum (LABEL_MAX) or tick mark 
              starting point (LABEL_ORIGIN). The value of these constants can be OR'd together. 
              The value  of LABEL_MIN | LABEL_MAX | LABEL_ORIGIN is LABEL_ALL
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AxisLabels.axisLabelsTickOffsetX">
            <summary>
             Specifies the x-offset, in window device coordinates, of the label offset from the 
             endpoint of the associated tick mark.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AxisLabels.axisLabelsTickOffsetY">
            <summary>
             Specifies the y-offset, in window device coordinates, of the label offset from the endpoint 
             of the associated tick mark.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AxisLabels.axisLabelsFormat">
            <summary>
             Specifies the numeric format for axis labels. Use one of the numeric format  constants: 
             DECIMALFORMAT, SCIENTIFICFORMAT, EXPONENTFORMAT, BUSINESSFORMAT, ENGINEERINGFORMAT, 
             PERCENTFORMAT,  CURRENCYFORMAT , CURRENCYBUSINESSFORMAT for numeric labels  
             or one of the time format constants:  
            	TIMEDATEFORMAT_MSDDD, TIMEDATEFORMAT_MSDD, 
            TIMEDATEFORMAT_MSD, TIMEDATEFORMAT_MS, TIMEDATEFORMAT_12HMSDD, TIMEDATEFORMAT_12HMSD, 
            TIMEDATEFORMAT_12HMS, TIMEDATEFORMAT_12HM, TIMEDATEFORMAT_24HMSDD, TIMEDATEFORMAT_24HMSD,
             TIMEDATEFORMAT_24HMS, TIMEDATEFORMAT_24HM, TIMEDATEFORMAT_STANDARD, TIMEDATEFORMAT_MDY,
             TIMEDATEFORMAT_DMY, TIMEDATEFORMAT_MY, TIMEDATEFORMAT_Q, TIMEDATEFORMAT_MMMM, 
             TIMEDATEFORMAT_MMM, TIMEDATEFORMAT_M, TIMEDATEFORMAT_DDDD, TIMEDATEFORMAT_DDD, 
             TIMEDATEFORMAT_D, TIMEDATEFORMAT_Y, TIMEDATEFORMAT_MDY2000, TIMEDATEFORMAT_DMY2000, 
             TIMEDATEFORMAT_MY2000, TIMEDATEFORMAT_Y2000   
             for time labels
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AxisLabels.lastLabelBoundingBox">
            <summary>
             Holds the rectangular coordinates of the bounding box of the most previously drawn  tick mark label. 
             If the current tick mark label bounding box overlaps the lastLabelBoundingBox,  
             and the overlapLabelMode==OVERLAP_Constants.LABEL_DELETE, the drawing of the label is skipped 
              to prevent the tick mark labels from overwriting the same area.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AxisLabels.overlapLabelMode">
            <summary>
             Specifies if a tick mark label should be skipped if it overlaps the previous tick mark label.  
             Use one of the tick mark overlap label constants: OVERLAP_LABEL_DRAW, OVERLAP_LABEL_DELETE.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.#ctor">
            <summary>
             The default AxisLabels constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.ErrorCheck(System.Int32)">
            <summary>
              Checks the current axis labels object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.InitDefaults">
            <summary>
              Initializes default values for the axis labels.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.#ctor(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              This constructor creates a new AxisLabels object based on the specified axis. 
            </summary>
            <param name="baseaxis"> The AxisLabels object uses the tick marks  defined for this axis to locate 
            the axis labels on the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetAxisLabels(System.Drawing.Font,System.Double,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
              Initializes the attributes of an AxisLabels object. 
            </summary>
            <param name="font"> The font object used to display the axis label text. </param>
            <param name="rotation"> The rotation, in degrees, of label text in the normal viewing plane. </param>
            <param name="labdir"> The justification of the axis label (AXIS_MIN or AXIS_MAX) with  respect to the 
            tick mark endpoint. </param>
            <param name="labelends"> Specifies whether there should be labels for the axis minimum (LABEL_MIN), 
            maximum (LABEL_MAX) or tick mark  starting point (LABEL_ORIGIN). The value of these constants can be 
            OR'd together. The value  of LABEL_MIN | LABEL_MAX | LABEL_ORIGIN is LABEL_ALL </param>
            <param name="labcolor"> The color of the label text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetAxisLabels(System.Double,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
              Initializes the attributes of an AxisLabels object. 
            </summary>
            <param name="rotation"> The rotation of label text in the normal viewing plane. </param>
            <param name="labdir"> The justification of the axis label (AXIS_MIN or AXIS_MAX) with  respect to the 
            tick mark endpoint. </param>
            <param name="labelends"> Specifies whether there should be labels for the axis minimum (LABEL_MIN), 
            maximum (LABEL_MAX) or tick mark  starting point (LABEL_ORIGIN). The value of these constants can be 
            OR'd together. The value  of LABEL_MIN | LABEL_MAX | LABEL_ORIGIN is LABEL_ALL </param>
            <param name="labcolor"> The color of the label text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetAxisLabels(System.Drawing.Font,System.Drawing.Color)">
            <summary>
              Initializes the attributes of an AxisLabels object. 
            </summary>
            <param name="font"> The font object used to display the axis label text. </param>
            <param name="labcolor"> The color of the label text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.Copy(com.quinncurtis.chart2dnet.AxisLabels)">
            <summary>
              Copies the source axis labels. 
            </summary>
            <param name="source"> The source axis labels object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.AdjustForLabelRotation(com.quinncurtis.chart2dnet.ChartText,System.Int32)">
            <summary>
              The rotation of an axis label affects the text justification parameters  associated with it. 
              This function modifies the text justification  of the axis label ChartText object, taking into 
              account the label  rotation.
            </summary>
            <param name="textobj"> The ChartText object used to position and draw the axis label.</param>
            <param name="axistype"> The axis type: either the X_AXIS or the Y_AXIS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.CalcAxisLabelsJust(com.quinncurtis.chart2dnet.ChartText)">
            <summary>
              Calculates and then sets the justification parameters for the text object used as an axis label. 
            </summary>
            <param name="textobj"> The text object used as an axis label.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.OutAxisLabel(System.Drawing.Graphics,com.quinncurtis.chart2dnet.ChartLabel,com.quinncurtis.chart2dnet.TickMark)">
            <summary>
              Outputs a text object at specific tick mark. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="textobj"> The text object used as an axis label. </param>
            <param name="ticmark"> The tick mark that the text label is place at.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.GetBaseAxis">
            <summary>
              Gets the base axis associated with this axis labels object. 
            </summary>
            <returns> Returns the base axis associated with this axis labels object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetBaseAxis(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              Sets the base axis associated with this axis labels object. 
            </summary>
            <param name="baseaxis"> Sets the base axis associated with this axis labels object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetAxisLabelsDecimalPos(System.Int32)">
            <summary>
             Sets the number of digits to the right of the decimal point for numeric axis labels. 
            </summary>
            <param name="decimalpos"> Sets the number of digits to the right of the decimal point for numeric axis labels.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.GetAxisLabelsFormat(com.quinncurtis.chart2dnet.TickMark)">
            <summary>
             Returns the numeric format for the axis labels. 
            </summary>
            <param name="tickmark"> The tick mark that the text label is place at. </param>
            <returns> Returns the numeric format for the axis labels.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.CalcAutoAxisLabels">
            <summary>
              The abstract CalcAutoAxisLabels method needs to be implemented in any  subclasses of this class. 
              This method automatically selects the properties  for the axis labels, based on the axis labels 
              type and the base axis  of the axis labels.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.GetCompatibleLabel">
            <summary>
              The abstract GetCompatibleLabel method needs to be implemented in any  subclasses of this class. 
              This method returns an ChartLabel object  compatible with the labels objects used for the axis labels. 
            </summary>
            <returns> Returns an ChartLabel object  compatible with the labels objects used for the axis labels.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetAxisLabelsTickOffsetX(System.Double)">
            <summary>
              Sets the x-offset, in window device coordinates, of the label offset from the endpoint of the associated 
              tick mark. 
            </summary>
            <param name="offset"> Sets the x-offset, in window device coordinates, of the label offset from the 
            endpoint of the associated tick mark. .</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetAxisLabelsTickOffsetY(System.Double)">
            <summary>
              Sets the y-offset, in window device coordinates, of the label offset from the endpoint of the associated 
              tick mark. 
            </summary>
            <param name="offset"> Sets the y-offset, in window device coordinates, of the label offset from the 
            endpoint of the associated tick mark. .</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetAxisLabelsDir(System.Int32)">
            <summary>
              Sets the justification of the axis labels with respect to the axis tick marks. 
            </summary>
            <param name="labdir"> Sets the justification, AXIS_MAX or AXIS_MIN, of the axis labels with respect 
            to the axis tick marks.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetAxisLabelsEnds(System.Int32)">
            <summary>
              Sets whether there should be labels for the axis minimum (LABEL_MIN), maximum (LABEL_MAX) or tick mark 
               starting point (LABEL_ORIGIN). The value of these constants can be OR'd together. The value 
                of LABEL_MIN | LABEL_MAX | LABEL_ORIGIN is LABEL_ALL 
            </summary>
            <param name="labelends"> Sets whether there should be labels for the axis minimum (LABEL_MIN), maximum 
            (LABEL_MAX) or tick mark  starting point (LABEL_ORIGIN). The value of these constants can be OR'd together. 
            The value  of LABEL_MIN | LABEL_MAX | LABEL_ORIGIN is LABEL_ALL.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.GetAxisLabelsTickOffsetX">
            <summary>
              Gets the x-offset of the label offset from the endpoint of the associated tick mark. 
            </summary>
            <returns> Returns the x-offset, in window device coordinates, of the label offset from the endpoint 
            of the associated tick mark. .</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.GetAxisLabelsTickOffsetY">
            <summary>
              Gets the y-offset of the label offset from the endpoint of the associated tick mark. 
            </summary>
            <returns> Returns the y-offset, in window device coordinates, of the label offset from the endpoint of 
            the associated tick mark. .</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.GetAxisLabelsDir">
            <summary>
              Gets the justification of the axis labels with respect to the axis tick marks. 
            </summary>
            <returns> Returns the justification, AXIS_MAX or AXIS_MIN, of the axis labels with respect to the 
            axis tick marks.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.GetAxisLabelsEnds">
            <summary>
              Returns whether there should be labels for the axis minimum (LABEL_MIN), maximum (LABEL_MAX) or tick mark  
              starting point (LABEL_ORIGIN).
            </summary>
            <returns> Returns the value of the axisLabelsEnds field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetAxisLabelsFormat(System.Int32)">
            <summary>
             Sets the numeric format for the axis labels. 
            </summary>
            <param name="format"> Sets the numeric format for the axis labels. Use 
            one of the numeric format  constants: DECIMALFORMAT, SCIENTIFICFORMAT, EXPONENTFORMAT, 
            BUSINESSFORMAT, ENGINEERINGFORMAT, PERCENTFORMAT,  CURRENCYFORMAT , CURRENCYBUSINESSFORMAT 
            for numeric labels  or one of the time format constants:  TIMEDATEFORMAT_MSDDD, TIMEDATEFORMAT_MSDD, 
            TIMEDATEFORMAT_MSD, TIMEDATEFORMAT_MS, TIMEDATEFORMAT_12HMSDD, TIMEDATEFORMAT_12HMSD, 
            TIMEDATEFORMAT_12HMS, TIMEDATEFORMAT_12HM, TIMEDATEFORMAT_24HMSDD, TIMEDATEFORMAT_24HMSD,
             TIMEDATEFORMAT_24HMS, TIMEDATEFORMAT_24HM, TIMEDATEFORMAT_STANDARD, TIMEDATEFORMAT_MDY,
             TIMEDATEFORMAT_DMY, TIMEDATEFORMAT_MY, TIMEDATEFORMAT_Q, TIMEDATEFORMAT_MMMM, 
             TIMEDATEFORMAT_MMM, TIMEDATEFORMAT_M, TIMEDATEFORMAT_DDDD, TIMEDATEFORMAT_DDD, 
             TIMEDATEFORMAT_D, TIMEDATEFORMAT_Y, TIMEDATEFORMAT_MDY2000, TIMEDATEFORMAT_DMY2000, 
             TIMEDATEFORMAT_MY2000, TIMEDATEFORMAT_Y2000  
            for time labels</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.GetAxisLabelsFormat">
            <summary>
             Returns the numeric format for the axis labels. 
            </summary>
            <returns> Returns the numeric format for the axis labels. Numeric format  constants: 
            DECIMALFORMAT, SCIENTIFICFORMAT, EXPONENTFORMAT, BUSINESSFORMAT, ENGINEERINGFORMAT, 
            PERCENTFORMAT,  CURRENCYFORMAT , CURRENCYBUSINESSFORMAT for numeric labels  
            or one of the time format constants:  
             TIMEDATEFORMAT_MSDDD, TIMEDATEFORMAT_MSDD, 
            TIMEDATEFORMAT_MSD, TIMEDATEFORMAT_MS, TIMEDATEFORMAT_12HMSDD, TIMEDATEFORMAT_12HMSD, 
            TIMEDATEFORMAT_12HMS, TIMEDATEFORMAT_12HM, TIMEDATEFORMAT_24HMSDD, TIMEDATEFORMAT_24HMSD,
             TIMEDATEFORMAT_24HMS, TIMEDATEFORMAT_24HM, TIMEDATEFORMAT_STANDARD, TIMEDATEFORMAT_MDY,
             TIMEDATEFORMAT_DMY, TIMEDATEFORMAT_MY, TIMEDATEFORMAT_Q, TIMEDATEFORMAT_MMMM, 
             TIMEDATEFORMAT_MMM, TIMEDATEFORMAT_M, TIMEDATEFORMAT_DDDD, TIMEDATEFORMAT_DDD, 
             TIMEDATEFORMAT_D, TIMEDATEFORMAT_Y, TIMEDATEFORMAT_MDY2000, TIMEDATEFORMAT_DMY2000, 
             TIMEDATEFORMAT_MY2000, TIMEDATEFORMAT_Y2000 
            for time labels</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.SetOverlapLabelMode(System.Int32)">
            <summary>
             It is possible that axis labels overlap if the window that the axes are  placed in is to small, the 
             major tick marks are to close together, or in the case  of time axis labels, to large for the 
             current tick mark spacing.  A test can be performed in the software to not display labels to overlap. 
            </summary>
            <param name="overlapmode"> Set this mode using one of the axis label overlap constants: 
            OVERLAP_LABEL_DRAW, OVERLAP_LABEL_DELETE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisLabels.GetOverlapLabelMode">
            <summary>
             Returns the axis labels overlap mode. 
            </summary>
            <returns> Returns the axis labels overlap mode.  Returns one of the axis label overlap constants: 
            OVERLAP_LABEL_DRAW, OVERLAP_LABEL_DELETE.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AxisLabels.AxisLabelsTickOffsetX">
            <summary>
              Set/Get the x-offset, in window device coordinates, of the label offset from the endpoint of 
              the associated tick mark. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AxisLabels.AxisLabelsTickOffsetY">
            <summary>
              Set/Get the y-offset, in window device coordinates, of the label offset from the endpoint of the 
              associated tick mark. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AxisLabels.AxisLabelsDir">
            <summary>
              Set/Get the justification of the axis labels with respect to the axis tick marks. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AxisLabels.AxisLabelsEnds">
            <summary>
              Set/Get whether there should be labels for the axis minimum (LABEL_MIN), maximum (LABEL_MAX) or 
              tick mark  starting point (LABEL_ORIGIN). The value of these constants can be OR'd together. 
              The value  of LABEL_MIN | LABEL_MAX | LABEL_ORIGIN is LABEL_ALL 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AxisLabels.AxisLabelsFormat">
            <summary>
             Set/Get the numeric format for the axis labels. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AxisLabels.OverlapLabelMode">
            <summary>
             It is possible that axis labels overlap if the window that the axes are  placed in is to small, 
             the major tick marks are to close together, or in the case  of time axis labels, to large for the 
             current tick mark spacing.  A test can be performed in the software to not display labels to overlap. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AxisLabels.BaseAxis">
            <summary>
             Holds a reference to underlying axis (Axis) object
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AxisLabels.LastLabelBoundingBox">
            <summary>
             Holds the rectangular coordinates of the bounding box of the most previously drawn  tick mark label. 
             If the current tick mark label bounding box overlaps the lastLabelBoundingBox,  
             and the overlapLabelMode==OVERLAP_Constants.LABEL_DELETE, the drawing of the label is skipped 
              to prevent the tick mark labels from overwriting the same area.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.AxisTitle">
            <summary>
              The AxisTitle class manages and displays an axis title.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.AxisTitle.titleAxis">
            <summary>
             Holds a reference to underlying axis (Axis) object
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.#ctor">
            <summary>
              The default AxisTitle constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.ErrorCheck(System.Int32)">
            <summary>
              Checks the current axis title object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.InitDefaults">
            <summary>
              Initializes default values for the axis title.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.Copy(com.quinncurtis.chart2dnet.AxisTitle)">
            <summary>
              Copies the source axis title. 
            </summary>
            <param name="source"> The source axis title object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.Clone">
            <summary>
             Returns an object that is a clone of this AxisTitle object. 
            </summary>
            <returns> Returns a clone of this AxisTitle object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.SetAxisTitle(com.quinncurtis.chart2dnet.Axis,System.Drawing.Font,System.String)">
            <summary>
              Initializes the values of an AxisTitle object. 
            </summary>
            <param name="axis"> The base axis this title is associated with. </param>
            <param name="thefont"> The font object used to display the axis title. </param>
            <param name="s"> Sets the title string.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.#ctor(com.quinncurtis.chart2dnet.Axis,System.Drawing.Font,System.String)">
            <summary>
              This constructor creates a new AxisTitle object using the specified  axis, font and title string. 
            </summary>
            <param name="axis"> The base axis this title is associated with. </param>
            <param name="thefont"> The font object used to display the axis title. </param>
            <param name="s"> Sets the title string.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.JustifyTitlePos(System.Drawing.Graphics)">
            <summary>
              Sets the final position of the title based on current justification parameters. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.GetTitleAxis">
            <summary>
              Returns the underlying axis of the axis title. 
            </summary>
            <returns> Returns the underlying axis of the axis title.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.SetTitleAxis(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              Sets the underlying axis of the axis title. 
            </summary>
            <param name="axis"> Sets the underlying axis of the axis title.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.AxisTitle.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. The position of the  title is calculated and output using the super 
              class  (ChartText) draw method. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.AxisTitle.TitleAxis">
            <summary>
              Get/Set the minor tick mark spacing. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Background">
            <summary>
              The Background manages and displays the background of the graph area and  the plotting area of the chart.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Background.backgroundType">
            <summary>
             Specifies the background type. Use one of the Chart background type constants:  PLOT_BACKGROUND or 
             GRAPH_BACKGROUND. Specifying the PLOT_BACKGROUND type fills the plotting  area of the chart, while 
             specifying the GRAPH_BACKGROUND type fills the entire  graph area of the chart.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Background.backgroundMode">
            <summary>
             Specifies the background fill mode. Use one of the Chart background fill constants:  USERTEXTUREMODE, 
             USERGRADIENTMODE, SIMPLEGRADIENTMODE or SIMPLECOLORMODE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Background.gradientStartColor">
            <summary>
             Holds the starting color value associated with the simple gradient mode,  backgroundMode= SIMPLEGRADIENTMODE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Background.gradientStopColor">
            <summary>
             Holds the ending color value associated with the simple gradient mode,  backgroundMode= SIMPLEGRADIENTMODE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Background.gradientDirection">
            <summary>
             Holds the gradient direction associated with the simple gradient mode,  backgroundMode= SIMPLEGRADIENTMODE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Background.roundedRectCornerWidth">
            <summary>
             Specifies the corner rounding for rounded background.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Background.roundedRectCornerHeight">
            <summary>
             Specifies the corner rounding for rounded background.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Background.barWidth">
            <summary>
             Specifies the bar width of the two color bar background in normalized chart or normalized plot coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Background.backgroundTexture">
            <summary>
             Holds a reference to a user defined texture.
            </summary>		
            
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Background.backgroundGradient">
            <summary>
             Holds a reference to a gradient, either user defined or internally generated,  depending on the mode.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.#ctor">
            <summary>
              The default Background constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.InitDefaults">
            <summary>
              Initializes default values for the chart background.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.ErrorCheck(System.Int32)">
            <summary>
              Checks the current background object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.Copy(com.quinncurtis.chart2dnet.Background)">
            <summary>
              Copies the source chart background. 
            </summary>
            <param name="source"> The source chart background object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.Clone">
            <summary>
             Returns an object that is a clone of this Background object. 
            </summary>
            <returns> Returns a clone of this Background object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.InitBackground(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Drawing.Color)">
            <summary>
              This method initializes a simple Background object that uses the specified  chart scale, background type 
              and color. The resulting background is a solid  rectangle filled using the specified color. 
            </summary>
            <param name="transform"> The scale associated with the chart background. </param>
            <param name="bgtype"> The chart background type. Use one of the chart background type constants:  
            PLOT_BACKGROUND or GRAPH_BACKGROUND. Specifying the PLOT_BACKGROUND type fills the plotting  area 
            of the chart, while specifying the GRAPH_BACKGROUND type fills the entire  graph area of the chart. </param>
            <param name="bgcolor"> The background fill color.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Drawing.Color)">
            <summary>
              This constructor creates a simple Background object that uses the specified  chart scale, background type 
              and color. The resulting background is a solid  rectangle filled using the specified color. 
            </summary>
            <param name="transform"> The scale associated with the chart background. </param>
            <param name="bgtype"> The chart background type. Use one of the chart background type constants:  
            PLOT_BACKGROUND or GRAPH_BACKGROUND. Specifying the PLOT_BACKGROUND type fills the plotting  area 
            of the chart, while specifying the GRAPH_BACKGROUND type fills the entire  graph area of the chart. </param>
            <param name="bgcolor"> The background fill color.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Drawing.Drawing2D.LinearGradientBrush)">
            <summary>
              This constructor creates an Background object that uses the specified  chart scale, background type 
              and gradient. The resulting background is a rectangle  filled using the specified user-defined gradient. 
            </summary>
            <param name="transform"> The scale associated with the chart background. </param>
            <param name="bgtype"> The chart background type. Use one of the chart background type constants:  
            PLOT_BACKGROUND or GRAPH_BACKGROUND. Specifying the PLOT_BACKGROUND type fills the plotting  area of 
            the chart, while specifying the GRAPH_BACKGROUND type fills the entire  graph area of the chart. </param>
            <param name="gradient"> The user defined background gradient.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Drawing.TextureBrush)">
            <summary>
              This constructor creates an Background object that uses the specified  chart scale, background type and 
              texture. The resulting background is a rectangle  filled using the specified user-defined texture. 
            </summary>
            <param name="transform"> The scale associated with the chart background. </param>
            <param name="bgtype"> The chart background type. Use one of the chart background type constants:  
            PLOT_BACKGROUND or GRAPH_BACKGROUND. Specifying the PLOT_BACKGROUND type fills the plotting  area of 
            the chart, while specifying the GRAPH_BACKGROUND type fills the entire  graph area of the chart. </param>
            <param name="texture"> The user defined background texture.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
              This constructor creates an Background object that uses the specified  chart scale, background type and 
              gradient. The resulting background is a rectangle  filled using a gradient that is created using the 
              specified starting, ending and  direction parameters. 
            </summary>
            <param name="transform"> The scale associated with the chart background. </param>
            <param name="bgtype"> The chart background type. Use one of the chart background type constants:  
            PLOT_BACKGROUND or GRAPH_BACKGROUND. Specifying the PLOT_BACKGROUND type fills the plotting  area of the 
            chart, while specifying the GRAPH_BACKGROUND type fills the entire  graph area of the chart. </param>
            <param name="startcolor"> Specifies the starting color value of the gradient. </param>
            <param name="stopcolor"> Specifies the ending color value of the gradient. </param>
            <param name="dir"> Specifies the direction of the gradient.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Double,System.Int32)">
            <summary>
              This constructor creates an Background object that uses the specified  chart scale, background type and 
              gradient. The resulting background is a rectangle  filled using a two color alternating that is created using the 
              specified colors, bar width and  direction parameters. 
            </summary>
            <param name="transform"> The scale associated with the chart background. </param>
            <param name="bgtype"> The chart background type. Use one of the chart background type constants:  
            PLOT_BACKGROUND or GRAPH_BACKGROUND. Specifying the PLOT_BACKGROUND type fills the plotting  area of the 
            chart, while specifying the GRAPH_BACKGROUND type fills the entire  graph area of the chart. </param>
            <param name="color1"> Specifies the first color of the two color bar background. </param>
            <param name="color2"> Specifies the second color of the two color bar background. </param>
            <param name="barwidth"> Specifies the bar width of the background bars. </param>
            <param name="dir"> Specifies the direction of the gradient.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.AltBarDraw(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Rectangle2D,System.Drawing.Brush,System.Drawing.Brush)">
            <summary>
              The draw method the ALTBARMODE background mode. The background is drawn as
              alternating stripes, using the two specified colors (stored in gradientStartColor,
              and gradientStopColor properties.
            </summary>
            <param name="g2"> The graphics context.</param>
            <param name="bgrect"> The overall backgound rectangle.</param>
            <param name="brush1"> The first of the two bar brushes.</param>
            <param name="brush2"> The second of the two bar brushes.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. In the SIMPLECOLORMODE mode, the background  rectangle is filled using 
              the objects rgbPrimaryColor value. In the  SIMPLEGRADIENTMODE mode, a LinearGradientBrush object is 
              created using the  gradientStartColor, gradientStopColor and gradientDirection parameters.  
              In the USERGRADIENTMODE mode, the user supplied LinearGradientBrush object is used to fill  the 
              background rectangle. In the USERTEXTUREMODE mode, the user supplied  TextureBrush object is used to 
              fill the background rectangle. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.DrawBackground(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. In the SIMPLECOLORMODE mode, the background  rectangle is filled using 
              the objects rgbPrimaryColor value. In the  SIMPLEGRADIENTMODE mode, a LinearGradientBrush object is 
              created using the  gradientStartColor, gradientStopColor and gradientDirection parameters.  
              In the USERGRADIENTMODE mode, the user supplied LinearGradientBrush object is used to fill  the 
              background rectangle. In the USERTEXTUREMODE mode, the user supplied  TextureBrush object is used to 
              fill the background rectangle. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects a background object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Returns the nearest point data associated with test.</param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.GetBackgroundType">
            <summary>
              Returns the background type. 
            </summary>
            <returns> Returns the background type: PLOT_BACKGROUND or GRAPH_BACKGROUND.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.GetBackgroundMode">
            <summary>
              Returns the background mode. 
            </summary>
            <returns>  Returns the background mode:  USERTEXTUREMODE, USERGRADIENTMODE, SIMPLEGRADIENTMODE or 
            SIMPLECOLORMODE.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.GetGradientStartColor">
            <summary>
              Returns the starting color of the gradient used when the SIMPLEGRADIENTMODE mode is selected. 
            </summary>
            <returns> Returns the starting color of the gradient used when the SIMPLEGRADIENTMODE mode is selected.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.GetGradientStopColor">
            <summary>
              Returns the ending color of the gradient used when the SIMPLEGRADIENTMODE mode is selected. 
            </summary>
            <returns> Returns the ending color of the gradient used when the SIMPLEGRADIENTMODE mode is selected.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.GetGradientDirection">
            <summary>
              Returns the gradient direction used when the SIMPLEGRADIENTMODE mode is selected. 
            </summary>
            <returns> Returns the gradient direction used when the SIMPLEGRADIENTMODE mode is selected.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.SetBackgroundType(System.Int32)">
            <summary>
              Sets the background type. 
            </summary>
            <param name="backgroundtype"> Sets the background type. Use one of the Chart background type constants:  
            PLOT_BACKGROUND or GRAPH_BACKGROUND.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.SetGradientStartColor(System.Drawing.Color)">
            <summary>
              Sets the starting color of a gradient used when the SIMPLEGRADIENTMODE mode is selected.  This should 
              only be used to change an existing gradient under the SIMPLEGRADIENTMODE mode.  
            </summary>
            <param name="color"> Sets the starting color of a gradient used when the SIMPLEGRADIENTMODE mode is selected.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.SetGradientStopColor(System.Drawing.Color)">
            <summary>
              Sets the ending color of a gradient used when the SIMPLEGRADIENTMODE mode is selected.  This should 
              only be used to change an existing gradient under the SIMPLEGRADIENTMODE mode. 
            </summary>
            <param name="color"> Sets the ending color of a gradient used when the SIMPLEGRADIENTMODE mode is selected.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.SetGradientDirection(System.Int32)">
            <summary>
              Sets the gradient direction used when the SIMPLEGRADIENTMODE mode is selected.  This should only be 
              used to change an existing gradient under the SIMPLEGRADIENTMODE mode. 
            </summary>
            <param name="gradientdir"> Sets the gradient direction of a gradient used when the SIMPLEGRADIENTMODE 
            mode is selected.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.SetBackgroundTexture(System.Drawing.TextureBrush)">
            <summary>
              Sets the user-defined texture used when the USERTEXTUREMODE mode is selected.  This should only be 
              used to change an existing texture under the USERTEXTUREMODE mode. 
            </summary>
            <param name="texture"> References a user defined texture used when the USERTEXTUREMODE mode is selected.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.SetBackgroundGradient(System.Drawing.Drawing2D.LinearGradientBrush)">
            <summary>
              Sets the user-defined gradient used when the USERGRADIENTMODE mode is selected.  This should only be 
              used to change an existing texture under the USERGRADIENTMODE mode. 
            </summary>
            <param name="gradient"> References a user defined gradient used when the USERGRADIENTMODE mode is selected.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.GetBackgroundTexture">
            <summary>
              Returns the user-defined texture used when the USERTEXTUREMODE mode is selected. 
            </summary>
            <returns> Returns a reference to the user defined gradient used when the USERTEXTUREMODE mode is selected.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Background.GetBackgroundGradient">
            <summary>
              Returns the user-defined gradient used when the USERGRADIENTMODE mode is selected. 
            </summary>
            <returns> Returns a reference to the user defined gradient used when the USERGRADIENTMODE mode is selected.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Background.BackgroundType">
            <summary>
              Get/Set the background type. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Background.BackgroundMode">
            <summary>
              Get/Set the background mode. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Background.GradientStartColor">
            <summary>
              Get/Set the starting color of the gradient used when the SIMPLEGRADIENTMODE mode is selected. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Background.GradientStopColor">
            <summary>
              Get/Set the ending color of the gradient used when the SIMPLEGRADIENTMODE mode is selected. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Background.GradientDirection">
            <summary>
              Get/Set the gradient direction used when the SIMPLEGRADIENTMODE mode is selected. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Background.BarWidth">
            <summary>
              Get/Set the barwidth used when the ALTBARMODE mode is selected. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Background.FillColor">
            <summary>
              Get/Set the barwidth used when the ALTBARMODE mode is selected. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Background.BackgroundTexture">
            <summary>
              Get/Set the user-defined texture used when the USERTEXTUREMODE mode is selected. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Background.BackgroundGradient">
            <summary>
              Get/Set the user-defined gradient used when the USERGRADIENTMODE mode is selected. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.BarDatapointValue">
            <summary>
              The BarDatapointValue class is used by the plotting routines to display  numeric values on top of or 
              inside bars in simple and group bar plots.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.NumericLabel">
            <summary>
             The NumericLabel class is used to format floating point numbers  as strings and position in a chart.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartLabel">
            <summary>
             The ChartLabel is an abstract base class for chart label objects that are  used to place 
             formatted text in a chart.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartLabel.#ctor">
            <summary>
             The default ChartLabel constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartLabel.ErrorCheck(System.Int32)">
            <summary>
              Checks the current ChartLabel object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartLabel.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new ChartLabel object using the specified scale. 
            </summary>
            <param name="transform"> The label object is placed in the coordinate system 
            defined by transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartLabel.SetLabels(System.Drawing.Font,System.Double,System.Drawing.Color)">
            <summary>
              This method initializes an ChartLabel using the specified  font, rotation and color. 
            </summary>
            <param name="font"> A reference to a Font object. </param>
            <param name="rotation"> The rotation (-360 to 360 degrees) of the text in the normal 
            viewing plane. </param>
            <param name="labcolor"> The color of the label.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartLabel.MakeLabel">
            <summary>
              This method formats the converts the underlying label value to  a string and stores the result in 
              the textString field. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartLabel.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartLabel.Copy(com.quinncurtis.chart2dnet.ChartLabel)">
            <summary>
              Copies the source label object. 
            </summary>
            <param name="source"> The source label object.</param>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NumericLabel.numericValue">
            <summary>
             The numeric value of the label.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NumericLabel.numericFormat">
            <summary>
             The numeric format of the label. Use one of the numeric format constants:  DECIMALFORMAT, 
             SCIENTIFICFORMAT, BUSINESSFORMAT, ENGINEERINGFORMAT,  PERCENTFORMAT, CURRENCYBUSINESSFORMAT, 
             CURRENCYFORMAT and EXPONENTFORMAT.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NumericLabel.decimalPos">
            <summary>
             The number of digits to display to the right of the decimal point.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NumericLabel.numStrFormatPostfix">
            <summary>
             The postfix characters used in the ENGINEERINGFORMAT numeric format to  shorten the text used to 
             display large numbers, for example thousands, millions,  billions and trillions.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NumericLabel.mantissaStr">
            <summary>
             Local variables used to separate the mantissa and exponent of a number  in order to display it in the 
             EXPONENTFORMAT format.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NumericLabel.expStr">
            <summary>
             Local variables used to separate the mantissa and exponent of a number  in order to display it in the 
             EXPONENTFORMAT format.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.#ctor">
            <summary>
             The default NumericLabel constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.ErrorCheck(System.Int32)">
            <summary>
              Checks the NumericLabel object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new NumericLabel object using the specified scale. 
            </summary>
            <param name="transform"> The text object is placed in the coordinate system defined by transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
              This method initializes an NumericLabel using the specified scale,  font, initial value, position, 
              position type, format, decimal precision, justification and rotation. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="initialvalue1"> The initial value of the numeric label. </param>
            <param name="x"> Specifies the x-value of the text position </param>
            <param name="y"> Specifies the y-value of the text position </param>
            <param name="npostype"> Specifies the if the position of the text is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants:DEV_POS,PHYS_POS, 
            NORM_GRAPH_POS,NORM_PLOT_POS. </param>
            <param name="nnumformat"> Specifies the numeric format of the label. Use one of the  numeric format 
            constants : DECIMALFORMAT, SCIENTIFICFORMAT, BUSINESSFORMAT, ENGINEERINGFORMAT,  PERCENTFORMAT, 
            CURRENCYBUSINESSFORMAT, CURRENCYFORMAT and EXPONENTFORMAT. </param>
            <param name="ndecimal"> The number of digits to display to the right of the decimal point. </param>
            <param name="xjust"> Specifies the horizontal justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER orJUSTIFY_MAX. </param>
            <param name="yjust"> Specifies the vertical justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER orJUSTIFY_MAX. </param>
            <param name="rotation"> The rotation (-360 to 360 degrees) of the text in the normal viewing plane.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
              This method initializes an Text using the specified scale,  font, initial value, position, position type, 
              format and decimal precision. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="initialvalue1"> The initial value of the numeric label. </param>
            <param name="x"> Specifies the x-value of the text position </param>
            <param name="y"> Specifies the y-value of the text position </param>
            <param name="npostype"> Specifies the if the position of the text is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants:DEV_POS,PHYS_POS, 
            NORM_GRAPH_POS,NORM_PLOT_POS. </param>
            <param name="nnumformat"> Specifies the numeric format of the label. Use one of the  numeric format 
            constants : DECIMALFORMAT, SCIENTIFICFORMAT, BUSINESSFORMAT, ENGINEERINGFORMAT,  PERCENTFORMAT, 
            CURRENCYBUSINESSFORMAT, CURRENCYFORMAT and EXPONENTFORMAT. </param>
            <param name="ndecimal"> The number of digits to display to the right of the decimal point.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.#ctor(System.Drawing.Font,System.Int32,System.Int32)">
            <summary>
              This method initializes an ChartText using the specified font, numeric format and decimal precision.  
              It is not usable for display purposes because it does not reference a scaling system. 
            </summary>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="nnumformat"> Specifies the numeric format of the label. Use one of the  numeric format 
            constants : DECIMALFORMAT, SCIENTIFICFORMAT, BUSINESSFORMAT, ENGINEERINGFORMAT,  PERCENTFORMAT, 
            CURRENCYBUSINESSFORMAT, CURRENCYFORMAT and EXPONENTFORMAT. </param>
            <param name="ndecimal"> The number of digits to display to the right of the decimal point.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.#ctor(System.Int32,System.Int32)">
            <summary>
              This method initializes an ChartText using the specified numeric format and decimal precision.  
              It is not usable for display purposes because it does not reference a scaling system. 
            </summary>
            <param name="nnumformat"> Specifies the numeric format of the label. Use one of the  numeric format 
            constants : DECIMALFORMAT, SCIENTIFICFORMAT, BUSINESSFORMAT, ENGINEERINGFORMAT,  PERCENTFORMAT, 
            CURRENCYBUSINESSFORMAT, CURRENCYFORMAT and EXPONENTFORMAT. </param>
            <param name="ndecimal"> The number of digits to display to the right of the decimal point.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.Copy(com.quinncurtis.chart2dnet.NumericLabel)">
            <summary>
              Copies the source NumericLabel object. 
            </summary>
            <param name="source"> The source NumericLabel object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.Clone">
            <summary>
             Returns an object that is a clone of this NumericLabel object. 
            </summary>
            <returns> Returns a clone of this NumericLabel object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.MakeLabel">
            <summary>
             This method formats the current numeric value and stores the  result in the textString field of the 
             parent ChartText object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.MakeNumericLabel">
            <summary>
             This method formats the current numeric value and stores the  result in the textString field of the 
             parent ChartText object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.GetTextString">
            <summary>
             This method formats the current numeric value, stores the  result in the textString field of the 
             parent ChartText object, and returns  the formatted string. 
            </summary>
            <returns> Returns the string representing the formatted text of the numeric value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.DrawWithExponent(System.Drawing.Graphics)">
            <summary>
              This method draws a formatted numeric string using an AttributedCharacterIterator object.  This allows 
              the adjustment of the font size and position of each character in a text string.  The EXPONENTFORMAT 
              format requires that the exponent characters be displayed as  superscript characters. 
            </summary>
            <param name="g2"> The graphics context. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.GetNumericFormat">
            <summary>
             Returns the numeric format of the numeric label. 
            </summary>
            <returns> Returns the numeric format of the numeric label.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.SetNumericFormat(System.Int32)">
            <summary>
             Sets the numeric format of the numeric label. 
            </summary>
            <param name="nformat"> Sets the numeric format of the numeric label.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.GetNumericValue">
            <summary>
             Returns the numeric value of the numeric label. 
            </summary>
            <returns> Returns the numeric value of the numeric label.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.SetNumericValue(System.Double)">
            <summary>
             Sets the numeric value of the numeric label. 
            </summary>
            <param name="rvalue"> Sets the numeric value of the numeric label.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.GetDecimalPos">
            <summary>
             Returns the number of digits to the right of the decimal for the numeric label. 
            </summary>
            <returns> Returns the number of digits to the right of the decimal for the numeric label.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.SetDecimalPos(System.Int32)">
            <summary>
             Sets the number of digits to the right of the decimal for the numeric label. 
            </summary>
            <param name="ndecplace"> Sets the number of digits to the right of the decimal for the numeric label.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.GetNumStrFormatPostfix">
            <summary>
             Returns the business format postfix characters. 
            </summary>
            <returns> Returns the business format postfix characters. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.NumericLabel.SetNumStrFormatPostfix(System.String)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericLabel.SetNumStrFormatPostfix(System.String)">
            <summary>
             Sets the business format postfix characters. 
            </summary>
            <param name="bformat"> Specifies the business format postfix characters.  Use the 
             string format: "'thousands','millions','billions','trillions>'.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NumericLabel.NumericFormat">
            <summary>
             Get/Set the numeric format of the numeric label. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NumericLabel.NumericValue">
            <summary>
             Get/Set  the numeric value of the numeric label. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NumericLabel.DecimalPos">
            <summary>
             Get/Set  the number of digits to the right of the decimal for the numeric label. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NumericLabel.NumStrFormatPostfix">
            <summary>
             Returns the business format postfix characters. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NumericLabel.PostfixString">
            <summary>
             Set/Get the postfix string for the label. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BarDatapointValue.barRect">
            <summary>
             The rectangle that is used as a reference to position the bar data point value.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BarDatapointValue.plotObj">
            <summary>
             Specifies the plotting object associated with the bar data point values. SimpleLinePlot is 
             the default value  only.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BarDatapointValue.datapointLocation">
            <summary>
             Specifies the data point location that is being labeled. It is the actual  data point location and not the 
             exact position of the data point numeric  text. The data point numeric text is justified left, right, 
             above or below  the data point location.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BarDatapointValue.ErrorCheck(System.Int32)">
            <summary>
              Checks the BarDatapointValue object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BarDatapointValue.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BarDatapointValue.Copy(com.quinncurtis.chart2dnet.BarDatapointValue)">
            <summary>
              Copies the source object. 
            </summary>
            <param name="source"> The source object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BarDatapointValue.Clone">
            <summary>
             Returns an object that is a clone of this BarDatapointValue object. 
            </summary>
            <returns> Returns a clone of this BarDatapointValue object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BarDatapointValue.#ctor">
            <summary>
              The default BarDatapointValue constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BarDatapointValue.InitBarDatapointValue(com.quinncurtis.chart2dnet.NumericLabel,com.quinncurtis.chart2dnet.ChartPlot,com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              This method initializes the BarDatapointValue object. 
            </summary>
            <param name="numlabel"> An instance of an NumericLabel class that serves as  a model for the bar 
            data point text. </param>
            <param name="plotobj"> Specifies the plotting object associated with the bar data point values. </param>
            <param name="datapointloc"> Specifies the data point location that is being labeled. It is the actual 
            data point location and not the exact position of the data point numeric  text. The data point numeric 
            text is justified left, right, above or below  the data point location. </param>
            <param name="barrect"> The rectangle that is used as a reference to position the bar data point value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BarDatapointValue.#ctor(com.quinncurtis.chart2dnet.NumericLabel,com.quinncurtis.chart2dnet.ChartPlot,com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              This constructor creates a new BarDatapointValue object of a specified type, and scales it to match  the 
              specified minimum and maximum values. 
            </summary>
            <param name="numlabel"> An instance of an NumericLabel class that serves as  a model for the bar 
            data point text. </param>
            <param name="plotobj"> Specifies the plotting object associated with the bar data point values. </param>
            <param name="datapointloc"> Specifies the data point location that is being labeled. It is the actual 
            data point location and not the exact position of the data point numeric  text. The data point numeric 
            text is justified left, right, above or below  the data point location. </param>
            <param name="barrect"> The rectangle that is used as a reference to position the bar data point value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BarDatapointValue.DrawDatapointValue(System.Drawing.Graphics,System.Double,System.Double,System.Double)">
            <summary>
             This method draws a data point value at a specific location, after the position  has been justified 
             against the associated bar. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="xpos"> The x-position, in physical coordinates, of the data point. </param>
            <param name="ypos"> The y-position, in physical coordinates, of the data point. </param>
            <param name="value"> The numeric value of the data point text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BarDatapointValue.DrawBarDatapointValue(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method justifies the data point text against the associated bar, and  draws it 
             to the specified graphics context. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="datapointpos"> The x- and y-position, in physical coordinates, of the  data point value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BarDatapointValue.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. The position and justification of the data point text is 
              calculated and output. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.BoolArray">
            <summary>
            Summary description for BoolArray. It is a improved version of the standard Array
            type because it allows automatic and dynamic resizing of the array. The array has a Length 
            property that specifies the number of elements in the array, and a MaxCapacity property that 
            specifies the size of the internal Array buffer. The internal buffer can be sized much larger than
            the Length property, allowing the array to grow in length without forcing a time consuming
            reallocation and the subsequent copying of all of the data values. Not really important if you are dealing 
            with 10 or 20 element arrays, but very important if you have 1,000,000 element arrays.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BoolArray.minimumMaxCapacity">
            <summary>
             The minimum allowable size of the dataBuffer.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BoolArray.dataBuffer">
            <summary>
             The data buffer holding the array of data values.
            </summary>		
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BoolArray.maxCapacity">
            <summary>
             The current allocated size of the dataBuffer. It is >= the length property.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BoolArray.length">
            <summary>
             The current number of used elements in the dataBuffer. It is less than or equal to maxCapacity.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.CopyArray(com.quinncurtis.chart2dnet.BoolArray,System.Int32,com.quinncurtis.chart2dnet.BoolArray,System.Int32,System.Int32)">
            <summary>
              Static routine copies all or part of one array to another. 
            </summary>
            <param name="source"> The source array.</param>
            <param name="sourceoffset"> The index to start copying from in the source array.</param>
            <param name="dest"> The destination array.</param>
            <param name="destoffset"> The index to start copying to in the destination array.</param>
            <param name="count"> The number of array elements to copy.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.#ctor">
            <summary>
              Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.#ctor(System.Int32)">
            <summary>
              Constructor creates an array of Length n, initialized to zero. 
            </summary>
            <param name="n"> The array is sized to n elements.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.#ctor(System.Boolean[],System.Int32)">
            <summary>
              Constructor initializes the array using the specified data values. 
              The number of elements of the array is set to the Length of the initializing array,
              while the internal buffer used to hold the data is sized to maxcap.
            </summary>
            <param name="x"> The initializing data values.</param>
            <param name="maxcap"> The internal buffer holding the data values is sized to the value of maxcap.
                If the number of data values exceeds the maxcap limit, the size of maxcap is automatically doubled.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.#ctor(System.Boolean[])">
            <summary>
              Constructor initializes the array using the specified data values. 
              The number of elements of the array is set to the Length of the source array,
              and the internal buffer used to hold the data is set to the same size.
            </summary>
            <param name="x"> The initializing data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.Copy(com.quinncurtis.chart2dnet.BoolArray)">
            <summary>
              Copies the source array to the current instance. 
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.NDCopy(com.quinncurtis.chart2dnet.BoolArray)">
            <summary>
              Non-Destructive copy does not reallocate buffers, limits copy to the number of elements in the smaller of 
              two arrays, the source or the current instance.
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the current instance to the destination array. 
            </summary>
            <param name="dest"> The destination array object.</param>
            <param name="index"> The index to start copying to in the destination array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.Clone">
            <summary>
             Returns an object that is a clone of this array object. 
            </summary>
            <returns> Returns a clone of this array object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.ResizeCapacity(System.Int32)">
            <summary>
              This method reallocates the internal data buffer to the new capacity value.
              The data is preserved. If the new buffer size is less than the number of data values
              in the old array, the array is truncated. If the new buffer size is greater than the number
              of data values, the Length property remains the same, but the MaxCapacity property is changed
              and the internal buffer reallocated to the new maxcapacity size.
            </summary>
            <param name="newcapacity"> The internal buffer holding the data values is sized to the new 
             value of new capacity.
             The Length property remains unchanged if the new buffer size is larger than the old buffer size, only the 
             buffer size is changed, not the current number of elements in the array.   </param>param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.Reset">
            <summary>
             Resets the Length property to 0, the MaxCapacity property to 16 and reallocates
             the internal buffer to MaxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.Clear">
            <summary>
             Resets (same as Clear) the Length property to 0, the MaxCapacity property to 16 and reallocates
             the internal buffer to MaxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.ShiftLeft(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the left. If you have a 10 element array and
              shift the array 2 elements to the left, element 7 ends up with the value originally in element
              9, element 6 ends up with the value originally in element 8, etc.
            </summary>
            <param name="shiftcount"> The elements are shifted to left by shiftcount elements.</param>
            <param name="fillzero"> Set to true if elements to the right of the final shift point are to be set to zero. 
            In the example above this would apply to elements 8 and 9 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.ShiftRight(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the right. If you have a 10 element array and
              shift the array 2 elements to the right, element 2 ends up with the value originally in element
              0, element 3 ends up with the value originally in element 1, etc.
            </summary>
            <param name="shiftcount"> The elements are shifted to right by shiftcount elements.</param>
            <param name="fillzero"> Set to true if elements to the left of the final shift point are to be set to zero. 
            In the example above this would apply to elements 0 and 1 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.ShiftLeftThenResize(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the left. If you have a 10 element array and
              shift the array 2 elements to the left, element 7 ends up with the value originally in element
              9, element 6 ends up with the value originally in element 8, etc. The array is resized to a size
              equal to the original array size minus the shift count (Length - shiftcount).
            </summary>
            <param name="shiftcount"> The elements are shifted to left by shiftcount elements.</param>
            <param name="trim"> Set to true if the MaxCapacity property is to be set equal to Length property,
             sizing the internal data buffers to the exact array size.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.Insert(System.Int32,System.Boolean)">
            <summary>
             Inserts an element in the array at the specified index, increasing the length of the array by one. If
             the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled and the internal buffer
             resized accordingly.
            </summary>
            <param name="index"> The array element where the new value is inserted.</param>
            <param name="r"> The new value to insert.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.RemoveAt(System.Int32)">
            <summary>
             Removes an element at the specified index, decreasing the length of the array by one. The size
             of the internal buffer remains unchanged.
            </summary>
            <param name="index"> The array element that is deleted.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.Delete(System.Int32)">
            <summary>
             Removes an element at the specified index, decreasing the length of the array by one. The size
             of the internal buffer remains unchanged.
            </summary>
            <param name="index"> The array element that is deleted.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.SetLength(System.Int32)">
            <summary>
             Resizes the array to the specified length. The MaxCapacity property is iteratively doubled until
             it exceeds the new length, then internal buffer are resized to the new MaxCapacity value.
            </summary>
            <param name="newlength"> The array is resized to the new length.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.TrimToSize">
            <summary>
             The MaxCapacity property is set equal to the Length property of the array
             and the internal buffer are resized to the new MaxCapacity value. This leaves no "slack"
             in the internal buffer that allows the array length to grow without forcing a reallocation
             and copy of all data elements should the length of the array be increased.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.Resize(System.Int32)">
            <summary>
             The length of the arrays is set to the specified value. If the new length is greater than the current 
             Length property value, but less or equal to the MaxCapacity property value, the Length property is increased to
             reflect the new value. If the new length is greater than MaxCapacity, the MaxCapacity value is
             doubled until it is greater than the new length, and the internal buffer increased accordingly.
             New, initialized array elements are set to zero.
            </summary>
            <param name="newlength"> The array is resized to the new length.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.Add(System.Boolean)">
            <summary>
             Adds a new element at the end of the array, increasing the length of the array by one. If
             the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled and 
             the internal buffer resized accordingly.
            </summary>
            <param name="r"> The new value to add at the end of the array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.AddRange(System.Boolean[])">
            <summary>
             Adds a array of new values at the end of the array, increasing the length of the array by the length 
             of the source array. If the MaxCapacity property is exceeded the MaxCapacity property is automatically 
             doubled and the internal buffer resized accordingly.
            </summary>
            <param name="x"> An array of new values that are added to the end of the array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.SetElements(System.Boolean[])">
            <summary>
             Initializes the elements of the array, starting at element 0. The size of the array is set
             equal to the length of the source array. If the source array is
             larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.SetElements(System.Boolean[],System.Int32)">
            <summary>
             Initializes the elements of the array, starting at element 0 and continuing for count elements.
              The size of the array is set equal to the length of the source array, or the count, whichever is smaller. 
              If the new length larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array, or the count value, whichever is smaller.</param>
            <param name="count"> Number of elements to initialize.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.SetElements(com.quinncurtis.chart2dnet.BoolArray,System.Int32)">
            <summary>
             Initializes the elements of the array, starting at element 0 and continuing for count elements.
              The size of the array is set equal to the length of the source array, or the count, whichever is smaller. 
              If the new length larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array, or the count value, whichever is smaller.</param>
            <param name="count"> Number of elements to initialize.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.SetElements(com.quinncurtis.chart2dnet.BoolArray)">
            <summary>
             Initializes the elements of the array, starting at element 0. The size of the array is set
             equal to the length of the source array. If the source array is
             larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.SetElement(System.Int32,System.Boolean)">
            <summary>
             Set the value of a single element in the array.
            </summary>
            <param name="index"> The index to set in the array.</param>
            <param name="r"> The array element at index is set to the value r.</param>///
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.GetElement(System.Int32)">
            <summary>
             Get the value of a single element in the array.
            </summary>
            <param name="index"> The array index.</param>
             <returns> Returns the value of the array at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.GetDataBuffer">
            <summary>
             Returns a reference to the Array object that represents internal data buffer. It may be sized to the
             maxCapacity value, instead of the number of items in the buffer. This reference will remain valid 
             only as long as the array is not forced to resize, forcing a reallocation of the internal buffer.
            </summary>
             <returns> Returns a reference to the Array object that represents the internal data buffer.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BoolArray.GetElements">
            <summary>
             Returns a copy of the data values in the array sized to the number of elements.
            </summary>
             <returns> Returns a copy of the data values in the array sized to the number of elements.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.BoolArray.Length">
            <summary>
              This method returns the value of the length field which is number of  data points in a simple dataset, or 
              the number of x-values in a group dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.BoolArray.MaxCapacity">
            <summary>
              This method returns the value of the maxCapacity field. The MaxCapacity property represents 
              the allocated size of the internal Array object used as the data buffer for the array. 
              It is always greater than or equal to the Length property.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.BoolArray.DataBuffer">
            <summary>
             Returns a reference to the Array object that represents internal data buffer. This reference will 
             remain valid only as long as the array is not forced to resize, forcing a reallocation 
             of the internal buffer.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.BoolArray.Item(System.Int32)">
            <summary>
              This method get/sets the value of an individual element in the array. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.BubblePlot">
            <summary>
              The BubblePlot class extends the GroupPlot class and  displays bubble plots. The position and size of each 
              bubble in a bubble plot  is specified using the data in a group dataset. The number of groups in 
              the group dataset must be two.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BubblePlot.bubbleSizeType">
            <summary>
             The circle representing each bubble plot has a radius, or  an area, proportional to y[1] data values 
             in the group dataset.  Use one of the bubble plot type constants: SIZE_BUBBLE_RADIUS or SIZE_BUBBLE_AREA.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.#ctor">
            <summary>
             The default BubblePlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the BubblePlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.InitDefaults">
            <summary>
              Initializes default values for the bubble plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.Copy(com.quinncurtis.chart2dnet.BubblePlot)">
            <summary>
              Copies the source bubble plot object. 
            </summary>
            <param name="source"> The source bubble plot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.Clone">
            <summary>
             Returns an object that is a clone of this BubblePlot object. 
            </summary>
            <returns> Returns a clone of this BubblePlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new BubblePlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new BubblePlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new BubblePlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new bubble plot object. </param>
            <param name="dataset"> A group dataset specifying the location and size of the bubbles in the bubble plot. 
            The dataset  values for x and y[0] set the position of the center of each bubble and the values for y[1]  
            set the size of the bubble, either the area (SIZE_BUBBLE_AREA) or the radius(SIZE_BUBBLE_RADIUS). </param>
            <param name="bubblesizetype"> Sets whether the circle representing each bubble plot has a radius, or 
            an area, proportional to the y[1] data values in the group dataset.  Set using one of the bubble plot type 
            constants: SIZE_BUBBLE_RADIUS or SIZE_BUBBLE_AREA. </param>
            <param name="attrib"> Specifies the attributes (line color and fill color) of the bubble plot circles.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.InitBubblePlot(com.quinncurtis.chart2dnet.GroupDataset,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of an BubblePlot object. 
            </summary>
            <param name="dataset"> A group dataset specifying the location and size of the bubbles in the bubble plot. 
            The dataset  values for x and y[0] set the position of the center of each bubble and the values for y[1]  
            set the size of the bubble, either the area (SIZE_BUBBLE_AREA) or the radius(SIZE_BUBBLE_RADIUS). </param>
            <param name="bubblesizetype"> Sets whether the circle representing each bubble plot has a radius, or  
            an area, proportional to the y[1] data values in the group dataset.  Set using one of the bubble plot 
            type constants: SIZE_BUBBLE_RADIUS or SIZE_BUBBLE_AREA. </param>
            <param name="attrib"> Specifies the attributes (line color and fill color) of the bubble plot circles.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.DrawBubblePlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws an bubble plot using the current plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The bubble plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the bubble plot object 
              is drawn in the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects one of the bubble plot objects. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.SetBubbleSizeType(System.Int32)">
            <summary>
              Sets the bubble plot size type. 
            </summary>
            <param name="bubblesizetype"> Sets whether the circle representing each bubble plot has a radius, 
            or  an area, proportional to the y[1] data values in the group dataset.  Set using one of the 
            bubble plot type constants: SIZE_BUBBLE_RADIUS or SIZE_BUBBLE_AREA.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlot.GetBubbleSizeType">
            <summary>
              Returns the bubble plot size type . 
            </summary>
            <returns> Returns the bubble size type. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.BubblePlot.SetBubbleSizeType(System.Int32)"/>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.BubblePlot.BubbleSizeType">
            <summary>
              Sets/Gets the bubble plot size type . 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.BubblePlotLegend">
            <summary>
              The BubblePlotLegend class manages a collection BubblePlotLegendItem objects that represent  legend items.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Legend">
            <summary>
              The Legend is the abstract base class for all legend classes. I  manages the legend rectangle position, 
              size and background color and  fill color.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.verticalSpacing">
            <summary>
             The vertical row spacing between legend items is this value multiplied  by the legend item text height.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.horizontalSpacing">
            <summary>
             The horizontal spacing between legend columns is this value multiplied  by the legend item maximum 
             character width, plus the maximum line width from the  preceding column.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.legendWidth">
            <summary>
             The width of the legend rectangle in normalized coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.legendHeight">
            <summary>
             The height of the legend rectangle in normalized coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.legendBorderRect">
            <summary>
             The legend border is the white space border inside the legend rectangle.  Legend items are positioned 
             inside the legend border.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.legendRectangle">
            <summary>
             The legend rectangle in window device coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.innerLegendRectangle">
            <summary>
             The inner legend rectangle, inset from the legendRectangle by the values  of the legendBorderRect.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.generalTextOffset">
            <summary>
             A local variable used to position the text inside the inner legend rectangle.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.generalLegendText">
            <summary>
             The legend header, subhead and footer text objects are stored in this array.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.legendItemUniformTextColor">
            <summary>
             Specifies a uniform color for legend item text. If null the text assumes  the color of the associated 
             legend item symbol.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Legend.autoSizeLegendRectangle">
            <summary>
             A hint that tries to size the legend rectangle to fit the  associated legend items.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.#ctor">
            <summary>
              The default Legend constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.ErrorCheck(System.Int32)">
            <summary>
              Checks the legend object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.InitDefaults">
            <summary>
              Initializes default values for the legend.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.SetChartObjScale(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             Sets the reference to the PhysicalCoordinates object that the chart object is placed in.  
             It overrides the GraphObj version because this is a compound object that  needs to update the ChartText 
             and LegendItem objects within. 
            </summary>
            <param name="transform"> A reference to the PhysicalCoordinates object that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.Copy(com.quinncurtis.chart2dnet.Legend)">
            <summary>
              Copies the source legend object. 
            </summary>
            <param name="source"> The source legend object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.CalcLegendPosition">
            <summary> 
            Calculates the inner legend rectangle based on the legend rectangle position and the legend borders.
            </summary>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.InitLegendPosition(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              an Legend constructor that initializes the position,  size, color attributes, and layout1 mode of the legend. 
            </summary>
            <param name="rx"> The x-position, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="ry"> The y-position, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="rwidth"> The width, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="rheight"> The height, in chart normalized coordinates, of the legend rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.SetSize(System.Double,System.Double)">
            <summary>
              Set the width and height of the legend rectangle. 
            </summary>
            <param name="rwidth"> The width, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="rheight"> The height, in chart normalized coordinates, of the legend rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.GetSize">
            <summary>
              Returns the width and height of the legend rectangle. 
            </summary>
            <returns> Returns the width and height of the legend rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.AddLegendGeneralText(System.Int32,System.String,System.Drawing.Color,System.Drawing.Font)">
            <summary>
              Add a header, subhead, or footer to the current legend. 
            </summary>
            <param name="ntextpos"> Specifies whether a header, subhead or footer is being added.  Use one of the following 
            constants: LEGEND_HEADER, LEGEND_SUBHEAD or LEGEND_FOOTER. </param>
            <param name="stext"> Specifies the text string. </param>
            <param name="rgbcolor"> Specifies the text color. </param>
            <param name="thefont"> Specifies the text font.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.AddLegendGeneralText(System.Int32,com.quinncurtis.chart2dnet.ChartText)">
            <summary>
              Add a header, subhead, or footer to the current legend. 
            </summary>
            <param name="ntextpos"> Specifies whether a header, subhead or footer is being added.  Use one of the 
            following constants: LEGEND_HEADER, LEGEND_SUBHEAD or LEGEND_FOOTER. </param>
            <param name="textobj"> An TextObject that specifies the text string, color and font  of the header or footer.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.AddLegendGeneralText(System.Int32)">
            <summary>
              Add a blank header, subhead, or footer to the current legend. 
            </summary>
            <param name="ntextpos"> Specifies whether a header, subhead or footer is being added.  Use one of the 
            following constants: LEGEND_HEADER, LEGEND_SUBHEAD or LEGEND_FOOTER.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.GetLegendGeneralText(System.Int32)">
            <summary>
              Returns an ChartText object representing a header, subhead, or footer to the current legend. 
            </summary>
            <param name="item"> Specifies whether a header, subhead or footer is being added.  Use one of the 
            following constants: LEGEND_HEADER, LEGEND_SUBHEAD or LEGEND_FOOTER.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.UpdateLegendItemUniformTextColor">
            <summary>
              Updates the uniform ChartText color for legend text objects. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.DrawLegendRect(System.Drawing.Graphics)">
            <summary>
              Draws the legend rectangle for the current legend object. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.DrawLegendHeaders(System.Drawing.Graphics)">
            <summary>
              Draws the legend header and subhead. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.DrawLegendFooter(System.Drawing.Graphics)">
            <summary>
              Draws the legend footer. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects the legend rectangle. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the legend rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.Draw(System.Drawing.Graphics)">
            <summary>
             The abstract draw method for this class. Subclasses should override  this function and draw the object. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.GetLegendWidth">
            <summary>
             Returns the width of the legend rectangle in normalized coordinates. 
            </summary>
            <returns> Returns the width of the legend rectangle in normalized coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.SetLegendWidth(System.Double)">
            <summary>
             Sets the width of the legend rectangle in normalized coordinates. 
            </summary>
            <param name="rwidth"> Sets the width of the legend rectangle in normalized coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.GetLegendHeight">
            <summary>
             Returns the height of the legend rectangle in normalized coordinates. 
            </summary>
            <returns> Returns the height of the legend rectangle in normalized coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.SetLegendHeight(System.Double)">
            <summary>
             Sets the height of the legend rectangle in normalized coordinates. 
            </summary>
            <param name="rheight"> Sets the height of the legend rectangle in normalized coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.GetInnerLegendRectangle">
            <summary>
             Returns the location of the inner legend rectangle. The inner legend  rectangle is calculated when the 
             legend object is drawn, based on  out1er legend rectangle and the border parameters. 
            </summary>
            <returns> Returns the location of the inner legend rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.GetVerticalSpacing">
            <summary>
             Returns the vertical row spacing between legend items. 
            </summary>
            <returns> Returns the vertical row spacing between legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.SetVerticalSpacing(System.Double)">
            <summary>
             Sets the vertical row spacing between legend items. 
            </summary>
            <param name="vspace"> Sets the vertical row spacing between legend items.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.GetHorizontalSpacing">
            <summary>
             Returns the horizontal spacing between legend items.  The horizontal spacing between legend columns 
             is this value multiplied  by the legend item text height, plus the maximum line width from the  preceding column. 
            </summary>
            <returns> Returns the horizontal spacing between legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.SetHorizontalSpacing(System.Double)">
            <summary>
             Sets the horizontal spacing between legend items.  The horizontal spacing between legend columns 
             is this value multiplied  by the legend item text height, plus the maximum line width from the  preceding column. 
            </summary>
            <param name="hspace"> Sets the horizontal spacing between legend items.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.GetAutoSizeLegendRectangle">
            <summary>
             Returns the a flag that specifies whether the legend rectangle is auto-sized.  If
             true the legend rectangle is is auto-sized based on the initial size and position information.
             If false, the legend rectangle is exactly as specified in the constructor call. If there
             are more legend items than will fit into the legend rectangle, they overrun the legend
             rectangle borders.
            </summary>
            <returns> Returns the autoSizeLegendRectangle flag.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.GetAutoSizeLegendRectangle(System.Boolean)">
            <summary>
             Sets the a flag that specifies whether the legend rectangle is auto-sized.  If
             true the legend rectangle is is auto-sized based on the initial size and position information.
             If false, the legend rectangle is exactly as specified in the constructor call. If there
             are more legend items than will fit into the legend rectangle, they overrun the legend
             rectangle borders.
            </summary>
            <returns> Returns the autoSizeLegendRectangle flag.</returns>	 
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.SetLegendBorderRect(System.Int32,System.Double)">
            <summary>
             Sets one of the four legend border values.  The legend border is the white space border inside the 
             legend rectangle.  Legend items are positioned inside the legend border. 
            </summary>
            <param name="nborder"> Specifies which legend border to set. Use one of the border  constants: LEFT_BORDER, 
            TOP_BORDER, RIGHT_BORDER or BOTTOM_BORDER. </param>
            <param name="rvalue"> The border value in chart normalized coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.GetLegendBorderRect(System.Int32)">
            <summary>
             Returns one of the four legend border values.  The legend border is the white space border inside the 
             legend rectangle.  Legend items are positioned inside the legend border. 
            </summary>
            <param name="nborder"> Specifies which legend border to return. Use one of the border  constants: 
            LEFT_BORDER, TOP_BORDER, RIGHT_BORDER or BOTTOM_BORDER. </param>
            <returns> Returns the border value in chart normalized coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Legend.SetLegendItemUniformTextColor(System.Drawing.Color)">
            <summary>
             Sets a uniform color for legend item text. If null the text assumes  the color of the associated 
             legend item symbol.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Legend.LegendWidth">
            <summary>
             Get/Set the width of the legend rectangle in normalized coordinates. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Legend.LegendHeight">
            <summary>
             Get/Set the height of the legend rectangle in normalized coordinates. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Legend.InnerLegendRectangle">
            <summary>
             Get the location of the inner legend rectangle. The inner legend  rectangle is calculated when the 
             legend object is drawn, based on  out1er legend rectangle and the border parameters. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Legend.NumberGeneralLegendItems">
            <summary>
             Get the number of generalLegendItems (Header, Subhead and Footer items). 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Legend.VerticalSpacing">
            <summary>
             Get/Set the vertical row spacing between legend items. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Legend.HorizontalSpacing">
            <summary>
             Get/Set the horizontal spacing between legend items.  The horizontal spacing between legend columns 
             is this value multiplied  by the legend item text height, plus the maximum line width from the  preceding column. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Legend.LegendItemUniformTextColor">
            <summary>
             Get/Set a uniform color for legend item text. If null the text assumes  the color of the associated 
             legend item symbol.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Legend.AutoSizeLegendRectangle">
            <summary>
             Sets/Gets the a flag that specifies whether the legend rectangle is auto-sized.  If
             true the legend rectangle is is auto-sized based on the initial size and position information.
             If false, the legend rectangle is exactly as specified in the constructor call. If there
             are more legend items than will fit into the legend rectangle, they overrun the legend
             rectangle borders.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BubblePlotLegend.legendItemsArrayList">
            <summary>
             Holds a list of BubblePlotLegendItem objects, each object represents a legend symbol and  descriptive text.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BubblePlotLegend.symbolOffsetFactor">
            <summary>
             Offsets a legend symbol from text baseline, centering it vertically with text.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BubblePlotLegend.bubblePlot">
            <summary>
             The bubble plot object the legend is for.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.#ctor">
            <summary>
              The default BubblePlotLegend constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.ErrorCheck(System.Int32)">
            <summary>
              Checks the legend object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.InitDefaults">
            <summary>
              Initializes default values for the legend.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.SetChartObjScale(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             Sets the reference to the PhysicalCoordinates object that the chart object is placed in.  
             It overrides the GraphObj version because this is a compound object that  needs to update the ChartText 
             and BubblePlotLegendItem objects within. 
            </summary>
            <param name="transform"> A reference to the PhysicalCoordinates object that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.Copy(com.quinncurtis.chart2dnet.BubblePlotLegend)">
            <summary>
              Copies the source legend object. 
            </summary>
            <param name="source"> The source legend object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.Clone">
            <summary>
             Returns an object that is a clone of this BubblePlotLegend object. 
            </summary>
            <returns> Returns a clone of this BubblePlotLegend object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.CalcLegendPosition">
            <summary>
             Calculates the inner legend rectangle based on the legend rectangle
              position and the legend borders.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.#ctor(com.quinncurtis.chart2dnet.BubblePlot,System.Double,System.Double,System.Double,System.Double,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This BubblePlotLegend constructor initializes the position,  size, color attributes, and layout1 mode of the legend. 
            </summary>
            <param name="plot"> The bubble plot object that the legend is for. </param>
            <param name="rx"> The x-position, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="ry"> The y-position, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="rwidth"> The width, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="rheight"> The height, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="attrib"> Specifies the out1line color, out1line line style, and fill color for  the legend rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.#ctor(com.quinncurtis.chart2dnet.BubblePlot,System.Double,System.Double,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This BubblePlotLegend constructor initializes the position,  size, color attributes, and 
              layout1 mode of the legend. 
            </summary>
            <param name="plot"> The bubble plot object that the legend is for. </param>
            <param name="rx"> The x-position, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="ry"> The y-position, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="attrib"> Specifies the out1line color, out1line line style, and fill color for  the legend rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.AddLegendItem(System.String,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,System.Drawing.Font)">
            <summary>
              Add a legend item to the current legend, specifying the legend item text,  symbol, attributes and font. 
            </summary>
            <param name="stext"> Specifies the text string for the legend item. </param>
            <param name="rsize"> Specifies the size of the bubble legend circle. </param>
            <param name="attrib"> Specifies the ChartAttribute object to get the color and fill attributes of 
            the legend item. </param>
            <param name="thefont"> Specifies the text font for the legend item. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.AddLegendItem(com.quinncurtis.chart2dnet.BubblePlotLegendItem)">
            <summary>
              Add a legend item to the current legend, using another legend item as the source. 
            </summary>
            <param name="legenditem"> Specifies the legend item that is the source. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.AddLegendItem(System.String,System.Double,com.quinncurtis.chart2dnet.BubblePlot,System.Drawing.Font)">
            <summary>
              Add a legend item to the current legend, specifying the legend item text,  symbol, the associated 
              GraphObj object, and font. 
            </summary>
            <param name="stext"> Specifies the text string for the legend item. </param>
            <param name="rsize"> Specifies the size of the bubble legend circle. </param>
            <param name="chartobj"> The color and fill attributes for the legend item are copied from  the attributes 
            of this chart object. </param>
            <param name="thefont"> Specifies the text font for the legend item. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.UpdateLegendItemUniformTextColor">
            <summary>
             Updates the color ChartText objects for all legend items with the  new legendItemUniformTextColor
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.GetSumStringY(System.Drawing.Graphics)">
            <summary>
              Returns the height, in chart normalized coordinates, of the sum of all strings string  in the list of 
              legend items. This is used to align and evenly space the  legend items in the legend rectangle 
            </summary>
            <param name="g2"> The graphics context. </param>
            <returns> Returns the height, in chart normalized coordinates, of the tallest string in the list of 
            legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.GetLongestStringX(System.Drawing.Graphics)">
            <summary>
              Returns the length, in chart normalized coordinates, of the longest string  in the list of legend items. 
              This is used to align and evenly space the  legend items in the legend rectangle 
            </summary>
            <param name="g2"> The graphics context. </param>
            <returns> Returns the length, in chart normalized coordinates, of the longest string  in the list of 
            legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.DrawLegendRect(System.Drawing.Graphics)">
            <summary>
              Draws the legend rectangle for the current legend object. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.DrawBubblePlotLegend(System.Drawing.Graphics)">
            <summary>
              Draws a bubble plot legend. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. The legend rectangle is drawn first, then  the legend headers. 
              The legend items are drawn next. Last, the legend  footer is drawn. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.GetLegendItem(System.Int32)">
            <summary>
             Returns the BubblePlotLegendItem object at the specified index. 
            </summary>
            <param name="itemnum"> The index of the BubblePlotLegendItem in the legendItemsArrayList list. </param>
            <returns> Returns the BubblePlotLegendItem object at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.SetLegendItem(com.quinncurtis.chart2dnet.BubblePlotLegendItem,System.Int32)">
            <summary>
             Set an BubblePlotLegendItem object in the legendItemsArrayList list. 
            </summary>
            <param name="legenditem"> The BubblePlotLegendItem that will override an existing BubblePlotLegendItem in 
            the legendItemsArrayList list. </param>
            <param name="itemnum"> The index in the legendItemsArrayList list where the BubblePlotLegendItem  
            will be placed.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.GetNumLegendItems">
            <summary>
             Returns the number of legend items in the current legend. 
            </summary>
            <returns> Returns the number of legend items in the current legend.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegend.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance 
              of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.BubblePlotLegendItem">
            <summary>
              The BubblePlotLegendItem class contains the text and symbol  used in displaying a single 
              element of a chart legend.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BubblePlotLegendItem.legendItemText">
            <summary>
             Holds a reference to the ChartText object used for the legend item caption.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BubblePlotLegendItem.bubblePhysSize">
            <summary>
             The radius of the legend bubble in physical coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BubblePlotLegendItem.bubbleDevRadius">
            <summary>
             The radius of the legend bubble in device coordinates.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.ErrorCheck(System.Int32)">
            <summary>
              Checks the legend item object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.#ctor">
            <summary>
              The default BubblePlotLegendItem constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.SetChartObjScale(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             Sets the reference to the PhysicalCoordinates object that the chart object is placed in.  
             It overrides the GraphObj version because this is a compound object that  needs to update the ChartText 
             and ChartShape objects within. 
            </summary>
            <param name="transform"> A reference to the PhysicalCoordinates object that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.InitDefaults">
            <summary>
              Initializes default values for the legend item.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.Copy(com.quinncurtis.chart2dnet.BubblePlotLegendItem)">
            <summary>
              Copies the source legend item object. 
            </summary>
            <param name="source"> The source legend item object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.Clone">
            <summary>
             Returns an object that is a clone of this BubblePlotLegendItem object. 
            </summary>
            <returns> Returns a clone of this BubblePlotLegendItem object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.#ctor(com.quinncurtis.chart2dnet.ChartText,System.Double,com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
              This BubblePlotLegendItem constructor creates a new object based on the source ChartText object,  
              and the source nsymbol value. Attributes for the legend item are copied  from the GraphObj parameter. 
            </summary>
            <param name="textitem"> A reference to an ChartText item used as the text for a legend item. </param>
            <param name="rsize"> Specifies the size of the bubble legend circle. </param>
            <param name="chartobj"> A reference to an GraphObj object. The color of the  legend item is copied 
            out of this object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.String,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,System.Drawing.Font)">
            <summary>
              This BubblePlotLegendItem constructor creates a new object based on the source  chart scale, 
              a text string, a symbol value, an ChartAttribute object,  and an explicit font. 
            </summary>
            <param name="transform"> The coordinate system for the new legend item object. </param>
            <param name="stext"> A string used as the text for a legend item. </param>
            <param name="rsize"> Specifies the size of the bubble legend circle. </param>
            <param name="attrib"> A reference to an ChartAttribute object. The color of the  legend 
            item is copied out of this object. </param>
            <param name="thefont"> A reference to the font that is to be used in the display of the  
            legend item text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.String,System.Double,com.quinncurtis.chart2dnet.BubblePlot,System.Drawing.Font)">
            <summary>
              This BubblePlotLegendItem constructor creates a new object based on the source  chart scale, 
              a text string, a symbol value, an GraphObj object,  and an explicit font. 
            </summary>
            <param name="transform"> The coordinate system for the new legend item object. </param>
            <param name="stext"> A string used as the text for a legend item. </param>
            <param name="rsize"> Specifies the size of the bubble legend circle. </param>
            <param name="chartobj"> A reference to an BubblePlot object. The color of the  legend item is copied 
            out of attributes of this object. </param>
            <param name="thefont"> A reference to the font that is to be used in the display of the  legend item text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.SetClipping(System.Int32)">
            <summary>
             Sets the clipping mode for the legend item. 
            </summary>
            <param name="clipping"> Sets the clipping mode for the legend item.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.GetLegendItemText">
            <summary>
             Returns the ChartText object used by the legend item. 
            </summary>
            <returns> Returns the ChartText object used by the legend item.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.SetLegendItemText(com.quinncurtis.chart2dnet.ChartText)">
            <summary>
             Sets the ChartText object used by the legend item. 
            </summary>
            <param name="text"> Sets the ChartText object used by the legend item.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.SetResizeMultiplier(System.Double)">
            <summary>
             Sets the resize multiplier used by the legend item. 
            </summary>
            <param name="multiplier"> Sets the resize multiplier used by the legend item.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.GetResizeMultiplier">
            <summary>
             Returns the resize multiplier used by the legend item. 
            </summary>
            <returns> Returns the resize multiplier used by the legend item.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance 
              of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.SetBubblePhysSize(System.Double)">
            <summary>
             Sets the size of the legend bubble in physical coordinates. 
            </summary>
            <param name="rsize"> Sets the size of the legend bubble in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.GetBubblePhysSize">
            <summary>
             Returns the size of the legend bubble in physical coordinates. 
            </summary>
            <returns> Returns the size of the legend bubble in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.SetBubbleDevRadius(System.Double)">
            <summary>
             Sets the radius of the legend bubble in device coordinates. 
            </summary>
            <param name="rsize"> Sets the radius of the legend bubble in device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BubblePlotLegendItem.GetBubbleDevRadius">
            <summary>
             Returns the radius of the legend bubble in device coordinates. 
            </summary>
            <returns> Returns the radius of the legend bubble in device coordinates.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.BubblePlotLegendItem.BubblePhysSize">
            <summary>
             Set/Get the size of the legend bubble in physical coordinates. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.BubblePlotLegendItem.BubbleDevRadius">
            <summary>
             Set/Get the radius of the legend bubble in device coordinates. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.BufferedImage">
            <summary>
              The BufferedImage class renders a chart as an Image. It can  be optionally used to save a chart to an Image file. 
              All Image file formats supported by the .Net ImageFormat class are supported.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BufferedImage.bufferedImageMetafile">
            <summary>
              The ChartView object that is the source for the chart image.
            </summary>
            <summary>		
              Hold the Metafile of the image (if the ImageFormat.EMF or WMF image format is selected)
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BufferedImage.imageEmfType">
            <summary>
              Specifies the emfType if the ImageFormat.EMF or WMF image format is selected).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BufferedImage.chartImageFormat">
            <summary>
              Specifies the image ImageFormat object that can be used to format the image.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BufferedImage.jpegImageQuality">
            <summary>
              Specifies the image jpeg quality value (1-100, 100 the highest).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BufferedImage.chartViewComponent">
            <summary>
              Specifies the component associated with the image.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.BufferedImage.bufferedImage">
            <summary>
              Holds thebbitmap image that the chart is rendered to.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.InitDefaults">
            <summary>
              Initializes default values for the buffered image.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.#ctor">
            <summary>
              The default BufferedImage constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.#ctor(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
              This constructor creates an BufferedImage object that is used to render  an ChartView object 
              into an image buffer. The rendering takes place when  either the BufferedImage.render method, or the  
              BufferedImage.saveImageAsJPEG method is called. 
            </summary>
            <param name="component"> The ChartView object that is the source for the chart image.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.ErrorCheck(System.Int32)">
            <summary>
              Checks the current plot object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.Copy(com.quinncurtis.chart2dnet.BufferedImage)">
            <summary>
              Copies the source BufferedImage object. 
            </summary>
            <param name="source"> The source BufferedImage object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.Clone">
            <summary>
             Returns an object that is a clone of this BufferedImage object. 
            </summary>
            <returns> Returns a clone of this BufferedImage object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.GetBufferedImage">
            <summary>
              Returns the buffered image that the ChartView object has been rendered to. 
            </summary>
            <returns> Returns the buffered image that the ChartView object has been rendered to. If  the render 
            method has already been called, the most recent rendered image is returned,  otherwise the render 
            method is called before the buffered image is returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.#ctor(com.quinncurtis.chart2dnet.ChartView,System.Drawing.Imaging.ImageFormat)">
            <summary>
              This constructor creates an BufferedImage object that is used to render  an ChartView object into an image 
              buffer. The rendering takes place when  either the BufferedImage.render method, or the  
              BufferedImage.saveImageAsJPEG method is called. 
            </summary>
            <param name="component"> The ChartView object that is the source for the chart image. </param>
            <param name="imgformat"> The image format of the rendered image. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.GetBufferedImageMetafile">
            <summary>
              Returns the memory metafile that the ChartView object has been rendered to (for ImageFormat.EMF 
              and ImageFormat.WMF formats). 
            </summary>
            <returns> Returns the  memory metafile that the ChartView object has been rendered to. If  the 
            render method has already been called, the most recent rendered image is returned,  otherwise the 
            render method is called before the buffered image is returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.PutImageOnClipboard(System.IntPtr)">
            <summary>
              Renders the ChartView object to the clipboard.
            <param name="hWnd"> Handle to the window to be associated with the open clipboard. If this parameter 
            is NULL, the open clipboard is associated with the current task. </param>
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.PutImageOnClipboard">
            <summary>
              Renders the ChartView object to the clipboard.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.PutEnhMetafileOnClipboard(System.IntPtr,System.Drawing.Imaging.Metafile)">
            <summary>
              Renders the ChartView object to the clipboard.
            <param name="hWnd"> Handle to the window to be associated with the open clipboard. If this parameter 
            is NULL, the open clipboard is associated with the current task. </param>
            <param name="mf"> Memory metafile of the chart image. </param>
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.RenderMetafile">
            <summary>
              Renders the ChartView object to the bufferedImageMetafile metafile image buffer.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.GetEncoderInfo(System.String)">
            <summary>
              Returns image encoder information.
            </summary>
            <param name="mimeType"> A string that contains the codec's Multipurpose Internet Mail Extensions (MIME) type. </param>
            <returns> The ImageCodecInfo class provides the necessary storage members and methods to retrieve all 
            pertinent information about the installed image codecs.  </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.SaveJPGWithCompressionSetting(System.Drawing.Image,System.IO.Stream,System.Int64)">
            <summary>
              Saves the chart image to a stream using the specified compression level.
            </summary>
            <param name="image"> The image to be saved. </param>  
            <param name="stream"> The stream the image is saved to. </param>
            <param name="lCompression"> the compression level (1-100, 100 the highest). </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.SaveJPGWithCompressionSetting(System.Drawing.Image,System.String,System.Int64)">
            <summary>
              Saves the chart image to a stream using the specified compression level.
            </summary>
            <param name="image"> The image to be saved. </param>
            <param name="filename"> The file the image is saved to. </param>
            <param name="lCompression"> the compression level (1-100, 100 the highest). </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.SaveImage(System.String)">
            <summary>
              Renders the ChartView object to the image buffer and then saves the  image buffer to an image file. 
            </summary>
            <param name="s"> The filename for the image file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.SaveImage(System.IO.Stream)">
            <summary>
              Renders the ChartView object to the image buffer and then saves the  image buffer to a stream. 
            </summary>
            <param name="s"> The stream for the image file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.SetChartImageFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
              Sets the image format used to save the chart image. 
            </summary>
            <param name="imgformat"> The image format used to save the chart image.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.GetChartImageFormat">
            <summary>
              Returns the ImageFormat used to save the chart image. 
            </summary>
            <returns> Returns the ImageFormat used to save the chart image. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.SetJpegImageQuality(System.Int32)">
            <summary>
             Set the Jpeg quality parameter (value 1- 100 with 100 the highest quality) for Jpeg file saves. 
            </summary>
            <param name="quality"> The Jpeg image quality value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.GetJpegImageQuality">
            <summary>
             Get the Jpeg quality parameter (value 1- 100 with 100 the highest quality) for Jpeg file saves. 
            </summary>
            <returns> Returns the Jpeg quality parameter used to save the chart image. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.RenderBitmap">
            <summary>
              Renders the ChartView object to the bufferedImage bitmap image buffer.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.Render">
            <summary>
              Renders the ChartView object to the appropriate image buffer.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.SetChartViewComponent(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
              Stores a reference to an ChartView object used as the source for the rendered image. 
            </summary>
            <param name="component"> The ChartView object that is the source for the chart image.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.BufferedImage.GetChartViewComponent">
            <summary>
              Returns a reference to the ChartView object used as the source for the rendered image. 
            </summary>
            <returns> Returns the ChartView object that is the source for the chart image.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.BufferedImage.ChartImageFormat">
            <summary>
             Set/Get the ImageFormat of the image. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.BufferedImage.JpegImageQuality">
            <summary>
             Set/Get the Jpeg quality parameter (value 1- 100 with 100 the highest quality) for Jpeg file saves. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.BufferedImage.ImageEmfType">
            <summary>
             Set/Get the EMF image type. Use one of the EmfType type constants. 
            </summary>		
        </member>
        <member name="T:com.quinncurtis.chart2dnet.CandlestickPlot">
            <summary>
              The CandlestickPlot class extends the GroupPlot class and  displays stock market data in an 
              open-high-low-close format common in financial  technical analysis.  Every item of the plot is 
              a group of two horizontal lines representing High and  Low values which are connected with a vertical 
              line and a box representing the  Open and Close values. If the Open value is greater than the Close value 
              for  a particular candlestick, the box is filled, otherwise it is unfilled. The number of groups  of 
              the data set must be four. The data in the dataset is organized in the following manner:  The Y[0] 
              values of the group dataset represent the values for Open, the Y[1]  values for High, the Y[2] values 
              for Low, and the Y[3] values for Close. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CandlestickPlot.boxFillAttributes">
            <summary>
             The fill attributes for the filling the candlestick box when the  open value is greater than the close value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.#ctor">
            <summary>
             The default CandlestickPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the CandlestickPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.InitDefaults">
            <summary>
              Initializes default values for the CandlestickPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.Copy(com.quinncurtis.chart2dnet.CandlestickPlot)">
            <summary>
              Copies the source CandlestickPlot object. 
            </summary>
            <param name="source"> The source CandlestickPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.Clone">
            <summary>
             Returns an object that is a clone of this CandlestickPlot object. 
            </summary>
            <returns> Returns a clone of this CandlestickPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new CandlestickPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new CandlestickPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new CandlestickPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new CandlestickPlot object. </param>
            <param name="dataset"> The CandlestickPlot plot will represent the group open-high-low-close  values in this 
            group data set. The data in the dataset is organized in the following manner:  The x-values of the group 
            dataset sets the x-position of the candlestick object,  The Y[0] values of the group dataset represent the 
            values for Open, the Y[1]  values for High, the Y[2] values for Low, and the Y[3] values for Close. </param>
            <param name="rwidth"> The width of the candlestick box in physical coordinates. </param>
            <param name="defaultattrib"> Specifies the default attributes (line color and fill color) of the candlestick  
            lines and box. </param>
            <param name="fillattrib"> Specifies the attributes (line color and fill color) of the candlestick  lines when 
            the close value is greater than the open value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.InitCandlestickPlot(com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of a candlestick plot.  The number of groups in a candlestick plot is restricted to four. 
            </summary>
            <param name="dataset"> The CandlestickPlot plot will represent the group open-high-low-close  values in this 
            group data set. The CandlestickPlot plot will represent the group open-high-low-close  values in this group 
            data set. The data in the dataset is organized in the following manner:  The x-values of the group dataset 
            sets the x-position of the candlestick object,  The Y[0] values of the group dataset represent the values for 
            Open, the Y[1]  values for High, the Y[2] values for Low, and the Y[3] values for Close. </param>
            <param name="rwidth"> The width of the candlestick box in physical coordinates. </param>
            <param name="defaultattrib"> Specifies the default attributes (line color and fill color) of the candlestick  
            lines and box. </param>
            <param name="fillattrib"> Specifies the attributes (line color and fill color) of the candlestick  lines when 
            the close value is greater than the open value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.DrawCandlestickPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a candlestick plot using the current candlestick plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The candlestick plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the candlestick plot object  
              is drawn in the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point is near one of the data points. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.SetBoxFillAttributes(com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
             Sets the fill attributes for the filling the candlestick box when the  open value is greater 
             than the close value. 
            </summary>
            <param name="attrib"> Sets the fill attributes for the filling the candlestick box when the  open value is 
            greater than the close value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CandlestickPlot.GetBoxFillAttributes">
            <summary>
             Returns the fill attributes for the filling the candlestick box when the  open value is greater 
             than the close value. 
            </summary>
            <returns> Returns a copy of the fill attributes for the filling the candlestick box when the  open value 
            is greater than the close value. </returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.CandlestickPlot.BoxFillAttributes">
            <summary>
             Set/Get the fill attributes for the filling the candlestick box when the  open value is greater 
             than the close value. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.CartesianCoordinates">
            <summary>
              The CartesianCoordinates class  extends the PhysicalCoordinates class to support linear-linear, 
              linear-log,  log-linear and log-log coordinate systems in an xy coordinate plane. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.PhysicalCoordinates">
            <summary>
              The PhysicalCoordinates class is the abstract base class for all  physical coordinate systems used to 
              plot objects in a graph. It uses  installable scale objects for x- and y-coordinates scales, so 
              that  the x and y coordinate systems do not have to be the same. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.WorkingCoordinates">
            <summary>
              This class maps a working coordinate system onto the world coordinate  system of the underlying 
              WorldCoordinates object.  All coordinates are specified in world coordinates.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.WorldCoordinates">
            <summary>
              This class extends the UserCoordinates class, adding routines for drawing  using world (or scaled) coordinates.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.UserCoordinates">
            <summary>
              This class provides drawing support support routines in device units.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.UserCoordinates.userViewport">
            <summary>
             Holds the coordinates of the current viewport.
            </summary>
            	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.UserCoordinates.userCurrentPos">
            <summary>
             Keeps track of the current graphics position in window device coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.UserCoordinates.currentAttributes">
            <summary>
             This field holds the current drawing attributes.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.UserCoordinates.graphicsInstance">
            <summary>
             This holds a reference to the current drawing device context.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.UserCoordinates.currentFont">
            <summary>
             This field holds a reference to the current font.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.UserCoordinates.currentFontFamily">
            <summary>
             This field holds a reference to the current font family.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.UserCoordinates.clippingBounds">
            <summary>
             Chart objects can be clipped against a clipping rectangle, usually the  plot area of the graph.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.UserCoordinates.altTextMeasure">
            <summary>
             True and an alternative to the .Net MeasureString method is used.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.UserCoordinates.localpath">
            <summary>
             A local GraphicsPath used for drawing
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.InitDefaults">
            <summary>
              Initializes default values for the object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.#ctor">
            <summary>
             Creates a new instance of UserCoordinates
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.ErrorCheck(System.Int32)">
            <summary>
              Checks the scale object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.Copy(com.quinncurtis.chart2dnet.UserCoordinates)">
            <summary>
              Copies the source UserCoordinates object. 
            </summary>
            <param name="source"> The source UserCoordinates object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.Clone">
            <summary>
             Returns an object that is a clone of this UserCoordinates object. 
            </summary>
            <returns> Returns a clone of this UserCoordinates object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.SetContext(System.Drawing.Graphics)">
            <summary>
             This method initializes the current graphics context used by the drawing routines  in this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetContext">
            <summary>
             This method returns a reference to the current graphics context used by the drawing routines  in this class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.SetClippingBounds(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Sets the clipping bounds using the specified rectangle. 
            </summary>
            <param name="cliprect"> The clipping rectangle in window device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.SetClippingBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sets the clipping bounds using the specified rectangle. 
            </summary>
            <param name="x"> The x-position of the clipping rectangle in window device coordinates. </param>
            <param name="y"> The y-position of the clipping rectangle in window device coordinates. </param>
            <param name="w"> The width of the clipping rectangle in window device coordinates.</param>
            <param name="h"> The height of the clipping rectangle in window device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetClippingBounds">
            <summary>
             This method returns the clipping bounds. 
            </summary>
            <returns> Returns the clipping rectangle in window device coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.SetClipRect(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Sets the current clipping rectangle in the current graphics context. 
            </summary>
            <param name="cliprect"> The clipping rectangle in window device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.SetClipRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Sets the current clipping rectangle in the current graphics context. 
            </summary>
            <param name="x"> The x-coordinate of the upper left value of the clipping rectangle. </param>
            <param name="y"> The y-coordinate of the upper left value of the clipping rectangle. </param>
            <param name="w"> The width of the clipping rectangle. </param>
            <param name="h"> The height of the clipping rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetClipRect">
            <summary>
             This method returns the current clipping rectangle of the current graphics context. 
            </summary>
            <returns> Returns the current clipping rectangle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.SetCurrentAttributes(com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
             Sets the current drawing attributes of the current graphics context. 
            </summary>
            <param name="attrib"> A reference to an attribute object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetCurrentAttributes">
            <summary>
             This method returns a copy of the current drawing attributes for the class. 
            </summary>
            <returns> Returns a copy of the current drawing attributes for the class.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.SetCurrentColor(System.Drawing.Color)">
            <summary>
             Sets the current drawing color of the graphics context. 
            </summary>
            <param name="rgbcolor"> A reference to an color object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetCurrentColor">
            <summary>
             This method returns the current drawing color for the class. 
            </summary>
            <returns> Returns a reference to the current drawing color for the class.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.SetUserViewport(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Sets the current drawing viewport using window device coordinates. 
            </summary>
            <param name="x"> The x-coordinate of the upper left value of the viewport. </param>
            <param name="y"> The y-coordinate of the upper left value of the viewport. </param>
            <param name="w"> The width of the viewport. </param>
            <param name="h"> The height of the viewport.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.SetUserViewport(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Sets the current drawing viewport using window device coordinates. 
            </summary>
            <param name="rect"> The user viewport in window device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetUserViewport">
            <summary>
             This method returns the current drawing viewport. 
            </summary>
            <returns> Returns the current drawing viewport.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.PMoveToAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double)">
            <summary>
             This methods sets current drawing position of the specified path to the  specified x- and y-coordinates. 
            </summary>
            <param name="path"> This path is updated with the new position. </param>
            <param name="x"> The x-coordinate of the new drawing position. </param>
            <param name="y"> The y-coordinate of the new drawing position.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.PMoveRel(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double)">
            <summary>
             This method implements a relative move operation by adding the x and y  values to the current 
             drawing position of the specified path. 
            </summary>
            <param name="path"> This path is updated with the new position. </param>
            <param name="x"> The delta x-value added to the current x-coordinate drawing position. </param>
            <param name="y"> The delta y-value added to the current y-coordinate drawing position.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.PLineToAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double)">
            <summary>
             This method implements a lineto operation by drawing a line from the current  location to the specified 
             x- and y-coordinates of the specified path. 	 ///</summary>
            <param name="path"> A new line segment is added to this path. </param>
            <param name="x"> The delta x-value added to the current x-coordinate drawing position. </param>
            <param name="y"> The delta y-value added to the current y-coordinate drawing position.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.PLineAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This method adds a line segment with endpoints (x1,y1)-(x2,y2) to the specified path. 
            </summary>
            <param name="path"> A new line segment is added to this path. </param>
            <param name="x1"> The starting x-coordinate value of the line segment. </param>
            <param name="y1"> The starting y-coordinate value of the line segment. </param>
            <param name="x2"> The ending x-coordinate value of the line segment. </param>
            <param name="y2"> The ending y-coordinate value of the line segment.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.PRectangle(System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             This method adds a rectangle shape to the specified path. 
            </summary>
            <param name="path"> The line segments are added to this path. </param>
            <param name="rect"> The rectangle added to the path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.PPolyLine(System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.Point2D[],System.Int32)">
            <summary>
             This method adds multiple line segments to the specified path. 
            </summary>
            <param name="path"> The line segments are added to this path. </param>
            <param name="p"> An array, size numdat, of points defining the endpoints of the line segments  
            that are added to the specified path. </param>
            <param name="numdat"> The number of points in the array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.DrawFillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
             This method renders a closed polygon, contained in the specified  path, using the current fill attributes. 
            </summary>
            <param name="g2"> A graphics context. </param>
            <param name="path"> A closed polygon has been previously defined for this path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.DrawFillCircle(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method renders an ellipse,  using the current fill attributes. 
            </summary>
            <param name="g2"> A graphics context. </param>
            <param name="x"> x-position of circle center.</param>
            <param name="y"> y-position of circle center.</param>
            <param name="radiusx"> The radius of the x-coordinate.</param>
            <param name="radiusy"> The radius of the y-coordinate.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.DrawPath(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
             This method renders a closed polygon, contained in the specified  path, using the specified pen. 
            </summary>
            <param name="g2"> A graphics context. </param>
            <param name="drawpen"> The drawing pen.  </param>
            <param name="path"> A closed polygon has been previously defined for this path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.FillPath(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
             This method renders a closed polygon, contained in the specified  path, using the specified pen. 
            </summary>
            <param name="g2"> A graphics context. </param>
            <param name="drawbrush"> The drawing pen.  </param> 
            <param name="path"> A closed polygon has been previously defined for this path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.DrawReversibleFrame(System.Drawing.Rectangle,System.Drawing.Color,System.Windows.Forms.FrameStyle)">
            <summary>
             Draws a reversible rectangle, using either on XOR mode, or the ControlPaint.ReversibleFrame mode. 
            </summary>
            <param name="rect"> The rectangle to draw. </param>
            <param name="framecolor"> The color of the rectangle.  </param> 
            <param name="frstyle"> The frame style of the rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.DrawReversibleLine(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color)">
            <summary>
             Draws a reversible line, using either on XOR mode, or the ControlPaint.ReversibleFrame mode. 
            </summary>
            <param name="p1"> The starting point of the line. </param>
            <param name="p2"> The ending point of the line. </param>
            <param name="linecolor"> The color of the line.  </param> 
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.StartXORMode(com.quinncurtis.chart2dnet.ChartView,System.Drawing.Color,System.Int32)">
            <summary>
             This method starts an XOR drawing mode for the window. 
            </summary>
            <param name="canvas"> The ChartView object drawing takes place in. </param>
            <param name="framecolor"> The drawing color.  </param> 
            <param name="linestyle"> The drawing linestyle.</param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.EndXORMode(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
             This method ends an XOR drawing mode for the window. 
            </summary>
            <param name="canvas"> The ChartView object drawing takes place in. </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.DrawFillRectangle(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             This method renders a rectangle using the current fill attributes. 
            </summary>
            <param name="g2"> A graphics context. </param>
            <param name="rect"> A rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.CalcAscent(System.Drawing.Font,System.Drawing.Graphics)">
            <summary>
             This method returns the ascent of the specified font,  rendered using specific graphics context. 
            </summary>
            <param name="g2"> A graphics context. </param>///
            <param name="font"> The font. </param>
            <returns> Returns the ascent of the specified font.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.CalcDescent(System.Drawing.Font,System.Drawing.Graphics)">
            <summary>
             This method returns the descent of the specified font,  rendered using specific graphics context. 
            </summary>
            <param name="g2"> A graphics context. </param>///
            <param name="font"> The font. </param>
            <returns> Returns the descent of the specified font.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.CalcLineSpacing(System.Drawing.Font,System.Drawing.Graphics)">
            <summary>
             This method returns the line spacing of the specified font,  rendered using specific graphics context. 
            </summary>
            <param name="g2"> A graphics context. </param>///
            <param name="font"> The font. </param>
            <returns> Returns the descent of the specified font.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetStringXEx(System.Drawing.Graphics,System.Drawing.Font,System.String)">
            <summary>
             This method returns the bounding width of the specified string,  rendered using the current font. 
             It uses a special algorithm more accurate than the one Microsoft provides.
            </summary>
            <param name="g2"> A graphics context. </param>
            <param name="font"> The font used to calculate the width. </param>///
            <param name="text"> The string used to calculate the bounding width. </param>
            <returns> Returns the bounding width of the specified string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetStringX(System.Drawing.Graphics,System.String)">
            <summary>
             This method returns the bounding width of the specified string,  rendered using the current font. 
            </summary>
            <param name="g2"> A graphics context. </param>
            <param name="s"> The string used to calculate the bounding width. </param>
            <returns> Returns the bounding width of the specified string.</returns>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetStringY(System.Drawing.Graphics,System.String)">
            <summary>
             This method returns the bounding height of the specified string,  rendered using the current font. 
            </summary>
            <param name="g2"> A graphics context. </param>///
            <param name="s"> The string used to calculate the bounding height. </param>
            <returns> Returns the bounding height of the specified string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetStringDimension(System.Drawing.Graphics,System.String)">
            <summary>
             This method returns the bounding dimension of the specified string,  rendered using the current font. 
            </summary>
            <param name="g2"> A graphics context. </param>
            <param name="s"> The string used to calculate the bounding width. </param>
            <returns> Returns the bounding dimension of the specified string.</returns>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetStringAscent(System.Drawing.Graphics,System.String)">
            <summary>
             This method returns the ascent of the specified string,  rendered using the current font. 
            </summary>
            <param name="g2"> A graphics context. </param>///
            <param name="s"> The string used to calculate the descent. </param>
            <returns> Returns the ascent of the specified string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetStringLeading(System.Drawing.Graphics,System.String)">
            <summary>
             This method returns the ascent of the specified string,  rendered using the current font. 
            </summary>
            <param name="g2"> A graphics context. </param>///
            <param name="s"> The string used to calculate the descent. </param>
            <returns> Returns the ascent of the specified string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetStringDescent(System.Drawing.Graphics,System.String)">
            <summary>
             This method returns the descent of the specified string,  rendered using the current font. 
            </summary>
            <param name="g2"> A graphics context. </param>///
            <param name="s"> The string used to calculate the descent. </param>
            <returns> Returns the descent of the specified string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetStringLineSpace(System.Drawing.Graphics,System.String)">
            <summary>
             This method returns the line spacing of the specified string,  rendered using the current font. 
            </summary>
            <param name="g2"> A graphics context. </param>///
            <param name="s"> The string used to calculate the descent. </param>
            <returns> Returns the line spacing of the specified string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.SetCurrentFont(System.Drawing.Font)">
            <summary>
              Sets the current font used in the rendering of text. 
            </summary>
            <param name="font"> A reference to the font that is to be used as the current font.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetCurrentFont">
            <summary>
              This method returns the current font used in the rendering of text. 
            </summary>
            <returns> Returns a reference to the current font.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetUserCurrentPos">
            <summary>
             This method returns the current position, in window device coordinates,  of the graphics pen. 
            </summary>
            <returns> Returns the current position of the graphics pen.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetUserX1">
            <summary>
             This method returns the lower left x-value, in window device coordinates, defining the current viewport. 
            </summary>
            <returns> Returns the lower left x-value, in window device coordinates, defining the current viewport.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetUserY1">
            <summary>
             This method returns the lower left y-value, in window device coordinates, defining the current viewport. 
            </summary>
            <returns> Returns the lower left y-value, in window device coordinates, defining the current viewport.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetUserX2">
            <summary>
             This method returns the upper right x-value, in window device coordinates, defining the current viewport. 
            </summary>
            <returns> Returns the upper right x-value, in window device coordinates, defining the current viewport.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.UserCoordinates.GetUserY2">
            <summary>
             This method returns the upper right y-value, in window device coordinates, defining the current viewport. 
            </summary>
            <returns> Returns the upper right y-value, in window device coordinates, defining the current viewport.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.UserCoordinates.CurrentAttributes">
            <summary>
             Set/Get the current drawing attributes of the current graphics context. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.UserCoordinates.CurrentColor">
            <summary>
             Set/Get the current drawing color of the graphics context. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.UserCoordinates.CurrentFont">
            <summary>
              Set/Get the current font used in the rendering of text. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.UserCoordinates.UserViewport">
            <summary>
             Set/Get the current user viewport. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.WorldCoordinates.worldScale">
            <summary>
             The rectangle defining the world coordinate system.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.WorldCoordinates.worldCurrentPos">
            <summary>
             The location of the current graphics pen in units of the world coordinate system.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.WorldCoordinates.worldScaleFactor">
            <summary>
             The x and y scale factors used to convert world coordinates to/from window device coordinates.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.InitDefaults">
            <summary>
              Initializes default values for the object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.#ctor">
            <summary>
             The default WorldCoordinates constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.ErrorCheck(System.Int32)">
            <summary>
              Checks the scale object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.Copy(com.quinncurtis.chart2dnet.WorldCoordinates)">
            <summary>
              Copies the source WorldCoordinates object. 
            </summary>
            <param name="source"> The source WorldCoordinates object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.SetWorldScale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Sets the minimum and maximum values for x- and y-dimension  the world coordinate system. 
            </summary>
            <param name="left"> The x-value of the lower left corner of the world coordinate system. </param>
            <param name="bottom"> The y-value of the lower left corner of the world coordinate system. </param>
            <param name="right"> The x-value of the upper right corner of the world coordinate system. </param>
            <param name="top"> The y-value of the upper right corner of the world coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.SetWorldScale(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Sets the minimum and maximum values for x- and y-dimension  the world coordinate system. 
            </summary>
            <param name="rect"> A rectangle specifying the corners of the world coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.WorldToUserAbsX(System.Double)">
            <summary>
             This method converts an absolute world x-coordinate value into a device coordinate value. 
            </summary>
            <param name="rphysx"> An x-coordinate value in world coordinates. </param>
            <returns> Returns the device coordinate value corresponding to the input world  coordinate value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.WorldToUserAbsY(System.Double)">
            <summary>
             This method converts an absolute world y-coordinate value into a device coordinate value. 
            </summary>
            <param name="rphysy"> A y-coordinate value in world coordinates. </param>
            <returns> Returns the device coordinate value corresponding to the input world  coordinate value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.WorldToUserRelX(System.Double)">
            <summary>
             This method converts a relative world delta x value into a device coordinate value. 
            </summary>
            <param name="rphysx"> A x-coordinate delta value in world coordinates. </param>
            <returns> Returns the device coordinate value corresponding to the input world  coordinate value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.WorldToUserRelY(System.Double)">
            <summary>
             This method converts a relative world delta y value into a device coordinate value. 
            </summary>
            <param name="rphysy"> A y-coordinate delta value in world coordinates. </param>
            <returns> Returns the device coordinate value corresponding to the input world  coordinate value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.UserToWorldAbsX(System.Double)">
            <summary>
             This method converts an absolute device value into a world coordinate value. 
            </summary>
            <param name="ruserx"> An x-coordinate value in window device coordinates. </param>
            <returns> Returns the world coordinate value corresponding to the input device coordinate value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.UserToWorldAbsY(System.Double)">
            <summary>
             This method converts an absolute device value into a world coordinate value. 
            </summary>
            <param name="rusery"> An y-coordinate value in window device coordinates. </param>
            <returns> Returns the world coordinate value corresponding to the input device coordinate value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.UserToWorldRelX(System.Double)">
            <summary>
             This method converts a device delta x value into a world coordinate value. 
            </summary>
            <param name="ruserx"> A x-coordinate delta value in user coordinates. </param>
            <returns> Returns the world coordinate value corresponding to the input device value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.UserToWorldRelY(System.Double)">
            <summary>
             This method converts a device delta y value into a world coordinate value. 
            </summary>
            <param name="rusery"> A y-coordinate delta value in user coordinates. </param>
            <returns> Returns the world coordinate value corresponding to the input device value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.UserToWorld(System.Double,System.Double)">
            <summary>
             This method converts x and y user coordinates into world coordinate values. 
            </summary>
            <param name="px"> A x-coordinate value in user coordinates. </param>
            <param name="py"> A y-coordinate value in user coordinates. </param>
            <returns> Returns the world coordinate values corresponding to the input user  coordinate values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.UserToWorld(com.quinncurtis.chart2dnet.Point2D,System.Double,System.Double)">
            <summary>
             This method converts x and y user coordinates into world coordinate values. 
            </summary>
            <param name="dest"> Returns the world coordinate values corresponding to the input  user coordinate values. </param>
            <param name="px"> A x-coordinate value in user coordinates. </param>
            <param name="py"> A y-coordinate value in user coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.UserToWorld(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts x and y user coordinates into world coordinate values. 
            </summary>
            <param name="source"> A xy point in user coordinates. </param>
            <returns> Returns the world coordinate values corresponding to the input user  coordinate values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.UserToWorld(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts x and y user coordinates into world coordinate values. 
            </summary>
            <param name="source"> A xy point in user coordinates. </param>
            <param name="dest"> Returns the world coordinate values corresponding to the input user  coordinate values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.WorldToUser(System.Double,System.Double)">
            <summary>
             This method converts x and y world coordinates into user coordinate values. 
            </summary>
            <param name="wx1"> A x-coordinate value in world coordinates. </param>
            <param name="wy1"> A y-coordinate value in world coordinates. </param>
            <returns> Returns the user coordinate values corresponding to the input world  coordinate values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.WorldToUser(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts x and y world coordinates into user coordinate values. 
            </summary>
            <param name="source"> A xy point in world coordinates. </param>
            <returns> Returns the user coordinate values corresponding to the input world  coordinate values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.WorldToUser(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts x and y world coordinates into user coordinate values. 
            </summary>
            <param name="source"> A xy point in world coordinates. </param>
            <param name="dest"> Returns the user coordinate values corresponding to the input world  coordinate values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.GetWorldCurrentPos">
            <summary>
             This method returns the current position, in world coordinates,  of the graphics pen. 
            </summary>
            <returns> Returns the current position of the graphics pen.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.GetWorldX1">
            <summary>
             This method returns the lower left x-value defining the world coordinate system. 
            </summary>
            <returns> Returns the lower left x-value defining the world coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.GetWorldY1">
            <summary>
             This method returns the lower left y-value defining the world coordinate system. 
            </summary>
            <returns> Returns the lower left y-value defining the world coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.GetWorldX2">
            <summary>
             This method returns the upper right x-value defining the world coordinate system. 
            </summary>
            <returns> Returns the upper right x-value defining the world coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorldCoordinates.GetWorldY2">
            <summary>
             This method returns the upper right y-value defining the world coordinate system. 
            </summary>
            <returns> Returns the upper right y-value defining the world coordinate system.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.WorldCoordinates.WorldScale">
            <summary>
             This method returns the rectangle defining the world coordinate system. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.WorkingCoordinates.graphAreaScale">
            <summary>
             Specifies the world coordinate system applied to the graph area.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.WorkingCoordinates.plotAreaScale">
            <summary>
             Specifies the world coordinate system applied to the plot area.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.WorkingCoordinates.userClip">
            <summary>
             Specifies the clipping rectangle in window device coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.WorkingCoordinates.graphBorder">
            <summary>
             Specifies the border, or insets, of the plot area inside the graph area.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.WorkingCoordinates.fixedGraphBorders">
            <summary>
             Specifies a fixed border, in pixels, of the plot area inside the graph area. Only
             uses if the associated fixedGraphBordersEnable is true. Values ordered by
             BORDER_LEFT, BORDER_TOP, BORDER_RIGHT, BORDER_BOTTOM.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.WorkingCoordinates.fixedGraphBordersEnable">
            <summary>
             Specifies a fixed borderis be used as the border
             between the plotting area of the edge of the graph. Values ordered by
             BORDER_LEFT, BORDER_TOP, BORDER_RIGHT, BORDER_BOTTOM.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.WorkingCoordinates.clippingArea">
            <summary>
             True specifies that plot objects are clipped to the clipping rectangle.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.InitDefaults">
            <summary>
              Initializes default values for the WorkingCoordinates object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.ErrorCheck(System.Int32)">
            <summary>
              Checks the WorkingCoordinates object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.InitGraphicsContext(System.Drawing.Graphics)">
            <summary>
              Sets the current graphics context and initializes the working coordinate  coordinate system. 
              All graphics output is sent to this  context. 
            </summary>
            <param name="g2"> Sets the current graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.Copy(com.quinncurtis.chart2dnet.WorkingCoordinates)">
            <summary>
              Copies the source scale. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.Clone">
            <summary>
             Returns an object that is a clone of this WorkingCoordinates object. 
            </summary>
            <returns> Returns a clone of this WorkingCoordinates object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.SetClippingArea(System.Int32)">
            <summary>
              Sets the clipping mode. 
            </summary>
            <param name="cliparea"> Use one of the cliparea constants: NO_CLIPPING,GRAPH_AREA_CLIPPING,  
            PLOT_AREA_CLIPPING, or INHERIT_CLIPPING.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.CalcPlotClipRect">
            <summary>
              Calculates the bounds of the plot area clipping rectangle using  window device coordinates.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.CalcWorkingScale(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             This method defines the bounds of the working coordinate system, extending  the working coordinate 
             system defined for the plotting area to the entire  graph area. 
            </summary>
            <param name="plotareascale"> Specifies the coordinate values of the plot area.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.GetPlotRect">
            <summary>
              Calculates and returns the bounds of the plot area clipping rectangle using  window device coordinates. 
            </summary>
            <returns> Returns the bounds of the plot area clipping rectangle using  window device coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.GetGraphRect">
            <summary>
              This method returns the bounds of the graph area in  window device coordinates. 
            </summary>
            <returns> Returns the bounds of the plot area clipping rectangle using  window device coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.GetGraphAspectRatio">
            <summary>
              This method returns the aspect ratio (H/W) of the graph area. 
            </summary>
            <returns> Returns the aspect ratio (H/W) of the graph area.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.UpdateScale">
            <summary>
             This method updates the graph area scale based on the plot area scale.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.SetWorkingScale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Sets the minimum and maximum values for the plotting area, and the  scale mode for the x- and y-axis. 
            </summary>
            <param name="rX1"> Sets the lower left x-value for the plotting area working coordinate system. </param>
            <param name="rY1"> Sets the lower left y-value for the plotting area working coordinate system. </param>
            <param name="rX2"> Sets the upper right x-value for the plotting area working coordinate system. </param>
            <param name="rY2"> Sets the upper right y-value for the plotting area working coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.SetWorkingScale(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              Sets the minimum and maximum values for the plotting area, and the  scale mode for the x- and y-axis. 
            </summary>
            <param name="rect"> Sets coordinates of the plotting area.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.#ctor">
            <summary>
             The default WorkingCoordinates constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This constructor creates a new WorkingCoordinates object using the specified  minimum and maximum values 
             for the x- and y-axis. 
            </summary>
            <param name="rX1"> Sets the lower left x-value for the plotting area working coordinate system. </param>
            <param name="rY1"> Sets the lower left y-value for the plotting area working coordinate system. </param>
            <param name="rX2"> Sets the upper right x-value for the plotting area working coordinate system. </param>
            <param name="rY2"> Sets the upper right y-value for the plotting area working coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.SetGraphBorderFrame(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             This method initializes the position and size of the plot area inside the graph area,  specified using 
             graph normalized coordinates. 
            </summary>
            <param name="border"> Specifies the rectangle defining the plot area border.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.SetGraphBorderFrame(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This method initializes the position and size of the plot area inside the graph area,  
             specified using graph normalized coordinates. 
            </summary>
            <param name="rLeft"> The left x-position of the plotting area inside the graph area specified using graph 
            normalized coordinates. </param>
            <param name="rTop"> The top y-position of the plotting area inside the graph area specified using graph 
            normalized coordinates. </param>
            <param name="width"> The width of the plotting area inside the graph area specified using graph normalized 
            coordinates. </param>
            <param name="height"> The height of the plotting area inside the graph area specified using graph normalized 
            coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.SetGraphBorderDiagonal(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This method initializes the position and size of the plot area inside the graph area,  specified using graph 
             normalized coordinates. 
            </summary>
            <param name="rLeft"> The left x-position of the plotting area inside the graph area specified using graph 
            normalized coordinates. </param>
            <param name="rTop"> The top y-position of the plotting area inside the graph area specified using graph 
            normalized coordinates. </param>
            <param name="rRight"> The right x-position of the plotting area inside the graph area specified using 
            graph normalized coordinates. </param>
            <param name="rBottom"> The bottom y-position of the plotting area inside the graph area specified using 
            graph normalized coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.SetGraphBorderInsets(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This method initializes the inset of the plot area inside the graph area,  specified using graph 
             normalized coordinates. 
            </summary>
            <param name="rLeft"> The left inset of the plotting area inside the graph area specified using graph 
            normalized coordinates. </param>
            <param name="rTop"> The top inset of the plotting area inside the graph area specified using graph 
            normalized coordinates. </param>
            <param name="rRight"> The right inset of the plotting area inside the graph area specified using graph 
            normalized coordinates. </param>
            <param name="rBottom"> The bottom inset of the plotting area inside the graph area specified using graph 
            normalized coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.SetFixedGraphBorderInsets(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             This method initializes the inset of the plot area inside the graph area,  specified using graph 
             device coordinates. 
            </summary>
            <param name="rLeft"> The left inset of the plotting area inside the graph area specified using graph 
            device coordinates. </param>
            <param name="rTop"> The top inset of the plotting area inside the graph area specified using graph 
            device coordinates. </param>
            <param name="rRight"> The right inset of the plotting area inside the graph area specified using graph 
            device coordinates. </param>
            <param name="rBottom"> The bottom inset of the plotting area inside the graph area specified using graph 
            device coordinates.</param>
            <param name="leftEnable"> Use a fixed pixel border for this side.</param>	 
            <param name="topEnable"> Use a fixed pixel border for this side.</param>	 
            <param name="rightEnable"> Use a fixed pixel border for this side.</param>	 
            <param name="bottomEnable"> Use a fixed pixel border for this side.</param>	 
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.SetFixedGraphBorderInset(System.Int32,System.Double,System.Boolean)">
            <summary>
             This method initializes the inset of the plot area inside the graph area,  specified using graph 
              normalized coordinates. 
            </summary>
              <param name="border"> Set the value of this border for the plotting area. User one of the
             border constants: LEFT_BORDER, TOP_BORDER, RIGHT_BORDER, BOTTOM_BORDER. </param> 
              <param name="bordervalue"> The left inset of the plotting area inside the graph area specified using graph 
              normalized coordinates. </param>
             <param name="enable"> Enable this border for fixed borders.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.NormalizeCoord(System.Double,System.Double,System.Double)">
            <summary>
             This method normalizes a value using the specified range. 
            </summary>
            <param name="r"> The value that is to be normalized. </param>
            <param name="minr"> The minimum value of the normalized range. </param>
            <param name="maxr"> The maximum value of the normalized range. </param>
            <returns> Returns the value of r normalized against the range  minr to maxr.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.UnNormalizeCoord(System.Double,System.Double,System.Double)">
            <summary>
             This method converts a normalized value to working coordinate value  using the specified range. 
            </summary>
            <param name="r"> The normal value that is to be converted. </param>
            <param name="minr"> The minimum value of the normalized range. </param>
            <param name="maxr"> The maximum value of the normalized range. </param>
            <returns> Returns the value of r converted to the specified working coordinate range.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.GetWorkingRangeX">
            <summary>
             This method returns the range of the current working scale  of the graph area for the x-dimension. 
            </summary>
            <returns> Returns the range of the current working scale  of the graph area for the x-dimension.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.GetWorkingRangeY">
            <summary>
             This method returns the range of the current working scale  of the graph area for the y-dimension. 
            </summary>
            <returns> Returns the range of the current working scale  of the graph area for the y-dimension.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.GetClippingArea">
            <summary>
             This method returns True if clipping to the plot area is currently on. 
            </summary>
            <returns> Returns true if clipping to the plot area is currently on.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.GetPlotAreaScale">
            <summary>
             Returns the working scale coordinates of the plot area. 
            </summary>
            <returns> Returns the coordinates of the plot area.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.SetPlotAreaScale(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Sets the coordinates of the plot area. 
            </summary>
            <param name="rect"> Sets the coordinates of the plot area.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.WorkingCoordinates.GetGraphAreaScale">
            <summary>
             Returns the working scale coordinates of the graph area. 
            </summary>
            <returns> Returns the coordinates of the graph area.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.WorkingCoordinates.GraphBorderFrame">
            <summary>
             This method initializes the position and size of the plot area inside the graph area,  
             specified using graph normalized coordinates. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.WorkingCoordinates.ClippingArea">
            <summary>
              Use one of the cliparea constants: NO_CLIPPING,GRAPH_AREA_CLIPPING,  PLOT_AREA_CLIPPING, or INHERIT_CLIPPING.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PhysicalCoordinates.xScale">
            <summary>
             Default x-scale is a linear scale, 0.0 to 1.0
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PhysicalCoordinates.yScale">
            <summary>
             Default y-scale is a linear scale, 0.0 to 1.0
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PhysicalCoordinates.physPlotScale">
            <summary>
             The default endpoints of the xy coordinate system
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PhysicalCoordinates.normYDown">
            <summary>
             A flag the sets the direction of the y-value in normalized coordinates. True  means that 0.0 is the upper 
             left corner, false, lower left corner.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.InitDefaults">
            <summary>
              Initializes default values for the scale object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.ErrorCheck(System.Int32)">
            <summary>
              Checks the current scale object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.Copy(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              Copies the source coordinate system. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.#ctor">
            <summary>
             The default PhysicalCoordinates constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.#ctor(com.quinncurtis.chart2dnet.Scale,com.quinncurtis.chart2dnet.Scale)">
            <summary>
             This constructor creates a new PhysicalCoordinates object, specifying the  Scale objects used to 
             transform x- and y-values to/from physical to working coordinates. 
            </summary>
            <param name="xscale"> Sets the Scale object used to transform x-values to/from physical to working coordinates. </param>
            <param name="yscale"> Sets the Scale object used to transform y-values to/from physical to working coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetPhysScales(com.quinncurtis.chart2dnet.Scale,com.quinncurtis.chart2dnet.Scale)">
            <summary>
             This method initializes an PhysicalCoordinates object, specifying the  Scale objects used to transform x- 
             and y-values to/from physical to working coordinates. 
            </summary>
            <param name="xscale"> Sets the Scale object used to transform x-values to/from physical to working coordinates. </param>
            <param name="yscale"> Sets the Scale object used to transform y-values to/from physical to working coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetXScale(com.quinncurtis.chart2dnet.Scale)">
            <summary>
             This method initializes the xScale scaling object, specifying the  Scale object used to transform x-values 
             to/from physical to working coordinates. 
            </summary>
            <param name="xscale"> Sets the Scale object used to transform x-values to/from physical to working coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetYScale(com.quinncurtis.chart2dnet.Scale)">
            <summary>
             This method initializes the yScale scaling object, specifying the  Scale object used to transform y-values 
             to/from physical to working coordinates. 
            </summary>
            <param name="yscale"> Sets the Scale object used to transform y-values to/from physical to working coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetXScale">
            <summary>
             This method returns the xScale scaling object, the  Scale object used to transform x-values to/from physical 
             to working coordinates. 
            </summary>
            <returns> Returns the Scale object used to transform x-values to/from physical to working coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetYScale">
            <summary>
             This method returns the yScale scaling object, the  Scale object used to transform y-values to/from physical 
             to working coordinates. 
            </summary>
            <returns>  Returns the Scale object used to transform y-values to/from physical to working coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetPhysScale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This method initializes an PhysicalCoordinates object using the specified  minimum and maximum values for 
             the x- and y-axis. 
            </summary>
            <param name="rX1"> Sets the lower left x-value for the plotting area physical coordinate system. </param>
            <param name="rY1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="rX2"> Sets the upper right x-value for the plotting area physical coordinate system. </param>
            <param name="rY2"> Sets the upper right y-value for the plotting area physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetPhysScale(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             This method initializes an PhysicalCoordinates object using the specified  minimum and maximum values for 
             the x- and y-axis. 
            </summary>
            <param name="rect"> Sets the minimum and maximum x- and y-values. The Rectangle2D  object actually holds 
            the minimum x- and y-values, and the width and height  of the scale. The width and height values are added to the minimum x- and y-values  in order to set the maximum x- and y-values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.ScaleInverted(System.Int32)">
            <summary>
             It is possible for the x-scale, or the y-scale, or both, to be inverted.  This is accomplished by just 
             swapping the minimum and maximum values  when setting the endpoints of the scale. Normal physical 
             coordinate  scaling increases from left to right, and from top to bottom. 
            </summary>
            <param name="axis"> Specifies which coordinate to check. </param>
            <returns> Returns true if the specified coordinate is inverted.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.PhysToWorkingScale(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts a point from physical coordinates to working coordinates. 
            </summary>
            <param name="dest"> Returns the value of the point in working coordinates. </param>
            <param name="source"> Specifies the value of the point in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WorkingToPhysScale(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts a point from working coordinates to physical coordinates. 
            </summary>
            <param name="dest"> Returns the value of the point in physical coordinates. </param>
            <param name="source"> Specifies the value of the point in working coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.PhysToWorkingScale(System.Int32,System.Double)">
            <summary>
             This method converts an x- or y-coordinate from physical coordinates to working coordinates. 
            </summary>
            <param name="axis"> Specifies if the value being converted is an x-coordinate or y-coordinate. Use  
            either theX_AXIS orY_AXIS constant. </param>
            <param name="v"> The coordinate value that is converted from physical coordinates to working coordinates. </param>
            <returns> Returns the value of the coordinate in working coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WorkingToPhysScale(System.Int32,System.Double)">
            <summary>
             This method converts an x- or y-coordinate from working coordinates to physical coordinates. 
            </summary>
            <param name="axis"> Specifies if the value being converted is an x-coordinate or y-coordinate. Use  
            either theX_AXIS orY_AXIS constant. </param>
            <param name="v"> The coordinate value that is converted from working coordinates to physical coordinates. </param>
            <returns> Returns the value of the coordinate in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.ChartTransform(System.Drawing.Graphics)">
            <summary>
             This method establishes a physical coordinate system for the current viewport,  mapping the physical 
             coordinate system to the viewport. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.NormalizeRect(System.Double,System.Double,System.Int32)">
            <summary>
             This method returns the normalized width and height of a rectangle, using the  specified graph area 
             physical coordinate system range. 
            </summary>
            <param name="w"> The width of the rectangle in physical coordinates. </param>
            <param name="h"> The height of the rectangle in physical coordinates. </param>
            <param name="nmode"> Use the constant NORM_GRAPH_POS if the rectangle  is to be normalized using the 
            graph area, or NORM_PLOT_POS  if the rectangle is to be normalized using the plot area. </param>
            <returns> Returns the width and height of the normalized rectangle  in an Dimension object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.UnNormalizeRect(System.Double,System.Double,System.Int32)">
            <summary>
             This method converts a rectangles normalized width and height into  physical coordinates. 
            </summary>
            <param name="w"> The width of the rectangle in normalized coordinates. </param>
            <param name="h"> The height of the rectangle in normalized coordinates. </param>
            <param name="nmode"> Use the constant NORM_GRAPH_POS if the rectangle  is specified using graph area 
            normalized coordinates, or NORM_PLOT_POS  if the rectangle is specified using plot area normalized coordinates. </param>
            <returns> Returns the width and height of the rectangle in  an Dimension object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.UnNormalizeRect(com.quinncurtis.chart2dnet.Dimension,System.Double,System.Double,System.Int32)">
            <summary>
             This method converts a rectangles normalized width and height into  physical coordinates. 
            </summary>
            <param name="dest"> Returns the width and height of the rectangle  in an Dimension object. </param>
            <param name="w"> The width of the rectangle in normalized coordinates. </param>
            <param name="h"> The height of the rectangle in normalized coordinates. </param>
            <param name="nmode"> Use the constant NORM_GRAPH_POS if the rectangle  is specified using graph area 
            normalized coordinates, or NORM_PLOT_POS  if the rectangle is specified using plot area normalized coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.NormalizePoint(com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
             This method converts the coordinates of a point from physical  coordinates to normalized coordinates. 
            </summary>
            <param name="source"> The coordinates of a point specified using physical coordinates. </param>
            <param name="nmode"> Use the constant NORM_GRAPH_POS if the point  is to be normalized using the 
            graph area, or NORM_PLOT_POS  if the point is to be normalized using the plot area. </param>
            <returns> Returns the coordinates of the point in normalized coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.NormalizePoint(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
             This method converts the coordinates of a point from physical  coordinates to normalized coordinates. 
            </summary>
            <param name="dest"> Returns the coordinates of the point in normalized coordinates. </param>
            <param name="source"> The coordinates of a point specified using physical coordinates. </param>
            <param name="nmode"> Use the constant NORM_GRAPH_POS if the point  is to be normalized using the graph 
            area, or NORM_PLOT_POS  if the point is to be normalized using the plot area.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.UnNormalizePoint(com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
             This method converts the coordinates of a point from normalized  coordinates to physical coordinates. 
            </summary>
            <param name="source"> The coordinates of a point specified using normalized coordinates. </param>
            <param name="nmode"> Use the constant NORM_GRAPH_POS if the point  is specified using graph area 
            normalized coordinates, or NORM_PLOT_POS  if the point is specified using plot area normalized coordinates. </param>
            <returns> Returns the coordinates of the point in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.UnNormalizePoint(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
             This method converts the coordinates of a point from normalized  coordinates to physical coordinates. 
            </summary>
            <param name="dest"> Returns the coordinates of the point in physical coordinates. </param>
            <param name="source"> The coordinates of a point specified using normalized coordinates. </param>
            <param name="nmode"> Use the constant NORM_GRAPH_POS if the point  is specified using graph area 
            normalized coordinates, or NORM_PLOT_POS  if the point is specified using plot area normalized coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.ConvertCoord(System.Int32,com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
             This method converts the coordinates of a point from one  coordinate system to another. 
            </summary>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> The coordinates of a the point that is to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <returns> Returns the converted coordinate value as a Point2D object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.ConvertCoordArray(com.quinncurtis.chart2dnet.Point2D[],System.Int32,com.quinncurtis.chart2dnet.Point2D[],System.Int32,System.Int32)">
            <summary>
             This method converts an array of points from one  coordinate system to another. 
            </summary>
            <param name="dest"> An array of Point2D objects, of size n, that returns the converted coordinate  values. </param>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate 
            system constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> An array of Point2D, of size n, that holds the points that are to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="n"> The number of points in source and destination arrays.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.ConvertCoord(com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
             This method converts the coordinates of a point from one  coordinate system to another. 
            </summary>
            <param name="dest"> Returns the converted coordinate value as a Point2D object. </param>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate 
            system constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> The coordinates of a the point that is to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS;</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.ConvertDimension(System.Int32,com.quinncurtis.chart2dnet.Dimension,System.Int32)">
            <summary>
             This method converts width and height dimensions from one  coordinate system to another. 
            </summary>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate 
            system constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> The width and height values that are to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <returns> Returns the converted dimension values as an Dimension object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.ConvertDimension(com.quinncurtis.chart2dnet.Dimension,System.Int32,com.quinncurtis.chart2dnet.Dimension,System.Int32)">
            <summary>
             This method converts width and height dimensions from one  coordinate system to another. 
            </summary>
            <param name="dest"> Returns the converted dimension values as an Dimension object. </param>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> The width and height values that are to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS;</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.ConvertRect(com.quinncurtis.chart2dnet.Rectangle2D,System.Int32,com.quinncurtis.chart2dnet.Rectangle2D,System.Int32)">
            <summary>
             This method converts Rectangle2D object from one  coordinate system to another. 
            </summary>
            <param name="dest"> Returns the converted Rectangle2D values. </param>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate 
            system constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> The source Rectangle2D object that is to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS;</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.ConvertRect(System.Int32,com.quinncurtis.chart2dnet.Rectangle2D,System.Int32)">
            <summary>
             This method converts Rectangle2D object from one  coordinate system to another. 
            </summary>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> The source Rectangle2D object that is to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <returns> Returns the converted Rectangle2D values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetStringX(System.Drawing.Graphics,System.String,System.Int32)">
            <summary>
             This method returns the width of a string in the units of the  specified coordinate system. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="s"> The string the width is calculated for. </param>
            <param name="npostype"> Specifies the coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <returns> Returns the width of a string in the units of the  specified coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetStringY(System.Drawing.Graphics,System.String,System.Int32)">
            <summary>
             This method returns the height of a string in the units of the  specified coordinate system. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="s"> The string the height is calculated for. </param>
            <param name="npostype"> Specifies the coordinate system. Use one  of the coordinate system 
            constants:DEV_POS,PHYS_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <returns> Returns the height of a string in the units of the  specified coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WGetStringX(System.Drawing.Graphics,System.String)">
            <summary>
             This method return the x-dimension width of string in current physical coordinates. 
            </summary>
            <param name="g2"> A graphics context. </param>///
            <param name="s"> The source string object. </param>
            <returns> Returns the x-dimension width of string in current physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WGetStringY(System.Drawing.Graphics,System.String)">
            <summary>
             This method return the y-dimension height of string in current physical coordinates. 
            </summary>
            <param name="g2"> A graphics context. </param>///
            <param name="s"> The source string object. </param>
            <returns> Returns the y-dimension height of string in current physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WMoveToAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double)">
            <summary>
             This method converts the specified x- and y-coordinates to device coordinates, and adds a 
             corresponding move segment to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x"> A x-coordinate value in physical coordinates. </param>
            <param name="y"> A y-coordinate value in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WLineToAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double)">
            <summary>
             This method converts the specified x- and y-coordinates to device coordinates, and adds a corresponding 
             lineto segment to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x"> A x-coordinate value in physical coordinates. </param>
            <param name="y"> A y-coordinate value in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WLineAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This method converts the specified starting and ending x- and y-coordinates to device coordinates, 
             and adds a corresponding line segment to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x1"> The starting x-coordinate value in physical coordinates. </param>
            <param name="y1"> The starting y-coordinate value in physical coordinates. </param>
            <param name="x2"> The ending x-coordinate value in physical coordinates. </param>
            <param name="y2"> The ending y-coordinate value in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WLineAbs(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Double,System.Double,System.Drawing.Pen,System.Boolean,System.Boolean)">
            <summary>
             This method converts the specified starting and ending x- and y-coordinates to device coordinates, 
             and adds a corresponding line segment to the specified path. It also has parameters that support 
             immediate mode drawing of the
             line segment.
            </summary>
            <param name="g2"> The graphics context.</param>
            <param name="path"> A general path object. </param>
            <param name="x1"> The starting x-coordinate value in physical coordinates. </param>
            <param name="y1"> The starting y-coordinate value in physical coordinates. </param>
            <param name="x2"> The ending x-coordinate value in physical coordinates. </param>
            <param name="y2"> The ending y-coordinate value in physical coordinates.</param>
            <param name="linepen"> Use the specified pen if draw mode is immediate.</param>
            <param name="dodraw"> Draw the line segment immediately if true.</param>
            <param name="appendpath"> Append the line segment to the path.</param>	 
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WLineAbs(System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            
            <summary>
             This method converts the specified starting and ending x- and y-coordinates to device coordinates, and 
             adds a corresponding line segment to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="p1"> The starting coordinate values in physical coordinates. </param>
            <param name="p2"> The ending coordinate values in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WLineRel(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double)">
            <summary>
             This method implements a relative lineto operation using physical coordinates.  It converts the x and y 
             physical coordinates into window device coordinates,  adds the values to the current pen position and 
             adds a lineto segment to  the new position to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="deltax"> An x-coordinate value in physical coordinates. </param>
            <param name="deltay"> A y-coordinate value in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WStepLineToAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Int32)">
            <summary>
             This method converts the specified x- and y-coordinates to device coordinates, and adds corresponding 
             lineto segments to the specified path.  Four different modes are supported for connecting the previously 
             drawn point  to the new position. These modes are:  NO_STEP - Draw directly from the previous point to 
             the new point.  STEP_START - Use two lines to draw to the new point. Draw first to (old X, new Y) and  
             then (new X, new Y).  STEP_END - Use two lines to draw to the new point. Draw first to (new X, old Y)
              and  then (new X, new Y).  STEP_NO_RISE_LINE - Use one line to draw to the new point. Move to 
              (old X, new Y) without  drawing a line. Then draw a line to (new X, new Y). 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x2"> A x-coordinate value in physical coordinates. </param>
            <param name="y2"> A y-coordinate value in physical coordinates. </param>
            <param name="stepmode"> The step mode for the connection line(s). Use one of the step line  
            constants: NO_STEP, STEP_START, STEP_END or STEP_NO_RISE_LINE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WStepLineToAbs(System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
             This method converts the specified x- and y-coordinates to device coordinates, and adds corresponding 
             lineto segments to the specified path.  Four different modes are supported for connecting the previously 
             drawn point  to the new position. These modes are:  NO_STEP Draw directly from the previous point to the 
             new point  STEP_START Use two lines to draw to the new point. Draw first to (old X, new Y) and  then 
             (new X, new Y).  STEP_END Use two lines to draw to the new point. Draw first to (new X, old Y) and  
             then (new X, new Y).  STEP_NO_RISE_LINE Use one line to draw to the new point. Move to (old X, new Y) 
             without  drawing a line. Then draw a line to (new X, new Y). 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="p1"> A point in physical coordinates. </param>
            <param name="stepmode"> The step mode for the connection line(s). Use one of the step line  constants: 
            NO_STEP, STEP_START, STEP_END or STEP_NO_RISE_LINE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WStepLineAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
             This method converts the specified x- and y-coordinates to device coordinates, and adds corresponding 
             lineto segments to the specified path.  Four different modes are supported for connecting the previously 
             drawn point  to the new position. These modes are:  NO_STEP Draw directly from the previous point to 
             the new point  STEP_START Use two lines to draw to the new point. Draw first to (old X, new Y) and  
             then (new X, new Y).  STEP_END Use two lines to draw to the new point. Draw first to (new X, old Y) 
             and  then (new X, new Y).  STEP_NO_RISE_LINE Use one line to draw to the new point. Move to 
             (old X, new Y) without  drawing a line. Then draw a line to (new X, new Y). 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x1"> The starting x-coordinate value in physical coordinates. </param>
            <param name="y1"> The starting y-coordinate value in physical coordinates. </param>
            <param name="x2"> The ending x-coordinate value in physical coordinates. </param>
            <param name="y2"> The ending y-coordinate value in physical coordinates. </param>
            <param name="stepmode"> The step mode for the connection line(s). Use one of the step line  
            constants: NO_STEP, STEP_START, STEP_END or STEP_NO_RISE_LINE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WStepLineAbs(System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
             This method converts the specified x- and y-coordinates to device coordinates, and adds corresponding 
             lineto segments to the specified path.  Four different modes are supported for connecting the previously 
             drawn point  to the new position. These modes are:  NO_STEP Draw directly from the previous point to 
             the new point  STEP_START Use two lines to draw to the new point. Draw first to (old X, new Y) and  
             then (new X, new Y).  STEP_END Use two lines to draw to the new point. Draw first to (new X, old Y) 
             and  then (new X, new Y).  STEP_NO_RISE_LINE Use one line to draw to the new point. Move to (old X, new Y) 
             without  drawing a line. Then draw a line to (new X, new Y). 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="p1"> The starting coordinate values in physical coordinates. </param>
            <param name="p2"> The ending coordinate values in physical coordinates. </param>
            <param name="stepmode"> The step mode for the connection line(s). Use one of the step line  
            constants: NO_STEP, STEP_START, STEP_END or STEP_NO_RISE_LINE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WPolyLineAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
             This method adds multiple line segments, defined using physical coordinates,  to the specified path. 
            </summary>
            <param name="path"> The line segments are added to this path. </param>
            <param name="x"> An array, size numdat, of x-values defining the endpoints of the line segments  
            that are added to the specified path. </param>
            <param name="y"> An array, size numdat, of y-values defining the endpoints of the line segments  
            that are added to the specified path. </param>
            <param name="numdat"> The starting y-coordinate value of the line segment. </param>
            <param name="stepmode"> The step mode for the connection line(s). Use one of the step line  
            constants: NO_STEP, STEP_START, STEP_END or STEP_NO_RISE_LINE. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WPolyLineAbs(System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.DoubleArray,com.quinncurtis.chart2dnet.DoubleArray,System.Int32)">
            <summary>
             This method converts the specified x- and y-arrays to device coordinates, 
             and draws the resulting line as a polyline.  Four different modes 
             are supported for connecting the previously drawn point  to the new position. These modes are:  
             NO_STEP Draw directly from the previous point to the new point  STEP_START Use two lines to draw to 
             the new point. Draw first to (old X, new Y) and  then (new X, new Y).  STEP_END Use two lines to draw 
             to the new point. Draw first to (new X, old Y) and  then (new X, new Y).  STEP_NO_RISE_LINE is not supported 
             because it cannot be drawn as a contiguous polyline. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x"> A DoubleArray array of the x-values of the polygon path. </param>
            <param name="y"> A DoubleArray array of the y-values of the polygon path. </param>
            <param name="stepmode"> The step mode for the connection line(s). Use one of the step line  
            constants: NO_STEP, STEP_START, STEP_END or STEP_NO_RISE_LINE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WPolyLineAbs(System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.Point2D[],System.Int32,System.Int32)">
            <summary>
             This method adds multiple line segments, defined using physical coordinates,  to the specified path. 
            </summary>
            <param name="path"> The line segments are added to this path. </param>
            <param name="p"> An array, size numdat, of world coordinate points defining the endpoints of the line segments </param>
            <param name="numdat"> The starting y-coordinate value of the line segment. </param>
            <param name="stepmode"> The step mode for the connection line(s). Use one of the step line  
            constants: NO_STEP, STEP_START, STEP_END or STEP_NO_RISE_LINE. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WRectangle(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This method adds a rectangle, defined using physical coordinates, to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x1"> A x-coordinate value in physical coordinates representing the lower left  
            corner of the rectangle. </param>
            <param name="y1"> A y-coordinate value in physical coordinates rep resending the lower left  
            corner of the rectangle. </param>
            <param name="w"> The width of the rectangle in physical coordinates. </param>
            <param name="h"> The height of the rectangle in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WRoundedRectangle(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This method adds a rectangle, defined using physical coordinates, to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x1"> A x-coordinate value in physical coordinates representing the lower left  
            corner of the rectangle. </param>
            <param name="y1"> A y-coordinate value in physical coordinates rep resending the lower left  
            corner of the rectangle. </param>
            <param name="w"> The width of the rectangle in physical coordinates. </param>
            <param name="h"> The height of the rectangle in physical coordinates.</param>
            <param name="corner"> The corner radius of the rounded rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetWCircle(System.Double,System.Double,System.Double)">
            <summary>
             This method converts a circle from physical coordinates to window device coordinates.  
             If returns the converted circle as an Arc2D object. 
            </summary>
            <param name="x"> A x-coordinate value in physical coordinates representing the circle center. </param>
            <param name="y"> A y-coordinate value in physical coordinates representing the circle center. </param>
            <param name="radius"> The radius of the circle in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.WCircle(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Double)">
            <summary>
             This method adds a circle, defined using physical coordinates, to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x"> A x-coordinate value in physical coordinates representing the circle center. </param>
            <param name="y"> A y-coordinate value in physical coordinates representing the circle center. </param>
            <param name="radius"> The radius of the circle in physical coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetPhysPlotScale">
            <summary>
             This method returns the physical coordinates  of the plotting area. 
            </summary>
            <returns> This method returns the physical coordinates  of the plotting area.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetPhysPlotScale(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Sets the physical coordinates of the plotting area. 
            </summary>
            <param name="physrect"> Sets the physical coordinates of the plotting area.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetStartX">
            <summary>
             This method returns the lower left x-value for the physical coordinate  system of the plotting area. 
            </summary>
            <returns> Returns the lower left x-value for the physical coordinate  system of the plotting area.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetStartY">
            <summary>
             This method returns the lower left y-value for the physical coordinate  system of the plotting area. 
            </summary>
            <returns> Returns the lower left y-value for the physical coordinate  system of the plotting area.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetStopX">
            <summary>
             This method returns the upper right x-value for the physical coordinate  system of the plotting area. 
            </summary>
            <returns> Returns the upper right x-value for the physical coordinate  system of the plotting area.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetStopY">
            <summary>
             This method returns the upper right y-value for the physical coordinate  system of the plotting area. 
            </summary>
            <returns> Returns the upper right y-value for the physical coordinate  system of the plotting area.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetStart(System.Int32)">
            <summary>
             This method returns the lower left x- or y-value for the physical coordinate  system of the plotting area. 
            </summary>
            <param name="naxis"> SpecifyX_AXIS for the lower left x-value, orY_AXIS for the  lower left y-value. </param>
            <returns> Returns the lower left x- or y-value for the physical coordinate  system of the plotting area.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetStop(System.Int32)">
            <summary>
             This method returns the upper right x- or y-value for the physical coordinate  system of the plotting area. 
            </summary>
            <param name="naxis"> SpecifyX_AXIS for the upper right x-value, orY_AXIS for the  upper right y-value. </param>
            <returns> Returns the upper right x- or y-value for the physical coordinate  system of the plotting area.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.PhysToUserX(System.Double)">
            <summary>
             This method converts an x-coordinate value from physical coordinates to a window device coordinates. 
            </summary>
            <param name="x"> The physical x-coordinate value that is converted to window device coordinates. </param>
            <returns> Returns the value of x converted to window device coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.PhysToUserY(System.Double)">
            <summary>
             This method converts an y-coordinate value from physical coordinates to window device coordinates. 
            </summary>
            <param name="y"> The physical y-coordinate value that is converted to window device coordinates. </param>
            <returns> source Returns the value of y converted to window device coordinates .</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.UserToPhysX(System.Double)">
            <summary>
             This method converts an x-coordinate value from window device coordinates to physical coordinates. 
            </summary>
            <param name="x"> The physical x-coordinate value that is converted to physical coordinates. </param>
            <returns> Returns the value of x converted to physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.UserToPhysY(System.Double)">
            <summary>
             This method converts an y-coordinate value from window device coordinates to physical coordinates. 
            </summary>
            <param name="y"> The physical y-coordinate value that is converted to physical coordinates. </param>
            <returns> Returns the value of y converted to physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.PhysToUser(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts a point from physical coordinates to window device coordinates. 
            </summary>
            <param name="source"> The physical coordinates that are converted to window device coordinates. </param>
            <returns> Returns the point converted to window device coordinates .</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.UserToPhys(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts a point from window device coordinates to physical coordinates. 
            </summary>
            <param name="source"> The window device coordinates that are converted to physical coordinates. </param>
            <returns> Returns the point converted to physical coordinates .</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.PhysToUser(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts a point from physical coordinates to window device coordinates. 
            </summary>
            <param name="source"> The physical coordinates that are converted to window device coordinates. </param>
            <param name="dest"> Returns the point converted to window device coordinates .</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.UserToPhys(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts a point from window device coordinates to physical coordinates. 
            </summary>
            <param name="source"> The window device coordinates that are converted to physical coordinates. </param>
            <param name="dest"> Returns the point converted to physical coordinates .</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.PhysAddX(System.Double,System.Double)">
            <summary>
             This method adds an increment to the x-coordinate value in physical coordinates. 
            </summary>
            <param name="x"> The x-coordinate value that is incremented. </param>
            <param name="increment"> The increment value. </param>
            <returns> Returns the new value in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.PhysAddY(System.Double,System.Double)">
            <summary>
             This method adds an increment to the y-coordinate value in physical coordinates. 
            </summary>
            <param name="y"> The y-coordinate value that is incremented. </param>
            <param name="increment"> The increment value. </param>
            <returns> Returns the new value in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SwapScaleOrientation">
            <summary>
             This method swaps the minimum x-value of the coordinate system with the  minimum y-value; and the 
             maximum x-value with the maximum y-value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.InvertScaleX">
            <summary>
             This method swaps the minimum x-value of the coordinate system with the  maximum x-value; the y-values of 
             the coordinate system remain unchanged. The  net result is an inverted x-axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.InvertScaleY">
            <summary>
             This method swaps the minimum y-value of the coordinate system with the  maximum y-value; the x-values of 
             the coordinate system remain unchanged. The  net result is an inverted y-axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.AutoScale(System.Int32,System.Int32)">
            <summary>
             This abstract method auto-scales the current physical coordinates system, using the current  physical 
             coordinate values as the starting point. 
            </summary>
            <param name="nroundmodeX"> The x-coordinate values are calculated using this rounding mode  
            (AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT). </param>
            <param name="nroundmodeY"> The y-coordinate values are calculated using this rounding mode  
            (AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT). </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.CheckValidPoint(System.Double,System.Double)">
            <summary>
             This method checks the validity of the x- and y-values of a datapoint. 
            </summary>
            <param name="x"> The x-value of the datapoint that is checked. </param>
            <param name="y"> The y-value of the datapoint that is checked. </param>
            <returns> Returns true if the x- and y-values represent a valid datapoint.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.Copy(System.Object)">
            <summary>
              This abstract method copies the source scale. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetCompatibleAxis(System.Int32)">
            <summary>
              This abstract method returns an axis compatible with the current physical coordinate system. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetScaleX(System.Double,System.Double)">
            <summary>
             Sets the x-coordinate bounds of the physical coordinate system for the plot area. 
            </summary>
            <param name="rX1"> Sets the lower left x-value for the plotting area of the physical coordinate system. </param>
            <param name="rX2"> Sets the upper right x-value for the plotting area of the physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetScaleY(System.Double,System.Double)">
            <summary>
             Sets the y-coordinate bounds of the physical coordinate system for the plot area. 
            </summary>
            <param name="rY1"> Sets the lower left y-value for the plotting area of the physical coordinate system. </param>
            <param name="rY2"> Sets the upper right y-value for the plotting area of the physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetCoordinateBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Sets the x- and y-coordinate bounds of the physical coordinate system for the plot area. 
            </summary>
            <param name="rX1"> Sets the lower left x-value for the plotting area of the physical coordinate system. </param>
            <param name="rX2"> Sets the upper right x-value for the plotting area of the physical coordinate system. </param>
            <param name="rY1"> Sets the lower left y-value for the plotting area of the physical coordinate system. </param>
            <param name="rY2"> Sets the upper right y-value for the plotting area of the physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetScaleStartX(System.Double)">
            <summary>
             Sets the lower left x-value for the plotting area of the physical coordinate system. 
            </summary>
            <param name="rX1"> Sets the lower left x-value for the plotting area of the physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetScaleStopX(System.Double)">
            <summary>
             Sets the maximum x-value for the plotting area of the physical coordinate system. 
            </summary>
            <param name="rX2"> Sets the upper right x-value for the plotting area of the physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetScaleStartY(System.Double)">
            <summary>
             Sets the lower left y-value for the plotting area of the physical coordinate system. 
            </summary>
            <param name="rY1"> Sets the lower left y-value for the plotting area of the physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.SetScaleStopY(System.Double)">
            <summary>
             Sets the upper right y-value for the plotting area of the physical coordinate system. 
            </summary>
            <param name="rY2"> Sets the upper right y-value for the plotting area of the physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetScaleStartX">
            <summary>
             This method returns the lower left x-value for the plotting area of the physical coordinate system. 
            </summary>
            <returns> Returns the lower left x-value for the plotting area of the physical coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetScaleStopX">
            <summary>
             This method returns the upper right x-value for the plotting area of the physical coordinate system. 
            </summary>
            <returns> Returns the upper right x-value for the plotting area of the physical coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetScaleStartY">
            <summary>
             This method returns the lower left y-value for the plotting area of the physical coordinate system. 
            </summary>
            <returns> Returns the lower left y-value for the plotting area of the physical coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.GetScaleStopY">
            <summary>
             This method returns the upper right y-value for the plotting area of the physical coordinate system. 
            </summary>
            <returns> Returns the upper right y-value for the plotting area of the physical coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset,System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in the supplied 
             TimeSimpleDataset object. 
            </summary>
            <param name="dataset"> The TimeSimpleDataset dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in the supplied 
             TimeSimpleDataset object. AUTOAXES_FAR rounding is  assumed for both x- and y-coordindates. 
            </summary>
            <param name="dataset"> The TimeSimpleDataset dataset used as the basis for the new coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in an array of 
             TimeSimpleDataset datasets. 
            </summary>
            <param name="datasets"> The array of dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PhysicalCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset[])">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in an array of 
             TimeSimpleDataset datasets. AUTOAXES_FAR rounding is  assumed for both x- and y-coordindates. 
            </summary>
            <param name="datasets"> The array of dataset used as the basis for the new coordinate system. </param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PhysicalCoordinates.ScaleStartX">
            <summary>
             Set/Get the left x-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PhysicalCoordinates.ScaleStopX">
            <summary>
             Set/Get the right x-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PhysicalCoordinates.ScaleStartY">
            <summary>
             Set/Get the lower y-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PhysicalCoordinates.ScaleStopY">
            <summary>
             Get/Set the upper y-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PhysicalCoordinates.ScaleMinX">
            <summary>
             Get the minimum x-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PhysicalCoordinates.ScaleMaxX">
            <summary>
             Get the maximum x-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PhysicalCoordinates.ScaleMinY">
            <summary>
             Get the minimum y-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PhysicalCoordinates.ScaleMaxY">
            <summary>
             Get the maximum y-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PhysicalCoordinates.XScale">
            <summary>
             Default x-scale is a linear scale, 0.0 to 1.0
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PhysicalCoordinates.YScale">
            <summary>
             Default y-scale is a linear scale, 0.0 to 1.0
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.InitDefaults">
            <summary>
              Initializes default values for the CartesianCoordinates object. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.ErrorCheck(System.Int32)">
            <summary>
              Checks the current scale object for common errors. 
            </summary>
            <param name="nerror"> Current error state.  </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.Copy(com.quinncurtis.chart2dnet.CartesianCoordinates)">
            <summary>
              Copies the source scale. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.Copy(System.Object)">
            <summary>
              Copies the source scale. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.Clone">
            <summary>
             Returns an object that is a clone of this CartesianCoordinates object. 
            </summary>
            <returns> Returns a clone of this CartesianCoordinates object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.#ctor">
            <summary>
             The default CartesianCoordinates constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.#ctor(System.Int32,System.Int32)">
            <summary>
             This constructor creates a new CartesianCoordinates object, specifying either  a linear or a 
             logarithmic scale for both x- and y-coordinates. Default values for  the minimum and maximum of 
             each scale are set to (0.0 - 100.0) for linear scales  and (1.0 - 100.0) for log scales. 
            </summary>
            <param name="xscale"> Sets the x-coordinate system to either linear or logarithmic scaling. Use one  of the 
            scaling constants: LINEAR_SCALE or LOG_SCALE. </param>
            <param name="yscale"> Sets the y-coordinate system to either linear or logarithmic scaling. Use one  of the 
            scaling constants: LINEAR_SCALE or LOG_SCALE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This constructor creates a new CartesianCoordinates object using the specified  minimum and maximum 
             values for the x- and y-coordinate systems. Linear scaling is assumed  for both the x- and 
             y-coordinate systems. 
            </summary>
            <param name="rX1"> Sets the lower left x-value for the plotting area physical coordinate system. </param>
            <param name="rY1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="rX2"> Sets the upper right x-value for the plotting area physical coordinate system. </param>
            <param name="rY2"> Sets the upper right y-value for the plotting area physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.SetCartesianXScaleTransform(System.Int32)">
            <summary>
             Sets the x-coordinate system to either linear or logarithmic. Default values for  the minimum and maximum 
             of the scale are set to (0.0 - 100.0) for linear scales  and (1.0 - 100.0) for log scales. 
            </summary>
            <param name="xscale"> Sets the x-coordinate system to either linear or logarithmic scaling. Use one  of the 
            scaling constants: LINEAR_SCALE or LOG_SCALE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.SetCartesianYScaleTransform(System.Int32)">
            <summary>
             Sets the y-coordinate system to either linear or logarithmic. Default values for  the minimum and maximum 
             of the scale are set to (0.0 - 100.0) for linear scales  and (1.0 - 100.0) for log scales. 
            </summary>
            <param name="yscale"> Sets the y-coordinate system to either linear or logarithmic scaling. Use one  
            of the scaling constants: LINEAR_SCALE or LOG_SCALE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.SetCartesianScaleTransforms(System.Int32,System.Int32)">
            <summary>
             This method specifies either a linear or a logarithmic scale for both x- and y-coordinates.  Default 
             values for the minimum and maximum of each scale are set to (0.0 - 100.0) for linear scales  and 
             (1.0 - 100.0) for log scales. 
            </summary>
            <param name="xscale"> Sets the x-coordinate system to either linear or logarithmic scaling. Use one  
            of the scaling constants: LINEAR_SCALE or LOG_SCALE. </param>
            <param name="yscale"> Sets the y-coordinate system to either linear or logarithmic scaling. Use one  
            of the scaling constants: LINEAR_SCALE or LOG_SCALE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.GetCompatibleAxis(System.Int32)">
            <summary>
             This method returns either a linear or a logarithmic axis object,  compatible with the specified 
             coordinate system (x or y). 
            </summary>
            <param name="axis"> Specify the coordinate direction, either x or y,  using one of the axis constants: 
            X_AXIS orY_AXIS. </param>
            <returns> returns either a linear or a logarithmic axis object,  compatible with the specified 
            coordinate system (x or y).</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.AutoScale(System.Int32,System.Int32)">
            <summary>
             This method initializes an CartesianCoordinates object, running the auto-axis algorithm on  
             the current minimum and maximum scaling values. Linear scaling is assumed. 
            </summary>
            <param name="nroundmodeX"> Sets the auto-scale mode for the x-coordinate. Use one of the  
            auto-scale rounding mode constants:AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT. </param>
            <param name="nroundmodeY"> Sets the auto-scale mode for the y-coordinate. Use one of the  
            auto-scale rounding mode constants:AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset,System.Int32,System.Int32)">
            <summary>
             This method initializes an CartesianCoordinates object based on the range  of x- and y-values in 
             the supplied dataset. 
            </summary>
            <param name="dataset"> The dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodeX"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants:AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT. </param>
            <param name="nroundmodeY"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants:AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset)">
            <summary>
             This method initializes an CartesianCoordinates object based on the range  of x- and y-values in the 
             supplied dataset. Linear scaling,  and theConstants.AUTOAXES_FAR rounding mode, is assumed for both 
             x- and y-coordinates. 
            </summary>
            <param name="dataset"> The dataset used as the basis for the new coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32,System.Int32)">
            <summary>
             This method initializes an CartesianCoordinates object based on the range  of x- and y-values in an 
             array of datasets. 
            </summary>
            <param name="datasets"> The array of dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodeX"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants:AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT. </param>
            <param name="nroundmodeY"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants:AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset[])">
            <summary>
             This method initializes an CartesianCoordinates object based on the range  of x- and y-values in an 
             array of datasets. Linear scaling,  and theConstants.AUTOAXES_FAR rounding mode, is assumed for both 
             x- and y-coordinates. 
            </summary>
            <param name="datasets"> The datasets array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.CalcAutoScale(com.quinncurtis.chart2dnet.ChartDataset,System.Int32,System.Int32)">
            <summary>
             This method initializes an CartesianCoordinates object based on the range  of x- and y-values in the 
             supplied dataset. 
            </summary>
            <param name="dataset"> The dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodeX"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants:AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT. </param>
            <param name="nroundmodeY"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants:AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.CalcAutoScale(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32,System.Int32)">
            <summary>
             This method initializes an CartesianCoordinates object based on the range  of x- and y-values in an 
             array of datasets. 
            </summary>
            <param name="datasets"> The array of dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodeX"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants:AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT. </param>
            <param name="nroundmodeY"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants:AUTOAXES_FAR,AUTOAXES_NEAR,AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CartesianCoordinates.CheckValidPoint(System.Double,System.Double)">
            <summary>
             This method checks the validity of the x- and y-values of a data point. 
            </summary>
            <param name="x"> The x-value of the data point that is checked. </param>
            <param name="y"> The y-value of the data point that is checked. </param>
            <returns> Returns true if the x- and y-values represent a valid data point.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.CellPlot">
            <summary>
              The CellPlot class extends the GroupPlot class and  displays cell plots. A cell plot is a collection 
              of rectangular objects  with independent positions, widths and heights, specified using the  values 
              of the associated group dataset. The number of groups  of the data set must be three. The X,Y[0] values 
              of the group dataset  represent the xy positions of the lower left corner of each cell,  the Y[1] values 
              set the width of each cell, and the Y[2] values set  the height of each cell.  Each cell can be filled 
              using a color,  or an image.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CellPlot.plotImage">
            <summary>
             The image used to optionally fill each cell of a cell plot.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.#ctor">
            <summary>
             The default CellPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the CellPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.InitDefaults">
            <summary>
              Initializes default values for the CellPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.Copy(com.quinncurtis.chart2dnet.CellPlot)">
            <summary>
              Copies the source CellPlot object. 
            </summary>
            <param name="source"> The source CellPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.Clone">
            <summary>
             Returns an object that is a clone of this CellPlot object. 
            </summary>
            <returns> Returns a clone of this CellPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new CellPlot object that will reside in  the specified coordinate system. 
              A cell plot is a collection of rectangular objects  with independent positions, widths and heights, 
              specified using the  values of the associated group dataset. 
            </summary>
            <param name="transform"> The coordinate system for the new CellPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new CellPlot object that will reside in  the specified coordinate system. 
              A cell plot is a collection of rectangular objects  with independent positions, widths and heights, 
              specified using the  values of the associated group dataset. 
            </summary>
            <param name="transform"> The coordinate system for the new CellPlot object. </param>
            <param name="dataset"> The cell plot will represent the values in this group data set.  The group 
            size of the data set must be three. The X,Y[0] values of the group dataset  represent the xy positions 
            of the lower left corner of each cell,  the Y[1] values set the width of each cell, and the Y[2] values 
            set  the height of each cell. </param>
            <param name="attrib"> Specifies the attributes (line color and line style) for the cell plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.InitCellPlot(com.quinncurtis.chart2dnet.GroupDataset,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This method initializes a new CellPlot object that will reside in  the specified coordinate system. 
              A cell plot is a collection of rectangular objects  with independent positions, widths and heights, 
              specified using the  values of the associated group dataset. 
            </summary>
            <param name="dataset"> The cell plot will represent the values in this group data set.  The group size 
            of the data set must be three. The X,Y[0] values of the group dataset  represent the xy positions of the 
            lower left corner of each cell,  the Y[1] values set the width of each cell, and the Y[2] values set  
            the height of each cell. </param>
            <param name="attrib"> Specifies the attributes (line color and line style) for the cell plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.CalcCellRect(System.Double,System.Double,System.Double,System.Double,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Assigns the position, height and width parameters of a Rectangle2D object used  as one of the cells in 
             the cell plot. 
            </summary>
            <param name="x"> The lower left x-position of the rectangle. </param>
            <param name="y"> The lower left y-position of the rectangle. </param>
            <param name="width"> The width of the rectangle. </param>
            <param name="height"> The height of the rectangle. </param>
            <param name="rect"> Returns an initialized Rectangle2D object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.DrawCellPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a cell plot using the current cell plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The cell plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the CellPlot object  is drawn 
              in the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects one of the cell objects. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.SetPlotImage(System.Drawing.Image)">
            <summary>
             Sets the image object that is optionally displayed in each cell. Set to  null to revert back to 
             filling each cell with a solid color according  to the plot object attributes. 
            </summary>
            <param name="imageobj"> The image object use to fill each cell.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CellPlot.GetPlotImage">
            <summary>
             Returns the image object that is optionally displayed in each cell. 
            </summary>
            <returns> imageobj Returns the image object use to fill each cell.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.CellPlot.BoxFillAttributes">
            <summary>
             Sets/Gets the image object that is optionally displayed in each cell. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.CFSupportClasses">
            <summary>
            Summary description for CFSupportClasses.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CFSupportClasses.#ctor">
            <summary>
            CFSupportClasses contructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CFSupportClasses.DefColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Defines a color using Color.FromArgb.
            </summary>
            <param name="a"> The alpha component, ignored for .Net CF.</param>
            <param name="r"> The r component</param>
            <param name="g"> The g component.</param>
            <param name="b"> The b component.</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartAttribute">
            <summary>
              This class consolidates the common line and fill attributes into a single class.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.primaryColor">
            <summary>
             The color used in drawing lines and text.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.fillColor">
            <summary>
             The color used for objects requiring area fills: rectangles, circles, symbols.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.lineWidth">
            <summary>
             The thickness of lines in window device coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.symbolSize">
            <summary>
             The size of symbols in window device coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.lineStyle">
            <summary>
             The line style used in drawing lines.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.fillStyle">
            <summary>
             The fill style used for objects requiring area fills: rectangles, circles, symbols.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.fillFlag">
            <summary>
             If true, objects with a fill option are filled using the fillColor field.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.lineFlag">
            <summary>
             If true, objects with a fill option are out1lined using the primaryColor field.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.currentPen">
            <summary>
             Holds the pen object used in simple line drawing.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.customPen">
            <summary>
             Holds the custom pen object used in simple line drawing.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.currentBrush">
            <summary>
             Holds the brush object used in simple line drawing.
            </summary>		
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.customBrush">
            <summary>
             Holds the custom brush object used in simple line drawing.
            </summary>				
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.resizeMultiplier">
            <summary>
             The line width attribute of the stroke property may be affected when the window  is resized. 
             The resizeMultiplier can be adjusted to change the line width,  without actually changing the 
             value of the lineWidth property.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.altLineStyles">
            <summary>
             This is a simple collection of 10 dash, dot and dash-dot lines styles.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.chartPens">
            <summary>
             Static cache of chart pens
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.chartBrushes">
            <summary>
             Static cache of chart brushes
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartAttribute.minimumLineWidth">
            <summary>
             Minimum line width
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.InitDefaults">
            <summary>
              Initializes default values for the  ChartAttributes class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.#ctor">
            <summary>
              Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.ErrorCheck(System.Int32)">
            <summary>
              Checks the current plot object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.#ctor(com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
             This constructor creates a new ChartAttribute object as a copy of an existing ChartAttribute object. 
            </summary>
            <param name="attr"> The new ChartAttribute object is a copy of this object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.#ctor(com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
             This constructor creates a new ChartAttribute object as a copy of the ChartAttribute object  
             stored in an GraphObj object. 
            </summary>
            <param name="source"> The new ChartAttribute object is a copy of the ChartAttribute  
            object stored in this GraphObj object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.#ctor(com.quinncurtis.chart2dnet.ChartPlot,System.Int32)">
            <summary>
             This constructor creates a new ChartAttribute object as a copy of the ChartAttribute object  
             associated with a specific group in an Plot object. 
            </summary>
            <param name="source"> The new ChartAttribute object is a copy of the ChartAttribute  
            associated with a specific group in an Plot object. </param>
            <param name="ngroup"> The ChartAttribute object associated with this group is copied.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.#ctor(System.Drawing.Color,System.Double,System.Drawing.Drawing2D.DashStyle,System.Drawing.Color)">
            <summary>
             This constructor creates a new ChartAttribute object using the specified attributes. 
            </summary>
            <param name="rgbcolor"> The primary line and text color, sets the field primaryColor. </param>
            <param name="rlinewidth"> The line width for all lines, sets the field lineWidth. </param>
            <param name="nlinestyle"> The line style for all lines, sets the field lineStyle. </param>
            <param name="rgbfillcolor"> The fill color for solid objects, sets the field fillColor</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.#ctor(System.Drawing.Color,System.Double,System.Drawing.Drawing2D.DashStyle)">
            <summary>
             This constructor creates a new ChartAttribute object using the specified attributes. 
            </summary>
            <param name="rgbcolor"> The primary line and text color, sets the field primaryColor. </param>
            <param name="rlinewidth"> The line width for all lines, sets the field lineWidth. </param>
            <param name="nlinestyle"> The line style for all lines, sets the field lineStyle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.#ctor(System.Drawing.Color,System.Double)">
            <summary>
             This constructor creates a new ChartAttribute object using the specified attributes. 
            </summary>
            <param name="rgbcolor"> The primary line and text color, sets the field primaryColor. </param>
            <param name="rlinewidth"> The line width for all lines, sets the field lineWidth.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.#ctor(System.Drawing.Color)">
            <summary>
             This constructor creates a new ChartAttribute object using the specified attributes. 
            </summary>
            <param name="rgbcolor"> The primary line and text color, sets the field primaryColor.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.Copy(com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
             Copies the source ChartAttribute object. 
            </summary>
            <param name="source"> The source object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.Clone">
            <summary>
             Returns an object that is a clone of this ChartAttribute object. 
            </summary>
            <returns> Returns a clone of this ChartAttribute object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.UpdatePenAttributes">
            <summary>
             Updates the simpleStroke object based on the current lineStyle and lineWidth  fields.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.UpdateBrushAttributes">
            <summary>
             Updates the simpleStroke object based on the current lineStyle and lineWidth  fields.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.UpdateAttributes">
            <summary>
             Updates the simpleStroke object based on the current lineStyle and lineWidth  fields.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetLineAttributes(System.Drawing.Color,System.Double,System.Drawing.Drawing2D.DashStyle)">
            <summary>
             Sets the color, line width and line style of an ChartAttribute object. 
            </summary>
            <param name="rgbcolor"> The primary line and text color, sets the field primaryColor. </param>
            <param name="rlinewidth"> The line width for all lines, sets the field lineWidth. </param>
            <param name="nlinestyle"> The line style for all lines, sets the field lineStyle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetColor(System.Drawing.Color)">
            <summary>
             Sets the primary color of an ChartAttribute object. 
            </summary>
            <param name="rgbcolor"> The primary line, fill and text color, sets the field primaryColor.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetColor">
            <summary>
             Returns the primary color of an ChartAttribute object. 
            </summary>
            <returns> Returns the primary line and text color, the value of the field primaryColor.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetLineColor(System.Drawing.Color)">
            <summary>
             Sets the primary color of an ChartAttribute object. 
            </summary>
            <param name="rgbcolor"> The primary line and text color, sets the field primaryColor.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetPrimaryColor(System.Drawing.Color)">
            <summary>
             Sets the primary color of an ChartAttribute object. 
            </summary>
            <param name="rgbcolor"> The primary line and text color, sets the field primaryColor.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetLineStyle(System.Drawing.Drawing2D.DashStyle)">
            <summary>
             Sets the line style of an ChartAttribute object. 
            </summary>
            <param name="nlinestyle"> The line style for all lines, sets the field lineStyle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetFillColor(System.Drawing.Color)">
            <summary>
             Sets the fill color of an ChartAttribute object. 
            </summary>
            <param name="rgbfillcolor"> The fill color, sets the field fillColor.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetSymbolSize(System.Double)">
            <summary>
             Sets the symbol size of an ChartAttribute object. 
            </summary>
            <param name="rsymbolsize"> The symbol size, measured in window device coordinates,  
            sets the field symbolSize.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetFillFlag(System.Boolean)">
            <summary>
             Sets the fill flag of an ChartAttribute object. 
            </summary>
            <param name="bfillflag"> The value true fills solid objects using the fillColor,  
            sets the field fillFlag.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetLineFlag(System.Boolean)">
            <summary>
             Sets the line flag of an ChartAttribute object. 
            </summary>
            <param name="blineflag"> The value true out1lines solid objects using the primaryColor,  
            sets the field lineFlag.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetFillStyle(System.Int32)">
            <summary>
             Sets the fill style of an ChartAttribute object. 
            </summary>
            <param name="nfillstyle"> Sets the fill style for solid objects,  sets the field fillStyle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetLineColor">
            <summary>
             Returns the primary color of an ChartAttribute object. 
            </summary>
            <returns> Returns the primary line and text color, the value of the field primaryColor.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetPrimaryColor">
            <summary>
             Returns the primary color of an ChartAttribute object. 
            </summary>
            <returns> Returns the primary line and text color, the value of the field primaryColor.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetLineWidth">
            <summary>
             Returns the line width of an ChartAttribute object. 
            </summary>
            <returns> Returns the line width, the value of the field lineWidth.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetLineStyle">
            <summary>
             Returns the line style of an ChartAttribute object. 
            </summary>
            <returns> Returns the line style, the value of the field lineStyle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetFillColor">
            <summary>
             Returns the fill color of an ChartAttribute object. 
            </summary>
            <returns> Returns the fill color, the value of the field fillColor.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetFillFlag">
            <summary>
             Returns the fill flag of an ChartAttribute object. 
            </summary>
            <returns> Returns the fill flag, the value of the field fillFlag.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetLineFlag">
            <summary>
             Returns the line flag of an ChartAttribute object. 
            </summary>
            <returns> Returns the line flag, the value of the field lineFlag.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetSymbolSize">
            <summary>
             Returns the symbol size of an ChartAttribute object. 
            </summary>
            <returns> Returns the symbol size, the value of the field symbolSize.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetFillStyle">
            <summary>
             Returns the fill style of an ChartAttribute object. 
            </summary>
            <returns> Returns the fill style, the value of the field fillStyle.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetResizeMultiplier(System.Double)">
            <summary>
             Sets the resize multiplier. The line width attribute of the stroke property my be 
             affected when the window  is resized. The resizeMultiplier can be adjusted to change the line width,  
             without actually changing the value of the lineWidth property. 
            </summary>
            <returns> Sets the resize multiplier.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetResizeMultiplier">
            <summary>
             Returns the resize multiplier. 
            </summary>
            <returns> Returns the resize multiplier. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartAttribute.SetResizeMultiplier(System.Double)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetCurrentBrush(System.Drawing.Brush)">
            <summary>
             Overrides the current, calculated pen object, substituting a user  defined stroke defining line width, 
             end caps, line miter and dash/dot  characteristics. 
            </summary>
            <param name="brush"> This stroke is used for all line drawing and sets the field customStroke.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetCurrentBrush">
            <summary>
             Returns the current pen object. It returns the default pen object if  a custom pen object has not been 
             set, otherwise it returns the custom  pen object. 
            </summary>
            <returns> It returns the default pen object (simpleStroke) if  a custom pen object has not been set, 
            otherwise it returns the custom  pen object (customStroke).</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetCurrentPen(System.Drawing.Pen)">
            <summary>
             Overrides the current, calculated pen object, substituting a user  defined stroke defining line width, 
             end caps, line miter and dash/dot  characteristics. 
            </summary>
            <param name="pen"> This stroke is used for all line drawing and sets the field customStroke.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.PenChanged">
            <summary>
             Returns true if the current pen characteristics have changed since the last time the pen was retrieved. 
            </summary>
            <returns> Returns true if the current pen characteristics have changed since the last time the pen 
            was retrieved.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.BrushChanged">
            <summary>
             Returns true if the current brush characteristics have changed since the last time the brush was retrieved. 
            </summary>
            <returns> Returns true if the current brush characteristics have changed since the last time the 
            brush was retrieved.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetCurrentPen">
            <summary>
             Returns the current pen object. It returns the default pen object if  a custom pen object has not 
             been set, otherwise it returns the custom  pen object. 
            </summary>
            <returns> It returns the default pen object (simpleStroke) if  a custom pen object has not been set, 
            otherwise it returns the custom  pen object (customStroke).</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.SetLineWidth(System.Double)">
            <summary>
             Sets the line width for the current pen.
            </summary>
            <param name="rlinewidth"> The line width for the current pen.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetCachedPen(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
             Static method returns a pen from the pen cache, creating a new one if a match is not found in the cache.
            </summary>
            <param name="pencolor"> The pen color.</param>
            <param name="penwidth"> The pen width.</param>
            <param name="penstyle"> The pen style.</param>
            <returns> Returns a pen from the pen cache.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetCachedPen(System.Drawing.Color,System.Int32)">
            <summary>
             Static method returns a pen from the pen cache, creating a new one if a match is not found in the cache.
            </summary>
            <param name="pencolor"> The pen color.</param>
            <param name="penwidth"> The pen width.</param>
            <returns> Returns a pen from the pen cache.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartAttribute.GetCachedBrush(System.Drawing.Color)">
            <summary>
             Static method returns a brush from the brush cache, creating a new one if a match is not found in the cache.
            </summary>
            <param name="brushcolor"> The brush color.</param>
            <returns> Returns a brush from the brush cache.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartAttribute.PrimaryColor">
            <summary>
             Set/Gets the primary color of an ChartAttribute object. 
            </summary>
            <returns> Returns the primary line and text color, the value of the field primaryColor.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartAttribute.LineStyle">
            <summary>
             Sets the line style of an ChartAttribute object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartAttribute.FillColor">
            <summary>
             Set/Get the fill color of an ChartAttribute object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartAttribute.SymbolSize">
            <summary>
             Set/Get the symbol size of an ChartAttribute object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartAttribute.FillFlag">
            <summary>
             Set/Get the fill flag of an ChartAttribute object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartAttribute.LineFlag">
            <summary>
             Set/Get the line flag of an ChartAttribute object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartAttribute.LineWidth">
            <summary>
             Set/Get the line width of an ChartAttribute object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartAttribute.CurrentBrush">
            <summary>
             Set/Get the current brush object. Since Brush is abstract you need to cast the object to the
             a specific concrete type to access the properties.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartAttribute.CurrentPen">
            <summary>
             Set/Get the current pen object. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartBrushes">
            <summary>
            Summary description for ChartBrushes.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartBrushes.brushCache">
            <summary>
             An array list of the brushes in the brush cache.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartBrushes.currentBrush">
            <summary>
             An local cache of the two most recent brushes. Eliminates search of entire brushCache cache
             if two brushes toggled back and forth.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartBrushes.#ctor">
            <summary>
              Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartBrushes.Clone">
            <summary>
             Returns an object that is a clone of this ChartBrushes object. 
            </summary>
            <returns> Returns a clone of this ChartBrushes object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartBrushes.Copy(com.quinncurtis.chart2dnet.ChartBrushes)">
            <summary>
              Copies the source ChartBrushes object. 
            </summary>
            <param name="source"> The source ChartBrushes object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartBrushes.GetBrush(System.Drawing.Color)">
            <summary>
             Returns a brush from the brush cache, creating a new one if a match is not found in the cache.
            </summary>
            <param name="brushcolor"> The brush color.</param>
            <returns> Returns a brush from the brush cache.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartCalendar">
            <summary>
              This class  supplements that DateTime class with utilities for manipulating date and time objects.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartCalendar.ticksPerSecond">
            <summary>
              The number of ticks (100 nanosecond intervals) per second
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartCalendar.ticksPerMilliSecond">
            <summary>
              The number of ticks (100 nanosecond intervals) per millisecond
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartCalendar.milliSecondsPerDay">
            <summary>
              The number of milliseconds per day
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartCalendar.dateTimeValue">
            <summary>
              The DateTime value for this object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartCalendar.globalCalendar">
            <summary>
              The GregorianCalendar object for this object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartCalendar.startTickCount">
            <summary>
              Stores the starting value of Environment.TickCount when the static variables of ChartCalendar are initialized.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartCalendar.altTimeCalc">
            <summary>
              True signifies that the DateTime.Now property is NOT used because of bugs in the Win CE emulators, an alternative
              method is called that uses Environment.TickCount.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartCalendar.startDateTime">
            <summary>
              Stores the starting date value when the static variables of ChartCalendar are initialized.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetElapsedTickCount(System.Int32)">
            <summary>
              Calculates the differenct between the current Environment.TickCount value and the supplied tickcount value.
            <param name="tickcount"> A tick count value that is subtraced from the Environment.TickCount value
             to calculate elapsed time.  </param>
            </summary>		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SyncStartTickCount">
            <summary>
              Resets the startTickCount value to the current  Environment.TickCount value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.InitDefaults">
            <summary>
              Initializes default values for the  ChartCalendar class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.LocalNowFunction">
            <summary>
              The default ChartCalendar constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.#ctor">
            <summary>
              The default ChartCalendar constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.#ctor(System.DateTime)">
            <summary>
              This constructor creates a new ChartCalendar object using the specified  DateTime value. 
            </summary>
            <param name="time"> The DateTime object used to set the date of the object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.#ctor(System.Int64)">
            <summary>
              This constructor creates a new ChartCalendar object using the designated number of ticks. 
            </summary>
            <param name="time"> A date and time expressed in 100-nanosecond units, same as the DateTime constructoru </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.#ctor(System.Int64,System.Boolean)">
            <summary>
              This constructor creates a new ChartCalendar object using the designated number of milliseconds, or seconds. 
            </summary>
            <param name="time"> A date and time expressed in milliseconds, or seconds, depending on the  </param>
            <param name="usemsecs"> True and the time argument is treated as milliseconds, otherwise it is treated 
            as seconds. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new ChartCalendar object using the specified year, month and day. 
            </summary>
            <param name="year"> The year, 2003 for example. </param>
            <param name="month"> The month, ChartObj.JANUARY for example. </param>
            <param name="day"> The day, 1..31 for example </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new ChartCalendar object using the specified year, month and day. 
            </summary>
            <param name="year"> The year, 2003 for example. </param>
            <param name="month"> The month, ChartObj.JANUARY for example. </param>
            <param name="day"> The day, 1..31 for example </param>
            <param name="hour"> The hour, 0..23 for example </param>
            <param name="minute"> The minute, 0..59 for example </param>
            <param name="second"> The day, 0..59 for example </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new ChartCalendar object using the specified year, month and day. 
            </summary>
            <param name="year"> The year, 2003 for example. </param>
            <param name="month"> The month, ChartObj.JANUARY for example. </param>
            <param name="day"> The day, 1..31 for example </param>
            <param name="hour"> The hour, 0..23 for example </param>
            <param name="minute"> The minute, 0..59 for example </param>
            <param name="second"> The day, 0..milliseconds for example </param>
            <param name="millisecond"> The milliseconds, 0..999 for example </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.Get(System.Int32)">
            <summary>
              Gets the value of a specific date field, for example YEAR, MONTH, DAY_OF_MONTH, HOUR, HOUR, MINUTE, SECOND. 
            </summary>
            <param name="item">  The field to get. </param>
            <returns> Returns the value of a specific date field. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.Set(System.Int32,System.Int32)">
            <summary>
              Sets the value of a specific date field, for example YEAR, MONTH, DAY_OF_MONTH, HOUR, HOUR, MINUTE, SECOND. 
            </summary>
            <param name="item">  The field to set. </param>
            <param name="value">  Sets the value of a specific date field. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetTime(System.DateTime)">
            <summary>
              Sets the value of the private DateTime field using the specified DateTime value. 
            </summary>
            <param name="time"> Sets the value of the private DateTime field using the specified DateTime value. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetTime">
            <summary>
              Returns the value of the private DateTime field using the specified DateTime value. 
            </summary>
            <returns> Returns the value of the private DateTime field using the specified DateTime value. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.Add(System.Int32,System.Int32)">
            <summary>
              Increments the specified date field by the the specified value. 
            </summary>
            <param name="item">  The value of a specific date field. </param>
            <param name="value">  The date field is incremented by this amount. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetMinimum(System.Int32)">
            <summary>
              Returns the minimum allowable value for the given date field. 
            </summary>
            <param name="item">  The value of a specific date field. </param>
            <returns> Returns the minimum allowable value for the given date field. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.Clone">
            <summary>
             Returns an object that is a clone of this ChartCalendar object. 
            </summary>
            <returns> Returns a clone of this ChartCalendar object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetDateTimeValue">
            <summary>
             Returns an the DateTime value represented by this ChartCalendar object. 
            </summary>
            <returns> Returns an the DateTime value represented by this ChartCalendar object. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetGlobalCalendar">
            <summary>
             Returns the GregorianCalendar object used in date calculations. 
            </summary>
            <returns> Returns the ChartCalendar object used in date calculations.  </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetDateTimeValue(System.DateTime)">
            <summary>
              Sets the private DateTime value for this object. 
            </summary>
            <param name="time"> Sets the private DateTime value for this object. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetGlobalCalendar(System.Globalization.GregorianCalendar)">
            <summary>
             Sets the GregorianCalendar object used in date calculations. 
            </summary>
            <param name="calendar"> Sets the private ChartCalendar value for this object. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetCalendarMsecs(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              Returns the number of milliseconds corresponding to a ChartCalendar  date. 
            </summary>
            <param name="date"> The ChartCalendar date that gets converted to milliseconds. </param>
            <returns> Returns the number of milliseconds corresponding to a ChartCalendar  date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetCalendarMsecs">
            <summary>
              Returns the number of total milliseconds in the date. 
            </summary>
            <returns> Returns the number of total milliseconds in the date. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetCalendarTimerTicks">
            <summary>
              Returns the number of timer ticks (100 nanosecond intervals) corresponding to the date. 
            </summary>
            <returns> Returns the number of timerticks corresponding to the date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetCalendarSecs(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              Returns the number of seconds corresponding to a ChartCalendar  date. 
            </summary>
            <param name="date"> The ChartCalendar date that gets converted to seconds. </param>
            <returns> Returns the number of seconds corresponding to a ChartCalendar  date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetCalendarSecs">
            <summary>
              Returns the number of seconds corresponding to a date. 
            </summary>
            <returns> Returns the number of seconds corresponding to a date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetTODMsecs(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              Returns the number of milliseconds corresponding to the time-of-day part of a ChartCalendar  date. 
            </summary>
            <param name="date"> The ChartCalendar date that is converted to the time-of-day result. </param>
            <returns> Returns the number of milliseconds corresponding to the time-of-day part of a ChartCalendar date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetTODMsecs">
            <summary>
              Returns the number of milliseconds corresponding to the time-of-day part of a date. 
            </summary>
            <returns> Returns the number of milliseconds corresponding to the time-of-day part of a  date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetTODSeconds(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              Returns the number of seconds corresponding to the time-of-day part of a ChartCalendar  date. 
            </summary>
            <param name="date"> The ChartCalendar date that is converted to the time-of-day result. </param>
            <returns> Returns the number of seconds corresponding to the time-of-day part of a ChartCalendar date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetTODSeconds">
            <summary>
              Returns the number of seconds corresponding to the time-of-day part of a date. 
            </summary>
            <returns> Returns the number of seconds corresponding to the time-of-day part of a ChartCalendar  date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetCalendarMsecs(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64)">
            <summary>
              A milliseconds value is converted into the equivalent ChartCalendar date. 
            </summary>
            <param name="date"> The milliseconds value is used to set the ChartCalendar date of this parameter. </param>
            <param name="msecs"> This value is converted into a ChartCalendar date and it is returned  
            as the date parameter.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetCalendarMsecs(System.Int64)">
            <summary>
              A milliseconds value is converted into the equivalent ChartCalendar date. 
            </summary>
            <param name="msecs"> This value is converted into a ChartCalendar date and it is returned  as the date 
            parameter.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetCalendarSecs(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64)">
            <summary>
              A seconds value is converted into the equivalent ChartCalendar date. 
            </summary>
            <param name="date"> The seconds value is used to set the ChartCalendar date of this parameter. </param>
            <param name="secs"> This value is converted into a ChartCalendar date and it is returned  
            as the date parameter.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetCalendarSecs(System.Int64)">
            <summary>
              A seconds value is converted into the equivalent ChartCalendar date. 
            </summary>
            <param name="secs"> This value is converted into a ChartCalendar date and it is returned  
            as the date parameter.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarWeekAdjust(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Boolean)">
            <summary>
              This method adjusts the value a ChartCalendar day, increasing or decreasing  the date to a 
              valid day-of-the=week if the WEEK_5D week type is specified. 
            </summary>
            <param name="result"> The ChartCalendar date that is adjusted. </param>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <param name="forward"> If true, the date is incremented forward if it is on a date invalid  for the 
            current week type. If false, the date is incremented back if it is on a date invalid  for the 
            current week type.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarWeekAdjust(System.Int32,System.Boolean)">
            <summary>
              This method adjusts the value a ChartCalendar day, increasing or decreasing  the date to a 
              valid day-of-the=week if the WEEK_5D week type is specified. 
            </summary>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <param name="forward"> If true, the date is incremented forward if it is on a date invalid  for 
            the current week type. If false, the date is incremented back if it is on a date invalid  for the 
            current week type.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarCheckMin(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
              This method checks to see if the value of a specific field of a ChartCalendar date is  at the minimum 
              value allowable for that field. 
            </summary>
            <param name="cdate"> The ChartCalendar date that is checked. </param>
            <param name="ntimebase"> The field of the ChartCalendar date that is checked, for example  
            ChartObj.DAY_OF_MONTH. </param>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <param name="modulus"> Set to 1000. </param>
            <returns> Returns true if the specified field is at the minimum value allowed for  that field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarCheckMin(System.Int32,System.Int32,System.Int32)">
            <summary>
              This method checks to see if the value of a specific field of a ChartCalendar date is  at 
              the minimum value allowable for that field. 
            </summary>
            <param name="ntimebase"> The field of the ChartCalendar date that is checked, for example  
            ChartObj.DAY_OF_MONTH. </param>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <param name="modulus"> Set to 1000. </param>
            <returns> Returns true if the specified field is at the minimum value allowed for  that field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarCompare(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              This method compares and returns true if one ChartCalendar date  is less than or equal to another. 
            </summary>
            <param name="arg1"> The first ChartCalendar argument. </param>
            <param name="arg2"> The second ChartCalendar argument. </param>
            <returns> Returns true if arg1 less than or equal to arg2.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarCompare2(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              This method compares and returns true if one ChartCalendar date  is less than or equal to another. 
            </summary>
            <param name="arg1"> The first ChartCalendar argument. </param>
            <param name="arg2"> The second ChartCalendar argument. </param>
            <returns> Returns true if arg1 less than or equal to arg2.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetTOD(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              Sets the time of day fields (hours, minutes, seconds) of the  first argument to match the time of day 
              fields of the second argument. 
            </summary>
            <param name="ddate"> The ChartCalendar date argument that is modified. </param>
            <param name="ttime"> The ChartCalendar date argument that has the source  time of day fields.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetTOD(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              Sets the time of day fields (hours, minutes, seconds) of the  first argument to match the time of 
              day fields of the second argument. 
            </summary>
            <param name="ttime"> The ChartCalendar date argument that has the source  time of day fields.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetTOD(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the time of day fields in a ChartCalendar date. 
            </summary>
            <param name="ddate"> The time of day fields of this date are set to value of the  hour, minute and 
            seconds parameters. </param>
            <param name="hour"> The hour (0-23) of the time of day. </param>
            <param name="minute"> The minute (0-59) of the time of day. </param>
            <param name="second"> The second (0-59) of the time of day.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetTOD(System.Int32,System.Int32,System.Int32)">
            <summary>
              Sets the time of day fields in a ChartCalendar date. 
            </summary>
            <param name="hour"> The hour (0-23) of the time of day. </param>
            <param name="minute"> The minute (0-59) of the time of day. </param>
            <param name="second"> The second (0-59) of the time of day.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetTODSeconds(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64)">
            <summary>
              Sets the time of day fields in a ChartCalendar date. 
            </summary>
            <param name="ddate"> The time of day fields of this date are set to value of the  seconds parameter. </param>
            <param name="seconds"> The number of seconds since midnight for the current TOD.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetTODSeconds(System.Int64)">
            <summary>
              Sets the time of day fields in a ChartCalendar date. 
            </summary>
            <param name="seconds"> The number of seconds since midnight for the current TOD.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetTODMsecs(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64)">
            <summary>
              Sets the time of day fields in a ChartCalendar date. 
            </summary>
            <param name="ddate"> The time of day fields of this date are set to value of the  
            milliseconds parameter. </param>
            <param name="milliseconds"> The number of seconds since midnight for the current TOD.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.SetTODMsecs(System.Int64)">
            <summary>
              Sets the time of day fields in a ChartCalendar date. 
            </summary>
            <param name="milliseconds"> The number of seconds since midnight for the current TOD.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarTruncate(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32)">
            <summary>
              This method zeros out the specified fields of a ChartCalendar date. 
            </summary>
            <param name="arg1"> The date that is modified. </param>
            <param name="nresolution"> All calendar field values equal to or less than this  field value are 
            set to 0. Use one of the ChartCalendar class field constants,  for example: ChartObj.YEAR, ChartObj.MONTH, 
            ChartObj.WEEK_OF_MONTH, etc.).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarTruncate(System.Int32)">
            <summary>
              This method zeros out the specified fields of a ChartCalendar date. 
            </summary>
            <param name="nresolution"> All calendar field values equal to or less than this  field value are set to 0. 
            Use one of the ChartCalendar class field constants,  for example: ChartObj.YEAR, ChartObj.MONTH, 
            ChartObj.WEEK_OF_MONTH, etc.).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarCeil(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32)">
            <summary>
              This method zeros out the specified fields of a ChartCalendar date  and rounds up to the 
              specified field value. 
            </summary>
            <param name="arg1"> The date that is modified. </param>
            <param name="nresolution"> All calendar field values equal to or less than this  field value are set to 0. 
            Use one of the ChartCalendar class field constants,  for example: ChartObj.YEAR, ChartObj.MONTH, 
            ChartObj.WEEK_OF_MONTH, etc.).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarCeil(System.Int32)">
            <summary>
              This method zeros out the specified fields of a ChartCalendar date  and rounds up to the 
              specified field value. 
            </summary>
            <param name="nresolution"> All calendar field values equal to or less than this  
            field value are set to 0. Use one of the ChartCalendar class field constants,  
            for example: ChartObj.YEAR, ChartObj.MONTH, ChartObj.WEEK_OF_MONTH, etc.).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarMin(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              This method compares two ChartCalendar dates and returns the earlier date of the two. 
            </summary>
            <param name="d1"> The first ChartCalendar argument. </param>
            <param name="d2"> The second ChartCalendar argument. </param>
            <returns> Returns the earlier of the two dates, d1 or d2.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarMax(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              This method compares two ChartCalendar dates and returns the later date of the two. 
            </summary>
            <param name="d1"> The first ChartCalendar argument. </param>
            <param name="d2"> The second ChartCalendar argument. </param>
            <returns> Returns the later of the two dates, d1 or d2.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarDaysDiff(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32)">
            <summary>
              Calculates the number of days between two dates, taking into account  whether or not a WEEK_5D or 
              WEEK_7D mode is in affect. 
            </summary>
            <param name="dstart"> The first ChartCalendar argument. The  date dstart should be earlier in time 
            than dstop. </param>
            <param name="dstop"> The second ChartCalendar argument. </param>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <returns> Returns the number days between the dstart and dstop.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarDaysAddWalk(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Int32)">
            <summary>
              This method adds a fixed number of days to a date, taking into account  whether or 
              not a WEEK_5D or WEEK_7D mode is in affect. This methods uses  a walk algorithm that counts 
              from the start day to the stop day, day by day.  It is to slow to use for a time span of months or years. 
            </summary>
            <param name="dstart"> The starting ChartCalendar argument. </param>
            <param name="numdays"> The number of days to add to the date dstart. </param>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <returns> Returns the ChartCalendar data this is the sum of dstart and numdays.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarDaysAdd(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Int32)">
            <summary>
              This method adds a fixed number of days to a date, taking into account  whether or not a WEEK_5D or 
              WEEK_7D mode is in affect. 
            </summary>
            <param name="dstart"> The starting ChartCalendar argument. </param>
            <param name="numdays"> The number of days to add to the date dstart. </param>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <returns> Returns the ChartCalendar data this is the sum of dstart and numdays.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarDaysAdd(System.Int64,System.Int32)">
            <summary>
              This method adds a fixed number of days to a date, taking into account  whether or not a 
              WEEK_5D or WEEK_7D mode is in affect. 
            </summary>
            <param name="numdays"> The number of days to add to the date dstart. </param>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <returns> Returns the ChartCalendar data this is the sum of dstart and numdays.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CheckValidDate(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32)">
            <summary>
              This check to see if the given date is a valid date for the  given week type (WEEK_5D or WEEK_7D). 
            </summary>
            <param name="ddate"> The ChartCalendar argument. </param>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CheckValidDate(System.Int32)">
            <summary>
              This check to see if the given date is a valid date for the  given week type (WEEK_5D or WEEK_7D). 
            </summary>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CheckValidDate(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Int64,System.Int32)">
            <summary>
              This check to see if the given date is a valid date for the  given week type (WEEK_5D or WEEK_7D), 
              and the non-24 day  hour range. 
            </summary>
            <param name="ddate"> The ChartCalendar argument. </param>
            <param name="starttime"> The starttime of the day, in milliseconds. </param>
            <param name="stoptime"> The stoptime of the day, in milliseconds </param>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CheckValidDate(System.Int64,System.Int64,System.Int32)">
            <summary>	
              This check to see if the given date is a valid date for the  given week type (WEEK_5D or WEEK_7D), 
              and the non-24 day  hour range. 
            </summary>
            <param name="starttime"> The starttime of the day, in milliseconds. </param>
            <param name="stoptime"> The stoptime of the day, in milliseconds </param>
            <param name="nweektype"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarCopy(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              This method copies the one date into another. The source argument is copied  into the dest argument. 
            </summary>
            <param name="dest"> The destination ChartCalendar argument. </param>
            <param name="source"> The source ChartCalendar argument.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.NewCalendar(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              This method allocates a new ChartCalendar date and copies the source date into it. 
            </summary>
            <param name="source"> The source ChartCalendar argument. </param>
            <returns> Returns a new ChartCalendar date that is copy of the source date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.CalendarSwap(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              This swaps one date with another. 
            </summary>
            <param name="d1"> ChartCalendar argument. </param>
            <param name="d2"> ChartCalendar argument.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetCalendarWidthValue(System.Int32,System.Double)">
            <summary>
              Many of the plotting routines require a "width" property, the value of  which may not be intuitive 
              give the wide range of scales supported by  the time and date coordinate systems. This method 
              calculates a "width"  in milliseconds, based on a given time base and numeric width value  in 
              units of that time base. 
            </summary>
            <param name="timebase"> The ChartCalendar field, such as ChartObj.HOUR,  that represents the units of 
            the width parameter. </param>
            <param name="width"> The width to be converted to milliseconds, based on the  time base. </param>
            <returns> Returns the value of the width parameter converted to milliseconds.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.GetTimeAxisTickParameters(System.Int32,System.Int32)">
            <summary>
              Calculates the axis properties minorTicksPerMajor, and  minorNthTick, based on the axisTickMarkTimeBase 
              property of a time axis. 
            </summary>
            <param name="timebase"> The axisTickMarkTimeBase property of an axis, TIMEAXIS_MONTHDAY,  for example. </param>
            <param name="weekmode"> The calendar week type (WEEK_5D or WEEK_7D). </param>
            <returns> Returns the minorTicksPerMajor value as the Dimension.GetWidth() value,  and the minorNthTick 
            value as Dimension.GetHeight() value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.ToString">
            <summary>
              Converts the value of this instance to its equivalent string.
            </summary>
            <returns> Returns the value of this instance to its equivalent string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.ToString(System.String)">
            <summary>
              Converts the value of this instance to its equivalent string.
            </summary>
            <param name="formatstring"> The format string. See description for the equivalent 
            DateTime.ToString method. </param>
            <returns> Returns the value of this instance to its equivalent string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.ToString(System.String,System.IFormatProvider)">
            <summary>
              Converts the value of this instance to its equivalent string.
            </summary>
            <param name="formatstring"> The format string. See description for the equivalent 
            DateTime.ToString method. </param>
            <param name="formatprovider"> The format provider. See description for the equivalent 
            DateTime.ToString method. </param>
            <returns> Returns the value of this instance to its equivalent string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
              Returns a ChartCalendar value represented by the source string.
            </summary>
            <param name="datestring"> The parse format string. See description for the equivalent DateTime.Parse 
            method. </param>
            <param name="formatprovider"> The parse format provider. See description for the equivalent 
            DateTime.Parse method. </param>
            <param name="style"> The combination of one or more DateTimeStyles constants that indicate the 
            permitted format. See description for the equivalent DateTime.Parse method. </param>
            <returns> Returns a ChartCalendar value represented by the source string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.Parse(System.String,System.IFormatProvider)">
            <summary>
              Returns a ChartCalendar value represented by the source string.
            </summary>
            <param name="datestring"> The parse format string. See description for the equivalent 
            DateTime.Parse method. </param>
            <param name="formatprovider"> The parse format provider. See description for the equivalent 
            DateTime.Parse method. </param>
            <returns> Returns a ChartCalendar value represented by the source string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartCalendar.Parse(System.String)">
            <summary>
              Returns a ChartCalendar value represented by the source string.
            </summary>
            <param name="datestring"> The parse format string. See description for the equivalent DateTime.Parse method. </param>
            <returns> Returns a ChartCalendar value represented by the source string.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartCalendar.DateTimeValue">
            <summary>
              Set/Get the current time/date value. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartCalendar.GlobalCalendar">
            <summary>
              Set/Get the current, static, GregorianCalendar object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartCalendar.StartTickCount">
            <summary>
              Set/Get the current startTickValue count in msecs. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartCalendar.CurrentTickCount">
            <summary>
              Get the current Environment.TickCount value, as msecs
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartCalendar.ElapsedTickCount">
            <summary>
              Returns the elapased time, in msecs, since the program started, handling the first wraparound through 0 TickCounts
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartCalendar.AltTimeCalc">
            <summary>
             Get/Set the alternative DateTime.Now calculation. 
             True signifies that the DateTime.Now property is NOT used because of bugs in the Win CE emulators, an alternative
              method is called that uses Environment.TickCount.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartCalendar.Now">
            <summary>
             Get/Set the alternative DateTime.Now calculation. 
             True signifies that the DateTime.Now property is NOT used because of bugs in the Win CE emulators, an alternative
              method is called that uses Environment.TickCount.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartDataset">
            <summary>
              This is the abstract base class for all dataset classes used  by the plot routines in this software. 
              A dataset class  encapsulates x- and y-data values that are to be used  as source of chart information. 
              Copies of the original data  arrays are stored. The original source data can be deleted once  the dataset 
              is created. If you want to make any changes to the data,  you must change the data in the dataset, not the 
              original source data.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.dataName">
            <summary>
             Holds a string name for the dataset.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.xData">
            <summary>
             A 1-D array, size numberDatapoints of double that holds the x-values for a simple data set.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.groupStrings">
            <summary>
             A 1-D array of strings, one for each group in the dataset.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.validData">
            <summary>
             A 1-D array, size numberDatapoints of double that holds valid state for points in a simple data set.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.numberDatapoints">
            <summary>
             The number of x- and y-data points for simple datasets.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.numberGroups">
            <summary>
             The number groups for group datasets.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.stackMode">
            <summary>
             This property, set to either AUTOAXES_UNSTACKED or AUTOAXES_STACKED,  
             is used by the auto-scaling routines. It is set according to  the plot type used to display the data. 
             Plot types that display  group data as "stacked", or summed data should set this property  
             to AUTOAXES_STACKED.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.xCoordinateType">
            <summary>
             This property specifies if the x-coordinate values are numeric,  or time based. Use one of the coordinate 
             type constants NUMERIC_COORDINATE  or TIME_COORDINATE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.yCoordinateType">
            <summary>
             This property specifies if the y-coordinate values are numeric,  or time based. Use one of the coordinate 
             type constants NUMERIC_COORDINATE  or TIME_COORDINATE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.initialCondition">
            <summary>
             Specifies that the buffer has not been incremented yet.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.autoDataCompressEnable">
            <summary>
             Specifies that the data compression is automatically performed for data display.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.autoCompressDatasetModeX">
            <summary>	
            The compression type for the x-values. Use one of the data compression type 
            constants:  DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no 
            compression),  DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  
            (use the average x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and 
            y-value in each interval), DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), 
            and DATACOMPRESS_MINMAX (use the minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX 
            compression type is best used when the compressed data values number more than  1000, where adjacent 
            data values in the rendered chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  
            compression type will guarantee that the chart displays the same minimums and maximums as the original dataset.
            </summary>		
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.autoCompressDatasetModeY">
            <summary>	
            The compression type for the y-values. Use one of the data compression type 
            constants:  DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no 
            compression),  DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  
            (use the average x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and 
            y-value in each interval), DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), 
            and DATACOMPRESS_MINMAX (use the minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX 
            compression type is best used when the compressed data values number more than  1000, where adjacent 
            data values in the rendered chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  
            compression type will guarantee that the chart displays the same minimums and maximums as the original dataset.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.autoCompressTriggerValue">
            <summary>	
             Compression will occur if the number of datapoints exceeds this value.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.autoCompressDivisor">
            <summary>	
             The number of data points in each segment that is reduced to a single 
             datapoint (two  for the DATACOMPRESS_MINMAX compression type) in the compressed dataset.
            </summary>		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.ErrorCheck(System.Int32)">
            <summary>
              Checks the current dataset object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.#ctor">
            <summary>
              The default ChartDataset constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.Copy(com.quinncurtis.chart2dnet.ChartDataset)">
            <summary>
              Copies the source dataset. 
            </summary>
            <param name="source"> The source dataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetXDataObj">
            <summary>
              This method returns a reference to the internal DoubleArray object used to store the x-data values. 
            </summary>
            <returns> Returns a reference to the internal DoubleArray object used to store the x-data values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetXData">
            <summary>
              This method returns a copy of the xData array, the array of x-values  for simple and group datasets. 
              If the dataset uses ChartCalendar values  for x-values the xData array contains the equivalent 
              seconds for each date. 
            </summary>
            <returns> Returns a copy of the xData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.SetTimeXData(com.quinncurtis.chart2dnet.ChartCalendar[])">
            <summary>
              This method sets the values of the time xData array, the array of x-values for TimeSimpleDataset and 
              GroupSimpleDataset. 
            </summary>
            <param name="xvalues"> An array of the new time x-values. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.SetXData(System.Double[])">
            <summary>
              This method sets the values of the xData array, the array of x-values  for simple and group datasets. 
              If the dataset uses ChartCalendar values  for x-values the xData array contains the equivalent 
              seconds for each date.   
            </summary>
            <param name="xvalues"> An array of the new x-values. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.SetXData(com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
              This method sets the values of the xData array, the array of x-values  for simple and group datasets. 
              If the dataset uses ChartCalendar values  for x-values the xData array contains the equivalent seconds 
              for each date.  
            </summary>
            <param name="xvalues"> An array of the new x-values. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetValidData">
            <summary>
              This method returns a copy of the validData array, the array of bool values  that specify whether 
              the x- and y-values at a given index are valid. 
            </summary>
            <returns> Returns a copy of the validData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetValidDataObj">
            <summary>
              This method returns a copy of the validData array, the array of bool values  that specify whether 
              the x- and y-values at a given index are valid. 
            </summary>
            <returns> Returns a copy of the validData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.SetXDataValue(System.Int32,System.Double)">
            <summary>
              Sets the x-value at the given index in simple and group datasets. 
            </summary>
            <param name="x"> Specifies the new x-value for the data point at the specified index. </param>
            <param name="index"> Specifies the index for the new data value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetXDataValue(System.Int32)">
            <summary>
              This method returns the x-value at a given index in simple and group datasets. 
            </summary>
            <param name="index"> Specifies the index of the x-value. </param>
            <returns> Returns the x-value of the data point at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetSumX">
            <summary>
              This method returns the sum of all x-values in simple and group datasets. 
            </summary>
            <returns> Returns the sum of all x-values in simple and group datasets.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetAverageX">
            <summary>
              This method returns the average of all x-values in simple and group datasets. 
            </summary>
            <returns> Returns the average of all x-values in simple and group datasets.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetValidData(System.Int32)">
            <summary>
              This method returns true if the data at the specified index is valid. 
            </summary>
            <param name="index"> Specifies the index of the data.</param>
            <returns> Returns true if the data at the specified index is valid. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.SetValidData(System.Int32,System.Boolean)">
            <summary>
              This method marks a given data point as valid (true) or invalid (false) 
            </summary>
            <param name="index"> Specifies the index of the data point. </param>
            <param name="valid"> Set to false to mark a data point as invalid.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetTimeScaleAxis">
            <summary>
              This method returns which coordinate, x or y, in a dataset is time based.  In general only one coordinate 
              can be time based, the other must be  numeric. 
            </summary>
            <returns> Returns which coordinate, x or y, in a dataset is time based. Returns X_AXIS,Y_AXIS, NEITHER_AXIS 
            or BOTH_AXES. The BOTH_AXES condition is  not supported by the plotting routines.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.MarkBadDataInvalid">
            <summary>
              This method marks data points invalid that have a bad value in either x or y.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.SetYDataValue(System.Int32,System.Int32,System.Double)">
            <summary>
              This abstract method is the prototype used to set the y-value in simple and group datasets.  
              Subclasses should override this method. 
            </summary>
            <param name="y"> Specifies the new y-value for the data point at the specified index and group. </param>
            <param name="group"> Specifies the group for the new data value.</param>
            <param name="index"> Specifies the index for the new data value. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetYDataValue(System.Int32,System.Int32)">
            <summary>
              This abstract method is the prototype used to return the y-value in simple and group datasets.  
              Subclasses should override this method. 
            </summary>
            <param name="group"> Specifies the group of the y-value. </param>
            <param name="index"> Specifies the index of the y-value. </param>
            <returns> Returns the y-value of the data point at the specified index and group.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.CalcNearestPoint(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method abstract is the prototype for a data point nearness test.  It compares a test point 
              against all of the xy points  in a dataset and calculates which point in the dataset  is nearest the 
              test point. The nearness test has many  different forms:  Nearness Mode Constant Description  FNP_X nearest 
              x  FNP_Y nearest y  FNP_DIST shortest distance  FNP_NORMX nearest normalized x  FNP_NORMY nearest normalized 
              y  FNP_NORMDIST shortest normalized distance  Subclasses should override this method. 
            </summary>
            <param name="transform"> The PhysicalCoordinates coordinate system associated with these points. </param>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the xy values of the dataset point nearest the test point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.IsDataPointGood(System.Int32)">
            <summary>
              This abstract method is the prototype to determine if a data point is OK.  Subclasses should 
              override this method. 
            </summary>
            <param name="index"> Specifies the index of the data point.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetGroupDatasetSumMax(System.Int32)">
            <summary>
              This abstract method is the prototype used to find the maximum value  for either the x-coordinates, 
              or the sum of the group y-values in a dataset.  Subclasses should override this method. 
            </summary>
            <param name="naxis"> Set toX_AXIS to get the maximum value of the x-values in a dataset,  set toY_AXIS to get 
            the maximum value for the y-values, summed as in a stacked graph.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetGroupDatasetSumMin(System.Int32)">
            <summary>
              This abstract method is the prototype used to find the minimum value  for either the x-coordinates, or the 
              sum of the group y-values in a dataset.  If the x-values use ChartCalendar dates, the equivalent of the date  
              in milliseconds is returned.  Subclasses should override this method. 
            </summary>
            <param name="naxis"> Set toX_AXIS to get the minimum value of the x-values in a dataset,  
            set toY_AXIS to get the minimum value for the y-values, summed as in a stacked graph.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetDatasetMin(System.Int32)">
            <summary>
              This method returns the minimum value for either the xData or yData  arrays. If the x-values use 
              ChartCalendar dates, the equivalent of the date  in milliseconds is returned.  Subclasses should 
              override this method. 
            </summary>
            <param name="naxis"> Specifies which data array to return the minimum value from. UseX_AXIS  for the 
            xData array, andY_AXIS for yData array. </param>
            <returns> Returns the minimum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetDatasetMax(System.Int32)">
            <summary>
              This method returns the maximum value for either the xData or yData  arrays. If the x-values use 
              ChartCalendar dates, the equivalent of the date  in milliseconds is returned.  Subclasses should 
              override this method. 
            </summary>
            <param name="naxis"> Specifies which data array to return the maximum value from. UseX_AXIS  for the 
            xData array, andY_AXIS for yData array. </param>
            <returns> Returns the maximum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetNumberGroups">
            <summary>
              This method returns the value of the numberGroups field which is number of  groups in a group dataset.  
              Subclasses should override this method. 
            </summary>
            <returns> Returns the value of the numberGroups field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetDataName">
            <summary>
              This method returns the string name assigned to the dataset. 
            </summary>
            <returns> Returns the string name assigned to the dataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.SetDataName(System.String)">
            <summary>
              This method sets the string name assigned to the dataset. 
            </summary>
            <param name="dataname"> Sets the string name assigned to the dataset.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetNumberDatapoints">
            <summary>
              This method returns the value of the numberDatapoints field which is number of  data points in a 
              simple dataset, or the number of x-values in a group dataset. 
            </summary>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.SetStackMode(System.Int32)">
            <summary>
             Sets the stackMode property of the dataset.  This property, set to either 
             AUTOAXES_UNSTACKED or AUTOAXES_STACKED,  is used by the auto-scaling routines. 
             It is set according to  the plot type used to display the data. Plot types that display  group data 
             as "stacked", or summed data should set this property  to AUTOAXES_STACKED. 
            </summary>
            <param name="mode"> Sets the stackMode property of the dataset.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetStackMode">
            <summary>
             Returns the stackMode property of the dataset.  
            </summary>
            <returns> Returns the stackMode property of the dataset. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartDataset.SetStackMode(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetXCoordinateType">
            <summary>
              This method returns TIME_COORDINATE if x-coordinate type is calendar or  time based, otherwise it 
              returns NUMERIC_COORDINATE. 
            </summary>
            <returns> Returns the x-coordinate type.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetYCoordinateType">
            <summary>
              This method returns TIME_COORDINATE if y-coordinate type is calendar or  time based, otherwise it 
              returns NUMERIC_COORDINATE. 
            </summary>
            <returns> Returns the y-coordinate type.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.SetXCoordinateType(System.Int32)">
            <summary>
              This method sets the x-coordinate type (TIME_COORDINATE is calendar or  time based, otherwise it 
              is NUMERIC_COORDINATE). 
              <param name="coordtype"> Sets the x-coordinate type. </param>
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.SetYCoordinateType(System.Int32)">
            <summary>
              This method sets the y-coordinate type (TIME_COORDINATE is calendar or  time based, otherwise it 
              is NUMERIC_COORDINATE). 
              <param name="coordtype"> Sets the y-coordinate type. </param>
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.GetGroupString(System.Int32)">
            <summary>
              This method retrieves a group string. 
            </summary>
              <param name="index"> Retrieves the group string at the specified index. </param>
              <returns> Returns the group string at the index.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.GroupStrings">
            <summary>
              Get method returns the string array that can be used to access the group strings in the dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.DataName">
            <summary>
              Set/Get method returns the string name assigned to the dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.NumberGroups">
            <summary>
              This method returns the value of the numberGroups field which is number of  groups in a group dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.NumberDatapoints">
            <summary>
              This method returns the value of the numberDatapoints field which is number of  data points 
              in a simple dataset, or the number of x-values in a group dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.StackMode">
            <summary>
             Set/Get the stackMode property of the dataset.  This property, set to either AUTOAXES_UNSTACKED 
             or AUTOAXES_STACKED,  is used by the auto-scaling routines. It is set according to  the plot 
             type used to display the data. Plot types that display  group data as "stacked", or summed data should 
             set this property  to AUTOAXES_STACKED. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.XCoordinateType">
            <summary>
              This accessor returns TIME_COORDINATE if x-coordinate type is calendar or  time based, otherwise it 
              returns NUMERIC_COORDINATE. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.YCoordinateType">
            <summary>
              This accessor returns TIME_COORDINATE if y-coordinate type is calendar or  time based, otherwise it 
              returns NUMERIC_COORDINATE. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.XData">
            <summary>
              This method returns a reference to the DoubleArray object used to store the x-values of
              the dataset.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.ValidData">
            <summary>
              This method returns a reference to the BoolArray object used to store the valid data flags of
              the dataset.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.AutoDataCompressEnable">
            <summary>
             Specifies that the data compression is automatically performed for data display.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.AutoCompressDatasetModeX">
            <summary>	
            The compression type for the x-values. Use one of the data compression type 
            constants:  DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no 
            compression),  DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  
            (use the average x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and 
            y-value in each interval), DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), 
            and DATACOMPRESS_MINMAX (use the minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX 
            compression type is best used when the compressed data values number more than  1000, where adjacent 
            data values in the rendered chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  
            compression type will guarantee that the chart displays the same minimums and maximums as the original dataset.
            </summary>		
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.AutoCompressDatasetModeY">
            <summary>	
            The compression type for the y-values. Use one of the data compression type 
            constants:  DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no 
            compression),  DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  
            (use the average x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and 
            y-value in each interval), DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), 
            and DATACOMPRESS_MINMAX (use the minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX 
            compression type is best used when the compressed data values number more than  1000, where adjacent 
            data values in the rendered chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  
            compression type will guarantee that the chart displays the same minimums and maximums as the original dataset.
            </summary>	
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.AutoCompressTriggerValue">
            <summary>	
             Compression will occur if the number of datapoints exceeds this value.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.AutoCompressDivisor">
            <summary>	
             The number of data points in each segment that is reduced to a single 
             datapoint (two  for the DATACOMPRESS_MINMAX compression type) in the compressed dataset.
            </summary>		
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartDataset.Item(System.Int32)">
            <summary>
              This accessor is the indexer for the class and get/sets the value of an individual x 
              data point, in the dataset. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartDataset.DatasetSortClass">
            <summary>
             This is a sort class that implements the IComparable interface  so that the data values in a dataset 
             can be optionally sorted.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.DatasetSortClass.xValue">
            <summary>
             Sort value.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartDataset.DatasetSortClass.index">
            <summary>
             Index value.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.DatasetSortClass.#ctor">
            <summary>
             Default constructor.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.DatasetSortClass.#ctor(System.Int32,System.Double)">
            <summary>
              Constructor. 
            </summary>
            <param name="i"> Index of data point. </param>
            <param name="x"> Value of data point. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartDataset.DatasetSortClass.CompareTo(System.Object)">
            <summary>
              CompareTo method require by IComparable interface. 
            </summary>
            <param name="o"> DatasetSort object. </param>
            <returns> Returns 1 if value of this.x greater o.x, 0 if equal, -1 if this.x less than o.x</returns> 
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartException">
            <summary>
              Represents exceptions that can occur in the software.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartException.#ctor">
            <summary>
              The default ChartException constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartException.#ctor(System.String)">
            <summary>
             Constructor. 
            </summary>
            <param name="s"> The error message associated with this exception. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartException.GetExceptionMessage">
            <summary>
             Returns the error exception string. 
            </summary>
            <returns> Returns the error exception string.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartImage">
            <summary>
              The ChartImage class will place and scale a .Net compatible Image file in a chart.  
              The image can be a small part of the overall graph, inside or outside of  the plotting area, 
              or it can sized to provide a background for the plotting  area or graph area.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartImage.imageObject">
            <summary>
             Holds a reference to the source image object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartImage.imageSize">
            <summary>
             Specifies the current size (width and height) of the image if the  sizeMode is COORD_SIZE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartImage.imageScaleFactor">
            <summary>
             Specifies the current scale factors for the image if the  sizeMode is SCALE_FACTOR_SIZE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartImage.sizeMode">
            <summary>
             Specifies the current size mode for the image. Use one of the  image size constants ACTUAL_SIZE, 
             COORD_SIZE or SCALE_FACTOR_SIZE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartImage.rotation">
            <summary>
             Specifies rotation of the image in degrees.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.#ctor">
            <summary>
              The default ChartImage constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.ErrorCheck(System.Int32)">
            <summary>
              Checks the ChartImage object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.InitDefaults">
            <summary>
              Initializes default values for the image plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.Copy(com.quinncurtis.chart2dnet.ChartImage)">
            <summary>
              Copies the source ChartImage object. 
            </summary>
            <param name="source"> The source ChartImage object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.Clone">
            <summary>
             Returns an object that is a clone of this ChartImage object. 
            </summary>
            <returns> Returns a clone of this ChartImage object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.InitChartImage(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Image,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
              A ChartImage initialization method that initializes the scale, the image,  the position, 
              the position mode and the rotation for an image plot object. 
            </summary>
            <param name="transform"> The coordinate system for the new GroupPlot object. </param>
            <param name="aimage"> A reference to the image that is to be placed in the chart. </param>
            <param name="x"> The x-value for the position of the image in the chart. </param>
            <param name="y"> The y-value for the position of the image in the chart. </param>
            <param name="npostype"> Specifies whether the x- and y-position values are specified  
            in normalized coordinates, or physical coordinates. Use one of the position  constants: NORM_POS, 
            PHYS_POS. </param>
            <param name="rot"> The rotation of the image specified in degrees.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Image,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
              A ChartImage constructor that initializes the scale, the image,  the position, the position mode and 
              the rotation for an image plot object. 
            </summary>
            <param name="transform"> The coordinate system for the new ImagePlot object. </param>
            <param name="aimage"> A reference to the image that is to be placed in the chart. </param>
            <param name="x"> The x-value for the position of the image in the chart. </param>
            <param name="y"> The y-value for the position of the image in the chart. </param>
            <param name="npostype"> Specifies whether the x- and y-position values are specified  in normalized 
            coordinates, or physical coordinates. Use one of the position  constants: NORM_POS, PHYS_POS. </param>
            <param name="rot"> The rotation of the image specified in degrees.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              A ChartImage constructor that initializes the scale for an image plot object.  
              The image is placed at the default position of (0.0, 0.0) using a physical  coordinate positioning mode. 
            </summary>
            <param name="transform"> The coordinate system for the new ChartImage object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.DrawImage(System.Drawing.Graphics)">
            <summary>
              Draws an image plot object using the current properties. 
            </summary>
            <param name="g2"> The current graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance 
              of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. The image is sized, rotated and placed  in the chart at the specified location. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.SetImageSize(com.quinncurtis.chart2dnet.Dimension)">
            <summary>
             Sets the current size (width and height) of the image. The size values are only  used if the 
             size mode is COORD_SIZE. 
            </summary>
            <param name="wh"> Specifies the width and height of the image.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.GetImageSize">
            <summary>
             Returns the current size (width and height) of the image. 
            </summary>
            <returns> Returns the width and height of the image. This value is only valid  if the 
            current size mode is COORD_SIZE.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.SetImageRectangle(com.quinncurtis.chart2dnet.Rectangle2D,System.Int32)">
            <summary>
             Sets the current position and size of the image. The size values are only  used if the 
             size mode is COORD_SIZE. 
            </summary>
            <param name="imagerect"> Specifies the position, width and height of the image rectangle. </param>
            <param name="postype"> Specifies the if the position of the text is specified in  physical 
            coordinates, normalized coordinates or window device coordinates.  Use one of the position 
            constants: DEV_POS, PHYS_POS, NORM_GRAPH_POS, NORM_PLOT_POS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.GetImageRectangle">
            <summary>
             Returns the current size (width and height) of the image. 
            </summary>
            <returns> Returns the position, width and height of the image.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.SetSizeMode(System.Int32)">
            <summary>
             Sets the current size mode for the image. 
            </summary>
            <param name="nsizemode"> Sets the current size mode for the image.  Use one of the image 
            size constants ACTUAL_SIZE, COORD_SIZE or SCALE_FACTOR_SIZE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.GetSizeMode">
            <summary>
             Returns the current size mode for the image. 
            </summary>
            <returns> Returns the current size mode for the image. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartImage.SetSizeMode(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.SetImageScaleFactor(com.quinncurtis.chart2dnet.Dimension)">
            <summary>
             Sets the current scale factor of the image. The size values are only used if the size mode is 
             SCALE_FACTOR_SIZE. 
            </summary>
            <param name="psize"> Specifies the x- and y-scale factors for the image.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.GetImageScaleFactor">
            <summary>
             Returns the current scale factor of the image. The scale factor values are only used if the 
             size mode is SCALE_FACTOR_SIZE. 
            </summary>
            <returns> Returns the x- and y-scale factors for the image.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.SetRotation(System.Double)">
            <summary>
             Sets the current rotation, in degrees, of the image. 
            </summary>
            <param name="rot"> Specifies the rotation, in degrees, of the image.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.GetRotation">
            <summary>
             Returns the current rotation, in degrees, of the image. 
            </summary>
            <returns> Returns the rotation, in degrees, of the image.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.SetImageObject(System.Drawing.Image)">
            <summary>
             Set the image for this object 
            </summary>
            <param name="image"> A reference to the image that is to be placed in the chart.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartImage.GetImageObject">
            <summary>
             Returns the image for this object 
            </summary>
            <returns> Returns a reference to the image that is to be placed in the chart.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartImage.ImageSize">
            <summary>
             Set/Get the current size (width and height) of the image. The size values are only 
             used if the size mode is COORD_SIZE. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartImage.SizeMode">
            <summary>
             Set/Get the current size mode for the image. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartImage.ImageScaleFactor">
            <summary>
             Set/Get the current scale factor of the image. The size values are only used if 
             the size mode is SCALE_FACTOR_SIZE. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartImage.Rotation">
            <summary>
             Set/Get the current rotation, in degrees, of the image. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartImage.ImageObject">
            <summary>
             Set/Get the image for this object 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartInfo">
            <summary>
             Contains the code used to read the license file.
            </summary>
            
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.QCChart2DProductID">
            <summary>
             Product ID value for the QCChart2D software
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.QCRTGraphProductID">
            <summary>
             Product ID value for the QCRTGraph software
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.QCChart2DCFProductID">
            <summary>
             Product ID value for the QCChart2D software
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.QCRTGraphCFProductID">
            <summary>
             Product ID value for the QCRTGraph software
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.QCSPCChartProductID">
            <summary>
             Product ID value for the QCSPCChart software
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.QCSPCChartCFProductID">
            <summary>
             Product ID value for the QCSPCChartCF software
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.QCAllProductID">
            <summary>
             Product ID value for the QCSPCChartCF software
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.infoNums">
            <summary>
             Numeric fields of the license file.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.infoStrings">
            <summary>
             String fields of the license file.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.licensePath">
            <summary>
             The path to the license file, does not include the license file name.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.infoFilename">
            <summary>
             The license file name, does not include path information.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.QCLicenseDataSet">
            <summary>
             The DataSet used to read the license file.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.fileFound">
            <summary>
             True and license file was found.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartInfo.eDateScaleFactor">
            <summary>
            Scaling factor used to convert license file numeric files into an expiration date.
            </summary>		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartInfo.Copy(com.quinncurtis.chart2dnet.ChartInfo)">
            <summary>
              Copies the source object. 
            </summary>
            <param name="source"> The source object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartInfo.Clone">
            <summary>
             Returns an object that is a clone of this ChartInfo object. 
            </summary>
            <returns> Returns a clone of this ChartInfo object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartInfo.#ctor">
            <summary>
             Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartInfo.#ctor(System.String,System.String)">
            <summary>
             ChartInfo constructor. 
            </summary>
            <param name="licensepath"> The path to the license file. </param>
            <param name="filename"> The file name of the license file. </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartInfo.#ctor(System.String)">
            <summary>
             Read file constructor. 
            </summary>
            <param name="xmlresource"> The string is a resource specification. </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartInfo.GetInfo(System.Int64[],System.String[])">
            <summary>
             Returns license numbers and strings. 
            </summary>
            <param name="nums"> Returns an array of license numbers.</param>
            <param name="strings"> Returns an array of license strings.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartInfo.ReadXMLResourceTable(System.String)">
            <summary>
             Reads the license file as an XML resource. 
            </summary>
            <param name="xmlresource"> The string is a resource specification. </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartInfo.ReadTable(System.String,System.String)">
            <summary>
             Reads the license file as an XML file. 
            </summary>
            <param name="licensepath"> The path to the license file. </param>
            <param name="filename"> The file name of the license file. </param>
            
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartInfo.InfoStrings">
            <summary>
             Get the license file string data as a string array. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartInfo.InfoNums">
            <summary>
             Get the license file numeric data as a long array. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartInfo.FileFound">
            <summary>
             Get the file found flag. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartInfo.ExpirationDate">
            <summary>
             Get the expiration date associated with the license file. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartInfo.LicenseMode">
            <summary>
             Get the license mode associated with the license file. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartInfo.ProductID">
            <summary>
             Get the product ID associated with the license file. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartPens">
            <summary>
            Summary description for ChartPens.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPens.penCache">
            <summary>
             An array list of the pens in the pen cache.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPens.currentPen">
            <summary>
             An local cache of the two most recent pens. Eliminates search of entire penCache cache
             if two pens toggled back and forth.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPens.#ctor">
            <summary>
              Default constructor. 
            </summary>		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPens.Clone">
            <summary>
             Returns an object that is a clone of this ChartPens object. 
            </summary>
            <returns> Returns a clone of this ChartPens object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPens.Copy(com.quinncurtis.chart2dnet.ChartPens)">
            <summary>
              Copies the source ChartPens object. 
            </summary>
            <param name="source"> The source ChartPens object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPens.PenFound(com.quinncurtis.chart2dnet.QPen,System.Drawing.Color,System.Single,System.Drawing.Drawing2D.DashStyle)">
            <summary>
             Returns true if a pen matches the specified pen characteristics.
            </summary>
            <param name="qpen"> The pen to check.</param>
            <param name="pencolor"> The pen color.</param>
            <param name="penwidth"> The pen width.</param>
            <param name="penstyle"> The pen dash style.</param>
            <returns> Returns true if the pen matches the specified pen characteristics.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPens.GetPen(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.DashStyle)">
            <summary>
             Returns a pen from the pen cache, creating a new one if a match is not found in the cache.
            </summary>
            <param name="pencolor"> The pen color.</param>
            <param name="penwidth"> The pen width.</param>
            <param name="penstyle"> The pen DashStyle.</param>
            <returns> Returns a pen from the pen cache.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartPrint">
            <summary>
              The ChartPrint class will  print an ChartView object to the selected printer.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPrint.printChartView">
            <summary>
             The ChartView object that will be printed.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPrint.printDoc">
            <summary>
             The printDoc class controls printing. The ChartPrint class calls methods  in this class to set 
             up a job, optionally to invoke a print dialog with the user,  and then to print the pages of the job.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPrint.printSizeMode">
            <summary>
             This field specifies how the ChartView area is mapped to the printed page  area. Use one of the 
             mapping mode constants: ChartObj.PRT_EXACT, ChartObj.PRT_MAX, or ChartObj.PRT_RECT.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPrint.printRect">
            <summary>
             This rectangle defines the output rectangle of the printed page, specified  in page normalized 
             coordinates, if the ChartObj.PRT_RECT mapping mode is specified.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPrint.printDialogFlag">
            <summary>
             This field flags whether or not the printDoc.printDialog() has been called.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPrint.doubleBuffer">
            <summary>
             This field specifies whether or not the ChartView is double buffered.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPrint.printBackgroundEnable">
            <summary>
             This field enables the printing of the ChartView background.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPrint.printComponentsEnable">
            <summary>
             This field enables the printing of non- components added to the ChartView component.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartPrint.printBorderEnable">
            <summary>
             This field enables the printing of ChartView component border.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.ErrorCheck(System.Int32)">
            <summary>
              Checks the current plot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.Copy(com.quinncurtis.chart2dnet.ChartPrint)">
            <summary>
              Copies the source ChartPrint object. 
            </summary>
            <param name="source"> The source ChartPrint object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.Clone">
            <summary>
             Returns an object that is a clone of this ChartPrint object. 
            </summary>
            <returns> Returns a clone of this ChartPrint object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.#ctor">
            <summary>
              The default ChartPrint constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.#ctor(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
              This constructor creates a new ChartPrint object that will print a  ChartView object. The default size 
              mode, ChartObj.PRT_EACT, is used. 
            </summary>
            <param name="component"> Specifies the ChartView object to be printed.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.#ctor(com.quinncurtis.chart2dnet.ChartView,System.Int32)">
            <summary>
              This constructor creates a new ChartPrint object that will print a  ChartView object. 
            </summary>
            <param name="component"> Specifies the ChartView object to be printed. </param>
            <param name="nsizemode"> Specifies the printer mapping mode.  Use one of the mapping mode constants: 
            ChartObj.PRT_EXACT, ChartObj.PRT_MAX, or ChartObj.PRT_RECT.  ChartObj.PRT_EXACT - The view is printed at the 
            same size as the screen, at least as  far as a one to one correspondence in the printing engine.  The aspect ratio 
            of the view is maintained.  ChartObj.PRT_MAX - The view is printed so that paper is used maximally.  Text is 
            printed proportionately to other objects, aspect ratio of the graph view is maintained.  ChartObj.PRT_RECT - 
            ChartPrint to the specified rectangle, specified using the setPrintRect  method and normalized coordinates. 
            The aspect ratio of the graph view is maintained..</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.#ctor(com.quinncurtis.chart2dnet.ChartView[],com.quinncurtis.chart2dnet.Rectangle2D[])">
            <summary>
              This constructor creates a new ChartPrint object that will print an list of ChartView objects. 
            </summary>
            <param name="components"> An array of ChartView objects to print. </param>
            <param name="posrects"> Specifies an array of Rectangle2D objects, one for each of the ChartView objects
             in the components array. The rectangles specify the position, in printer page normalized coordinates,
              of each ChartView object that is to be printed. The aspect ratio 
            of each ChartView object is maintained. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.SetPrintRect(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             This methods sets the output rectangle of the printed page that is used  when the ChartObj.PRT_RECT 
             mapping mode is selected 
            </summary>
            <param name="rect"> The output rectangle of the printed page, specified in  page normalized coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.GetPrintRect">
            <summary>
             This methods returns the output rectangle of the printed page, valid only  when the ChartObj.PRT_RECT
              mapping mode is selected 
            </summary>
            <returns> The output rectangle of the printed page, specified in  page normalized coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.DocPrintPage(System.Object,System.EventArgs)">
            <summary>
             The delegate use to print the graph.
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> A PrintPageEventArgs that contains the event data.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.DoPrintDialog">
            <summary>
             This method displays the printer dialog box and sets the print characteristics  of the print job. 
            </summary>
            <returns> Returns true if the user does not cancel the dialog; false otherwise.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.PageSetupItem(System.Object,System.EventArgs)">
            <summary>
             Invokes the printers page setup dialog.
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> A System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.PrintPreviewItem(System.Object,System.EventArgs)">
            <summary>
             Invokes the print preview feature.
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> A System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.PrintView(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
             This method handles the rendering of the printChartView object  to the printer device context. 
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> A PrintPageEventArgs that contains the event data.</param>	 
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.PrintViewArray(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
             This method handles the rendering of the printChartView object  to the printer device context. 
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> A PrintPageEventArgs that contains the event data.</param>	 
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.SetPrintChartView(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
             Sets the reference to the ChartView component that contains the chart that is to be printed. 
            </summary>
            <param name="component"> A reference to the ChartView component that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.GetPrintChartView">
            <summary>
             Returns a reference to the ChartView component that contains the chart that is to be printed. 
            </summary>
            <returns> Returns a reference to the ChartView component that contains the chart that is to be printed.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.SetPrintDoc(System.Drawing.Printing.PrintDocument)">
            <summary>
             Sets the reference to the PrintDocument object used to print the chart. 
            </summary>
            <param name="doc"> A reference to the PrintDocument object used to print the chart.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.GetPrintDoc">
            <summary>
             Returns a reference to the PrintDocument object used to print the chart. 
            </summary>
            <returns> Returns a reference to the PrintDocument object used to print the chart.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.SetPageSettings(System.Drawing.Printing.PageSettings)">
            <summary>
             Sets the reference to the PageSettings object used to print the chart. 
            </summary>
            <param name="pg"> A reference to the PageSettings object used to print the chart.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.GetPageSettings">
            <summary>
             Returns a reference to the PageSettings object used to print the chart. 
            </summary>
            <returns> Returns a reference to the PageSettings object used to print the chart.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.SetPrintSizeMode(System.Int32)">
            <summary>
             Specifies the printer mapping mode. 
            </summary>
            <param name="nsizemode"> Specifies the printer mapping mode. Use one of the mapping mode 
            constants:  ChartObj.PRT_EXACT, ChartObj.PRT_MAX or ChartObj.PRT_RECT.  
            ChartObj.PRT_EXACT - The view is printed at the same size as the screen, 
            at least as  far as there is a one to one correspondence in the printing engine.  
            The aspect ratio of the view is maintained.  ChartObj.PRT_MAX - The view is printed so 
            that paper is used maximally.  Text is printed proportionately to other objects, 
            aspect ratio of the graph view is maintained.  ChartObj.PRT_RECT - Print to the specified 
            rectangle, specified using the setPrintRect  method and normalized coordinates. 
            The aspect ratio of the graph view is maintained.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.GetPrintSizeMode">
            <summary>
             Returns the printer mapping mode. 
            </summary>
            <returns> Returns the printer mapping mode.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.SetPrintBackgroundEnable(System.Boolean)">
            <summary>
             Specifies the printer background print mode. 
            </summary>
            <param name="printbackground"> Specifies the printer background print mode.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.GetPrintBackgroundEnable">
            <summary>
             Returns the printer background print mode. 
            </summary>
            <returns> Returns the printer background print mode.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.SetPrintComponentsEnable(System.Boolean)">
            <summary>
             Enables the printing of non- components added to the ChartView component. 
            </summary>
            <param name="printcomponents"> True enables the printing of non- components added to the ChartView component.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.GetPrintComponentsEnable">
            <summary>
             Returns the printer component print mode. 
            </summary>
            <returns> Returns the printer component print mode. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPrint.SetPrintComponentsEnable(System.Boolean)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.SetPrintBorderEnable(System.Boolean)">
            <summary>
             Specifies the printer border print mode. 
            </summary>
            <param name="printborder"> Specifies the printer border print mode.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.GetPrintBorderEnable">
            <summary>
             Returns the printer border print mode. 
            </summary>
            <returns> Returns the printer border print mode.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.SetPrintDialogFlag(System.Boolean)">
            <summary>
             Sets the printer dialog flag. 
            </summary>
            <param name="printdialogflag"> Sets the printer dialog flag. TRUE  signifies that the print dialog 
            has already been called. Set  to TRUE internally if printDialog called.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartPrint.GetPrintDialogFlag">
            <summary>
             Returns the printer dialog flag 
            </summary>
            <returns> Returns the printer dialog flag. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartPrint.SetPrintDialogFlag(System.Boolean)"/>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPrint.PrintSizeMode">
            <summary>
             Set/Get the printer mapping mode. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPrint.PrintBackgroundEnable">
            <summary>
             Set/Get the printer background print mode. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPrint.PrintComponentsEnable">
            <summary>
             Set/Get the printing of non- components added to the ChartView component. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPrint.PrintBorderEnable">
            <summary>
             Set/Get the printer border print mode. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPrint.PrintDoc">
            <summary>
             Set/Get the printer document settings. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPrint.PrintPageSettings">
            <summary>
             Set/Get the printer page settings. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartPrint.PrintChartView">
            <summary>
             Set/Get the ChartView that is to be printed. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Scale">
            <summary>
              The Scale class is the abstract base class for all of the scale classes.  It implements a coordinate 
              system for a single coordinate, x or y.  Two Scale classes are needed to implement a xy coordinate system  
              using the PhysicalCoordinate system class.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Scale.scaleStart">
            <summary>
             The starting value of the scale. The starting value of the scale does not  have to be the minimum value 
             of the scale if the scale is inverted.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Scale.scaleStop">
            <summary>
             The ending value of the scale. The ending value of the scale does not  have to be the maximum value of the 
             scale if the scale is inverted.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.#ctor">
            <summary>
             The default constructor for the scale class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.ErrorCheck(System.Int32)">
            <summary>
              Checks the current scale object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.SetScale(System.Double,System.Double)">
            <summary>
             Sets the starting and ending values for the scale 
            </summary>
            <param name="rstart"> The scale starting point. </param>
            <param name="rstop"> The scale ending point.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.Copy(com.quinncurtis.chart2dnet.Scale)">
            <summary>
              Copies the source scale object. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.GetScaleStart">
            <summary>
             Returns the starting value of the scale. 
            </summary>
            <returns> Returns the starting value of the scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.GetScaleStop">
            <summary>
             Returns the ending value of the scale 
            </summary>
            <returns> Returns the ending value of the scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.GetMin">
            <summary>
             Returns the minimum value of the scale.  The starting value of the scale does not have to be the 
             minimum value of  the scale if the scale is inverted. 
            </summary>
            <returns> Returns the minimum value of the scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.GetMax">
            <summary>
             Returns the maximum value of the scale.  The ending value of the scale does not have to be the 
             maximum value of  the scale if the scale is inverted. 
            </summary>
            <returns> Returns the maximum value of the scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.GetRange">
            <summary>
             Returns the range (scaleStop - scaleStart) of the scale. 
            </summary>
            <returns> Returns the range (scaleStop - scaleStart) of the scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.GetMidpoint">
            <summary>
             Returns the midpoint (scaleStop + scaleStart)/2.0 of the scale. 
            </summary>
            <returns> Returns the midpoint (scaleStop + scaleStart)/2.0 of the scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.SetScaleStart(System.Double)">
            <summary>
             Sets the starting value of the scale. 
            </summary>
            <param name="rstart"> Sets the starting value of the scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.SetScaleStop(System.Double)">
            <summary>
             Sets the ending value of the scale. 
            </summary>
            <param name="rstop"> Sets the ending value of the scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.SetRangeFromStart(System.Double)">
            <summary>
             Sets the ending value of the scale based by adding a fixed amount to the  starting value 
             (scaleStop = ScaleStart + range). 
            </summary>
            <param name="range"> Sets the ending value of the scale by adding this value to the  starting value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.SetRangeFromStop(System.Double)">
            <summary>
             Sets the starting value of the scale based by subtracting a fixed amount from the  ending value 
             (scaleStart = scaleStop - range). 
            </summary>
            <param name="range"> Sets the starting value of the scale based by subtracting this value from the  
            ending value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.GetCompatibleAutoScale">
            <summary>
              An abstract methods that has the function of returning an auto-scale object  compatible with the 
              current scale object. 
            </summary>
            <returns> Returns a compatible auto-scale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.GetCompatibleAxis">
            <summary>
              An abstract methods that has the function of returning an axis object  compatible with the current 
              scale object. 
            </summary>
            <returns> Returns a compatible axis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.PhysToWorkingScale(System.Double)">
            <summary>
             An abstract methods that has the function of converting an x- or y-coordinate from physical coordinates 
             to working coordinates. 
            </summary>
            <param name="v"> The coordinate value that is converted from physical coordinates to working coordinates. </param>
            <returns> Returns the value of the coordinate in working coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.WorkingToPhysScale(System.Double)">
            <summary>
             An abstract methods that has the function of converting an x- or y-coordinate from working coordinates 
             to physical coordinates. 
            </summary>
            <param name="v"> The coordinate value that is converted from working coordinates to physical coordinates. </param>
            <returns> Returns the value of the coordinate in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Scale.CoordinateAdd(System.Double,System.Double)">
            <summary>
             An abstract methods that has the function of adding two values in the current physical coordinates.  
             This function is needed because some coordinate systems, time coordinates for example,  do not have to be 
             continuous. The CoordinateAdd method takes into account any  discontinuities in the coordinate system, 
             weekends for example in time coordinates  that use a 5 day week mode. 
            </summary>
            <param name="source"> The source coordinate value that is added to. </param>
            <param name="addvalue1"> This value is added to the source value. </param>
            <returns> Returns the sum of source + addvalue1, taking into account discontinuities in the  coordinate system.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Scale.ScaleStart">
            <summary>
             Set/Get the starting value of the scale. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Scale.ScaleStop">
            <summary>
             Set/Get the ending value of the scale 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartShape">
            <summary>
              The ChartShape class places arbitrary GraphicsPath objects in a chart.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartShape.shapeObj">
            <summary>
             Stores a reference to the shape object placed in the chart.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartShape.shapeCoordsType">
            <summary>
             Specifies the coordinate system used to define the shape.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartShape.shapeRotation">
            <summary>
             Specifies the rotation, in degrees, of the shape object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.ErrorCheck(System.Int32)">
            <summary>
              Checks the current shape object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.#ctor">
            <summary>
              The default ChartShape constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.InitDefaults">
            <summary>
              Initializes default values for the shape object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.Copy(com.quinncurtis.chart2dnet.ChartShape)">
            <summary>
              Copies the source shape object. 
            </summary>
            <param name="source"> The source shape object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.Clone">
            <summary>
             Returns an object that is a clone of this ChartShape object. 
            </summary>
            <returns> Returns a clone of this ChartShape object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.InitChartShapeObj(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
              Initializes the attributes of an ChartShape object. 
            </summary>
            <param name="transform"> The shape object is placed in the coordinate system defined by transform. </param>
            <param name="ashape"> A reference to a GraphicsPath object. </param>
            <param name="shapecoordstype"> Specifies if the coordinate system defining the shape is specified in  
            physical coordinates, normalized coordinates or window device coordinates.  Use one of 
            the position constants: DEV_POS, PHYS_POS, NORM_GRAPH_POS, NORM_PLOT_POS. </param>
            <param name="x"> Specifies the x-value of the shape position. </param>
            <param name="y"> Specifies the y-value of the shape position. </param>
            <param name="npostype"> Specifies the if the position of the shape is specified in  physical 
            coordinates, normalized coordinates or window device coordinates.  Use one of the position constants: 
            DEV_POS, PHYS_POS, NORM_GRAPH_POS, NORM_PLOT_POS. </param>
            <param name="rotation"> The rotation, in degrees, of the shape in the normal viewing plane.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Drawing2D.GraphicsPath,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new ChartShape object using the specified scale,  shape, position and rotation. 
            </summary>
            <param name="transform"> The shape object is placed in the coordinate system defined by transform. </param>
            <param name="ashape"> A reference to a GraphicsPath object. </param>
            <param name="shapecoordstype"> Specifies if the coordinate system defining the shape is specified in  
            physical coordinates, normalized coordinates or window device coordinates.  Use one of the position 
            constants: DEV_POS, PHYS_POS, NORM_GRAPH_POS, NORM_PLOT_POS. </param>
            <param name="x"> Specifies the x-value of the shape position. </param>
            <param name="y"> Specifies the y-value of the shape position. </param>
            <param name="npositiontype"> Specifies the if the position of the shape is specified in  physical 
            coordinates, normalized coordinates or window device coordinates.  Use one of the position constants: 
            DEV_POS, PHYS_POS, NORM_GRAPH_POS, NORM_PLOT_POS. </param>
            <param name="rotation"> The rotation, in degrees, of the shape in the normal viewing plane.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new ChartShape object using the specified scale. 
            </summary>
            <param name="transform"> The shape object is placed in the coordinate system defined by transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.ConvertSegment(System.Double[],System.Int32)">
            <summary>
             This method converts the xy coordinates of a shape segment into  physical coordinates. 
            </summary>
            <param name="coords"> An array of xy values, specifying the coordinates of  a segment of a shape. </param>
            <param name="ntype"> The segment type associated with the coords array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.ConvertShape(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
             This method converts a GraphicsPath object into a GraphicsPath object that used device coordinates. 
            </summary>
            <param name="s"> Specifies the shape object. </param>
            <returns> Returns the GraphicsPath object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.DrawShape(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a shape into the graphics context using the current ChartShape properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The shape is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance of 
              the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.SetShapeRotation(System.Double)">
            <summary>
              Sets the rotation of the shape in the normal viewing plane. 
            </summary>
            <param name="rotation"> The rotation (-360 to 360 degrees) of the shape in the normal viewing plane.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.GetShapeRotation">
            <summary>
              Returns the rotation of the shape in the normal viewing plane. 
            </summary>
            <returns> Returns the rotation (-360 to 360 degrees) of the shape in the normal viewing plane.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.SetShapeCoordsType(System.Int32)">
            <summary>
             Specifies the coordinate system of the shape object. 
            </summary>
            <param name="shapecoordstype"> Specifies the if the position of the shape is specified in  physical 
            coordinates, normalized coordinates or window device coordinates.  Use one of the position constants: 
            DEV_POS, PHYS_POS, NORM_GRAPH_POS, NORM_PLOT_POS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.GetShapeCoordsType">
            <summary>
             Returns the coordinate system of the shape object. 
            </summary>
            <returns> Returns the coordinate system of the shape object. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.ChartShape.SetShapeCoordsType(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.SetShapeObj(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
             Sets the shape object rendered in the chart by this class. 
            </summary>
            <param name="s"> Sets the shape object rendered in the chart by this class.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartShape.GetShapeObject">
            <summary>
             Returns a reference to the shape object rendered in the chart by this class. 
            </summary>
            <returns> Returns a reference to the shape object rendered in the chart by this class.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartShape.ShapeRotation">
            <summary>
              Set/Get the rotation of the shape in the normal viewing plane. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartShape.ShapeCoordsType">
            <summary>
             Set/Get the coordinate system of the shape object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartShape.ShapeObj">
            <summary>
             Set/Get the shape object rendered in the chart by this class. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartSupport">
            <summary>
              This class provides a collection of static functions used by the  other  classes.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.#ctor">
            <summary>
             The default ChartSupport constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetRandomDouble">
            <summary>
             This method returns a random value in the range 0.0 to 1.0.
            </summary>
            <returns> Returns a random value in the range 0.0 to 1.0. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.Clone">
            <summary>
             Returns an object that is a clone of this  object. 
            </summary>
            <returns> Returns a clone of this object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.SwapCoords(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             Swaps the values of two points
            </summary>
            <param name="dest"> The first point. </param>
            <param name="source"> The second point. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.SwapCoords(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             Swaps the x and y coordinates of a point
            </summary>
            <param name="source"> The point. </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.BGoodValue(System.Double)">
            <summary>
             Returns true if a value does not equal the designated bad data value. 
            </summary>
            <returns> Returns true if a value does not equal the designated bad data value. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.BGoodValue(System.Double,System.Double)">
            <summary>
             This method returns true if either the x or y value of a coordinate  is equal to the designate 
             bad value number, rBadDataValue. 
            </summary>
            <param name="x"> The x-coordinate. </param>
            <param name="y"> The y-coordinate. </param>
            <returns> Returns true if either the x or y value of a coordinate  is equal to the designate 
            bad value number, rBadDataValue.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.BGoodValue(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method returns true if either the x or y value of a coordinate  is equal to the designate bad 
             value number, rBadDataValue. 
            </summary>
            <param name="p"> The x- and y-coordinates </param>
            <returns> Returns true if either the x or y value of a coordinate  is equal to the designate bad 
            value number, rBadDataValue.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.BGoodValue(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This method returns true if the end points of a line segment  have coordinate values equal to the 
             designate bad value number, rBadDataValue. 
            </summary>
            <param name="x1"> The x-coordinate for the first point of the line segment. </param>
            <param name="y1"> The y-coordinate for the first point of the line segment. </param>
            <param name="x2"> The x-coordinate for the second point of the line segment. </param>
            <param name="y2"> The y-coordinate for the second point of the line segment. </param>
            <returns> Returns true if any of the coordinate values  are equal to the designate bad value number, 
            rBadDataValue.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.BGoodValue(System.Double,System.Double,System.Double)">
            <summary>
             This method returns true if either the x, y or z value of a coordinate  is equal to the designate bad 
             value number, rBadDataValue. 
            </summary>
            <param name="x1"> The x-coordinate. </param>
            <param name="y1"> The y-coordinate. </param>
            <param name="z1"> The z-coordiante. </param>
            <returns> Returns true if either the x, y or z value of a coordinate  is equal to the designate bad 
            value number, rBadDataValue.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.NearTest(System.Double,System.Double,System.Double)">
            <summary>
             This method returns true if the difference between two numbers  is less than the specified threshold value. 
            </summary>
            <param name="a1"> The first of two numbers. </param>
            <param name="a2"> The second of two numbers. </param>
            <param name="threshold"> The threshold value. </param>
            <returns> Returns true if (abs(a2-a1) less than threshold).</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.Log10Ex(System.Double)">
            <summary>
             Converts a number to its log base 10 value. 
            </summary>
            <param name="r"> A floating point value in the positive range  MIN_LOG_VALUE to MAX_LOG_VALUE. </param>
            <returns> Returns the log base 10 value of r. The return value  for input values less than or equal 
            to 0 is 1 to minimize undesirable chart side  affects.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.Antilog10Ex(System.Double)">
            <summary>
             Converts a number to its anti log base 10 value. 
            </summary>
            <param name="r"> A floating point value -30 to +30, representing  the log base 10 of MIN_LOG_VALUE and 
            log base 10 of MAX_LOG_VALUE. </param>
            <returns> Returns the anti log base 10 of the value r.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.Log10Abs(System.Double)">
            <summary>
             Converts the absolute value of a number to its log base 10 value. 
            </summary>
            <param name="r"> A floating point value in the positive range  MIN_LOG_VALUE to MAX_LOG_VALUE. </param>
            <returns> Returns the log base 10 value of abs(r).</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.AdjustDecs(System.Double,System.Int32)">
            <summary>
             This method adjusts the number of digits to the right of the decimal used  to display axis labels. 
             Depending on the value, more digits may be  needed than originally calculated to display the numeric 
             value with sufficient  precession. 
            </summary>
            <param name="r"> The input value. </param>
            <param name="decs"> The original calculated value for the number of digits to the  right of the decimal point. </param>
            <returns> Returns the adjusted value for the number of digits to the  right of the decimal point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.NumToString(System.Double,System.Int32,System.Int32,System.String)">
            <summary>
             This method converts a numeric value to a string using the specified string  format. 
            </summary>
            <param name="num"> The input number. </param>
            <param name="format"> The numeric format used in the conversion. Use one of the  axis label format 
            constants: DECIMALFORMAT, SCIENTIFICFORMAT, BUSINESSFORMAT, ENGINEERINGFORMAT,  PERCENTFORMAT, 
            BUSINESSCURRENCYFORMAT, CURRENCYFORMAT. </param>
            <param name="decs"> The number of digits to display to the right of the decimal point. </param>
            <param name="numStrPostfix"> A string specifying the post fix characters for the BUSINESSFORMAT  
            and BUSINESSCURRENCYFORMAT. The default string is "KMBT". </param>
            <returns> Returns the value of num as a formatted string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetFirstValidValue(System.Double[],System.Int32)">
            <summary>
             This method returns the first valid value in an array. 
            </summary>
            <param name="r"> An array of doubles. </param>
            <param name="n"> The number of elements in the array. </param>
            <returns> Returns the first valid value in the array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetFirstValidIndex(System.Double[],System.Int32)">
            <summary>
             This method returns index of the first valid value in an array. 
            </summary>
            <param name="r"> An array of doubles. </param>
            <param name="n"> The number of elements in the array. </param>
            <returns> Returns the index of the first valid value in the array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetFirstValidIndex(System.Double[],System.Double[],System.Int32)">
            <summary>
             This method returns index of the first valid xy value pair in a pair of x and y-  coordinate arrays. 
            </summary>
            <param name="x"> An array of x-coordinate values. </param>
            <param name="y"> An array of y-coordinate values. </param>
            <param name="n"> The number of elements in the array. </param>
            <returns> Returns the index of the first valid xy value pair in the x and y-coordinate arrays.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetFirstValidIndex(com.quinncurtis.chart2dnet.Point2D[],System.Int32)">
            <summary>
             This method returns index of the first valid point in an array of Point2D points. 
            </summary>
            <param name="p"> An array of points. </param>
            <param name="n"> The number of elements in the array. </param>
            <returns> Returns the index of the first valid xy value pair in the x and y-coordinate arrays.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetFirstValidIndex(System.Boolean[],System.Int32)">
            <summary>
             This method returns index of the first valid point in an array of Point2D points. 
            </summary>
            <param name="valid"> An array of bool values. </param>
            <param name="n"> The number of elements in the array. </param>
            <returns> Returns the index of the first valid xy value pair in the x and y-coordinate arrays.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetMinimum(com.quinncurtis.chart2dnet.DoubleArray,com.quinncurtis.chart2dnet.BoolArray)">
            <summary>
              This method returns the minimum value in an array. 
            </summary>
            <param name="r"> An array that contains the data values to check. </param>
            <param name="valid"> An array that specifies a true or false value  for every value in the r array, 
            specifying if the value is valid. </param>
            <returns> Returns the minimum value in the array, r.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetMinimum(com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
              This method returns the minimum value in an array. 
            </summary>
            <param name="r"> An array that contains the data values to check. </param>
            <returns> Returns the minimum value in the array, r.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetMinimum(System.Double[])">
            <summary>
              This method returns the minimum value in an array. 
            </summary>
            <param name="r"> An array that contains the data values to check. </param>
            <returns> Returns the minimum value in the array, r.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetMaximum(com.quinncurtis.chart2dnet.DoubleArray,com.quinncurtis.chart2dnet.BoolArray)">
            <summary>
              This method returns the maximum value in an array. 
            </summary>
            <param name="r"> An array that contains the data values to check. </param>
            <param name="valid"> An array that specifies a true or false value  for every value in the r array, 
            specifying if the value is valid. </param>
            <returns> Returns the maximum value in the array, r.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetMaximum(com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
              This method returns the maximum value in an array. 
            </summary>
            <param name="r"> An array that contains the data values to check. </param>
            <returns> Returns the maximum value in the array, r.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetMaximum(System.Double[])">
            <summary>
              This method returns the maximum value in an array. 
            </summary>
            <param name="r"> An array that contains the data values to check. </param>
            <returns> Returns the maximum value in the array, r.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetMinimum(com.quinncurtis.chart2dnet.DoubleArray2D,com.quinncurtis.chart2dnet.BoolArray,System.Int32)">
            <summary>
              This method returns the minimum value in a 2D array. 
            </summary>
            <param name="rc"> A 2D array that contains the data values to check. </param>
            <param name="valid"> An array that specifies a true or false value  for every value in the r array, 
            specifying if the value is valid. </param>
            <param name="ngroup"> Number of groups to analyze in array.   </param>
            <returns> Returns the minimum value in the array, r.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetMaximum(com.quinncurtis.chart2dnet.DoubleArray2D,com.quinncurtis.chart2dnet.BoolArray,System.Int32)">
            <summary>
              This method returns the maximum value in a 2D array. 
            </summary>
            <param name="rc"> A 2D array that contains the data values to check. </param>
            <param name="valid"> An array that specifies a true or false value  for every value in the r array, 
            specifying if the value is valid.  </param>
            <param name="ngroup"> Number of groups to analyze in array.   </param>
            <returns> Returns the maximum value in the array, r.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetDatasetsMin(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32,System.Int32)">
            <summary>
              This static method returns the minimum value in an array of SimpleDataset objects. 
            </summary>
            <param name="datasets"> An array, size [numdatasets], of SimpleDataset objects. </param>
            <param name="numdatasets"> The number of datasets in the datasets array. </param>
            <param name="naxis"> Specifies which coordinate to analyze, the x-coordinate (use the X_AXIS constant),  
            or the y-coordinate (use the Y_AXIS constant). </param>
            <returns> Returns the minimum value in the array of SimpleDataset objects.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetDatasetsMax(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32,System.Int32)">
            <summary>
              This static method returns the maximum value in an array of SimpleDataset objects. 
            </summary>
            <param name="datasets"> An array, size [numdatasets], of SimpleDataset objects. </param>
            <param name="numdatasets"> The number of datasets in the datasets array. </param>
            <param name="naxis"> Specifies which coordinate to analyze, the x-coordinate (use the X_AXIS constant),  
            or the y-coordinate (use the Y_AXIS constant). </param>
            <returns> Returns the maximum value in the array of SimpleDataset objects.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.FloatToDoubleArray(System.Single[])">
            <summary>
              This method will convert a double array to a float array, for those who have arrays of data  
              in float format. 
            </summary>
            <param name="floatarray"> An array of floats. </param>
            <returns> Returns the original float values converted to doubles.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetDatasetsSumMin(com.quinncurtis.chart2dnet.GroupDataset[],System.Int32,System.Int32)">
            <summary>
              This method is used by the auto-scale routines to  determine the minimum scale value for "stacked" 
              graphs that use group data.  For the x-coordinate it returns the minimum x-value in the passed in  datasets. For the y-coordinate it returns the minimum y-value value in  group #0 of the passed in datasets.  If the x-values use ChartCalendar dates, the equivalent of the date  in seconds is returned. 
            </summary>
            <param name="datasets"> An array, size [numdatasets], of GroupDataset objects. </param>
            <param name="numdatasets"> The number of datasets in the datasets array. </param>
            <param name="naxis"> Specifies which coordinate to analyze, the x-coordinate (use the X_AXIS constant),  
            or the y-coordinate (use the Y_AXIS constant). </param>
            <returns> Returns the minimum group value (as described above) for the specified coordinate.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetDatasetsSumMax(com.quinncurtis.chart2dnet.GroupDataset[],System.Int32,System.Int32)">
            <summary>
              This method is used by the auto-scale routines to  determine the maximum scale value for "stacked" 
              graphs that use group data.  For the x-coordinate it returns the maximum x-value in the passed in  
              datasets. For the y-coordinate it returns the  maximum of the sum across groups for of the passed 
              in datasets.  If the x-values use ChartCalendar dates, the equivalent of the date  in seconds is returned. 
            </summary>
            <param name="datasets"> An array, size [numdatasets], of GroupDataset objects. </param>
            <param name="numdatasets"> The number of datasets in the datasets array. </param>
            <param name="naxis"> Specifies which coordinate to analyze, the x-coordinate (use the X_AXIS constant),  
            or the y-coordinate (use the Y_AXIS constant). </param>
            <returns> Returns the maximum group value (as described above) for the specified coordinate.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GetCoordinateSystemType(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This method returns POLAR_POS if the coordinate system is of type PolarCoordinates, otherwise it 
              returns PHYS_POS.
            </summary>
            <param name="transform"> The source coordinate system. </param>
            <returns> POLAR_POS if the coordinate system is of type PolarCoordinates, otherwise it 
            returns PHYS_POS.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.CalcNearestPoint(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.SimpleDataset,System.Boolean,com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against all of the xy points  in a simple dataset and calculates 
              which point in the dataset  is nearest the test point. The nearness test has many  different forms: 
              FNP_X = nearest x, FNP_Y = nearest y,  FNP_DIST = shortest distance, FNP_NORMX = nearest normalized x,  
              FNP_NORMY = nearest normalized y, FNP_NORMDIST = shortest normalized distance. 
            </summary>
            <param name="transform"> The coordinate system of the test point. </param>
            <param name="dataset"> The dataset that is checked for the nearest point. </param>
            <param name="coordswap"> If the x-values in the dataset correspond to the x-coordinates of the  
            chart coordinate system, specify false, otherwise specify true. </param>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.CalcNearestPoint(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,System.Boolean,com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against all of the xy points  in a simple dataset and 
              calculates which point in the dataset  is nearest the test point. The nearness test has many  
              different forms: FNP_X = nearest x, FNP_Y = nearest y,  FNP_DIST = shortest distance, 
              FNP_NORMX = nearest normalized x,  FNP_NORMY = nearest normalized y, FNP_NORMDIST = shortest 
              normalized distance. 
            </summary>
            <param name="transform"> The coordinate system of the test point. </param>
            <param name="dataset"> The dataset that is checked for the nearest point. </param>
            <param name="coordswap"> If the x-values in the dataset correspond to the x-coordinates of the  
            chart coordinate system, specify false, otherwise specify true. </param>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.ClampReal(System.Double,System.Double,System.Double)">
            <summary>
             This method checks and limits the range of the input variable, preventing wild  numeric 
             overflows from propagating. 
            </summary>
            <param name="r"> The input variable. </param>
            <param name="lowvalue1"> The input variable is checked against this low value, and  set equal to this 
            value if the value is less than the low threshold. </param>
            <param name="highvalue1"> The input variable is checked against this high value, and  set equal to this 
            value if the value is greater than the high threshold. </param>
            <returns> The original input variable is returned if the value was between  the lowvalue1 and highvalue1 
            limits. Otherwise, the low value or high value  limit is returned, depending on which threshold 
            was exceeded.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.ClampToViewCoordinates(System.Double)">
            <summary>
             This method checks and limits the range of the input value from exceeding the value of +- USER_COORD_MAX. 
            </summary>
            <param name="r"> The input value. </param>
            <returns> The original input variable is returned if the value was between +- USER_COORD_MAX . 
            Otherwise, the low value or high value limit is returned, depending on which threshold was exceeded.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.ClampInt(System.Int32,System.Int32,System.Int32)">
            <summary>
             This method checks and limits the range of the input variable, preventing wild  numeric overflows 
             from propagating. 
            </summary>
            <param name="i"> The input variable. </param>
            <param name="lowvalue1"> The input variable is checked against this low value, and  set equal to this 
            value if the value is less than the low threshold. </param>
            <param name="highvalue1"> The input variable is checked against this high value, and  set equal to this 
            value if the value is greater than the high threshold. </param>
            <returns> The original input variable is returned if the value was between  the lowvalue1 and highvalue1 
            limits. Otherwise, the low value or high value  limit is returned, depending on which threshold was exceeded.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.FixCommonRangeError(com.quinncurtis.chart2dnet.Rectangle2D,System.Double,System.Double)">
            <summary>
             This method checks and repairs common errors in specifying range limits for graphs.  The most common 
             error is to set the minimum and maximum value for either the x-dimension  or the y-dimension to be the same, 
             resulting in a zero range. Another common error is scaling one of the endpoints  of a logarithmic scale 
             to a value less than or equal to 0.0. If any error is detected one or both  values are changed to prevent 
             further problems upstream. 
            </summary>
            <param name="rect"> Passes in and returns the returns (adjusted if necessary) the x-dimension and y-dimesion 
            minimum and  maximum values. </param>
            <param name="typicalmin"> The minimum allowable value to use in the check. </param>
            <param name="typicalmax"> The The maximum allowable value to use in the check.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.IsKindOf(System.Object,System.String)">
            <summary>
             This method checks to see if an object is of a specific com.quinncurtis.chart2dnet class type.  
             The method will return true if the object matches the class specified by the type string,  or if 
             any super class of the object matches. 
            </summary>
            <param name="obj"> The com.quinncurtis.chart2dnet object that is tested. </param>
            <param name="typestring"> A string representing a com.quinncurtis.chart2dnet class. For example, 
            the string "Obj" will  result in true being returned for all com.quinncurtis.chart2dnet objects 
            since all objects have Obj as a super class.  The string "MultiLinePlot" will only return true if 
            the test object of the MultiLinePlot type. </param>
            <returns> Returns true if the object matches the class specified by the type string,  or if any 
            super class of the object matches.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.IsKindOf(System.Object,System.String,System.Boolean)">
            <summary>
             This method checks to see if an object is of a specific com.quinncurtis.chart2dnet class type.  
             The method will return true if the object matches the class specified by the type string,  or 
             if any super class of the object matches. 
            </summary>
            <param name="obj"> The com.quinncurtis.chart2dnet object that is tested. </param>
            <param name="typestring"> A string representing a com.quinncurtis.chart2dnet class. For example, 
            the string "Obj" will  result in true being returned for all com.quinncurtis.chart2dnet objects 
            since all objects have Obj as a super class.  The string "MultiLinePlot" will only return true 
            if the test object of the MultiLinePlot type. </param>
            <param name="appendqc"> True appends "com.quinncurtis.chart2dnet." to the front of the type string. </param>
            <returns> Returns true if the object matches the class specified by the type string,  or if 
            any super class of the object matches.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.IsType(System.Object,System.String)">
            <summary>
             This method checks to see if an object is of a specific com.quinncurtis.chart2dnet class type.  
             The method will return true if the object matches the class specified by the type string,  
             or if any super class of the object matches. 
            </summary>
            <param name="obj"> The com.quinncurtis.chart2dnet object that is tested. </param>
            <param name="typestring"> A string representing a com.quinncurtis.chart2dnet class. For example, 
            the string "Obj" will  result in true being returned for all com.quinncurtis.chart2dnet objects since 
            all objects have Obj as a super class.  The string "MultiLinePlot" will only return true if the test 
            object of the MultiLinePlot type. </param>
            <returns> Returns true if the object matches the class specified by the type string,  or if any super 
            class of the object matches.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.FindRelatedAxisLabels(System.Int32,System.Collections.ArrayList)">
            <summary>
             This method returns the index of the AxisLabels object embedded in the specified Axis object.  
             It is used to "fixup" the Axis and AxisLabels objects after a viewport copy. 
            </summary>
            <param name="index"> The index of the Axis in the source vector. </param>
            <param name="source"> The vector of all GraphObj objects managed by a ChartView object. </param>
            <returns> Returns the index of the AxisLabels object embedded in the specified Axis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.FindRelatedPolarAxesLabels(System.Int32,System.Collections.ArrayList)">
            <summary>
             This method returns the index of the PolarAxesLabels object embedded in the specified PolarAxes object.  
             It is used to "fixup" the PolarAxes and PolarAxesLabels objects after a viewport copy. 
            </summary>
            <param name="index"> The index of the PolarAxes in the source vector. </param>
            <param name="source"> The vector of all GraphObj objects managed by a ChartView object. </param>
            <returns> Returns the index of the PolarAxesLabels object embedded in the specified PolarAxes object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.FindRelatedGridAxes(System.Int32,System.Collections.ArrayList,System.Int32,System.Int32)">
            <summary>
             This method returns the indices of the Axis objects embedded in the specified Grid object.  It is used to 
             "fixup" the Grid objects after a viewport copy. 
            </summary>
            <param name="index"> The index of the Grid in the source vector. </param>
            <param name="source"> The vector of all GraphObj objects managed by a ChartView object. </param>
            <param name="xgridaxis"> Returns the index of the x-axis Axis object embedded in the specified Grid object. </param>
            <param name="ygridaxis"> Returns the index of the y-axis Axis object embedded in the specified Grid object. </param>
            <returns> Returns the index of the Axis object that controls the grid line spacing, embedded in the 
            specified Axis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.FindRelatedAxisTitleAxis(System.Int32,System.Collections.ArrayList)">
            <summary>
             This method returns the index of the Axis object embedded in the specified AxisTitle object.  
             It is used to "fixup" the AxisTitle objects after a viewport copy. 
            </summary>
            <param name="index"> The index of the AxisTitle in the source vector. </param>
            <param name="source"> The vector of all GraphObj objects managed by a ChartView object. </param>
            <returns> Returns the index of the Axis object embedded in the specified AxisTitle object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.MakeCompressArray(System.Int32,System.Int32,System.Int32,System.Int32,com.quinncurtis.chart2dnet.DoubleArray,com.quinncurtis.chart2dnet.BoolArray)">
            <summary>
              This methods creates and returns a new array that is the data reduced  version of the source array. The new, 
              compressed array will contain  ((endindex - startindex + 1) / wSkip) datapoints. 
            </summary>
            <param name="ctype"> The compression type for the source values. Use one of the data compression type 
            constants:  DATACOMPRESS_NONE (returns an array containing the points in the specified range, no compression),  
            DATACOMPRESS_SKIP (sample the array every interval points), DATACOMPRESS_AVERAGE  (use the average value in each 
            interval of wSkip points), DATACOMPRESS_MIN  (use the minimum value in each interval of wSkip points), 
            DATACOMPRESS_MAX (use the maximum value  in each interval of wSkip points), and DATACOMPRESS_MINMAX 
            (use the minimum and maximum value in each interval of wSkip points). </param>
            <param name="wSkip"> The number of data points in each segment that is reduced to a single datapoint (the 
            interval  is wSkip  2 for the DATACOMPRESS_MINMAX compression type because it is reduced to two data points, 
            min and max)  in the compressed dataset. </param>
            <param name="lFirst"> The starting point, inclusive, in the source array for the data compression. </param>
            <param name="lLast"> The ending index, inclusive, in the source array for the data compression. </param>
            <param name="source"> The source array of data to be reduced. </param>
            <param name="validflags"> An array, the same size as the source array, that specify whether 
            individual data points  in the source array are valid. </param>
            <returns> Returns the new, compressed array, size (endindex - startindex + 1) / wSkip).</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.MakeGroupCompressArray(System.Int32,System.Int32,System.Int32,System.Int32,com.quinncurtis.chart2dnet.DoubleArray2D,com.quinncurtis.chart2dnet.BoolArray)">
            <summary>
              This methods creates and returns a new group data array that is the data reduced  version of the 
              source array. The new, compressed array will have dimensions of  [ngroups,((endindex - startindex + 1) / wSkip)]. 
            </summary>
            <param name="ctype"> The compression type for the source values. Use one of the data compression 
            type constants:  DATACOMPRESS_NONE (returns an array containing the points in the specified range, 
            no compression),  DATACOMPRESS_SKIP (sample the array every interval points), DATACOMPRESS_AVERAGE  
            (use the average value in each interval of wSkip points), DATACOMPRESS_MIN  (use the minimum value 
            in each interval of wSkip points), DATACOMPRESS_MAX (use the maximum value  in each interval 
            of wSkip points), and DATACOMPRESS_MINMAX (use the minimum and maximum value in each interval of 
            wSkip points). </param>
            <param name="wSkip"> The number of data points in each segment that is reduced to a single 
            datapoint (the interval  is wSkip  2 for the DATACOMPRESS_MINMAX compression type because 
            it is reduced to two data points, min and max)  in the compressed dataset. </param>
            <param name="lFirst"> The starting point, inclusive, in the source array for the data compression. </param>
            <param name="lLast"> The ending index, inclusive, in the source array for the data compression. </param>
            <param name="source"> The source array (2D array of group data dimensioned as [ngrups,numpoints]) 
            of data to be reduced. </param>
            <param name="validflags"> An array, the size [numpoints], that specify whether a given index 
            (source[,index])  in the source array is valid. </param>
            <returns> Returns the new, compressed array with dimensions of 
            [ngroups,((endindex - startindex + 1) / wSkip)].</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.MakeTimeCompressArray(System.Int32,System.Int32,System.Int32,System.Int32,com.quinncurtis.chart2dnet.DoubleArray,com.quinncurtis.chart2dnet.DoubleArray,com.quinncurtis.chart2dnet.BoolArray)">
            <summary>
              This methods creates and returns a new array of time based values that is the data reduced  version 
              of the source array of time based values. The values are compressed in the time dimension 
              so that all  values with the same compresstimefield value are grouped together and summarized 
              with a single value.  For example, the original data represends hourly data and you select a 
              compresstimefield value of ChartObj.DAY_OF_YEAR,  the hourly data will be compressed to a 
              single value for that day. One years worth of data, 24 x 365 values in this case,  will be 
              reduced to 365 values. 
            </summary>
            <param name="compresstimefield"> All values with the same time field value are compressed to a 
            single value. Use one  of the time field constants in the - ChartObj.YEAR, ChartObj.MONTH,  
            ChartCalendar.WEEK_OF_YEAR, ChartCalendar.WEEK_OF_MONTH, ChartObj.DAY_OF_YEAR, ChartObj.HOUR_OF_DAY, 
            ChartObj.MINUTE. </param>
            <param name="compresstype"> The compression type for the source values. Use one of the 
            data compression type constants:  DATACOMPRESS_NONE (returns an array containing the points 
            in the specified range, no compression),  DATACOMPRESS_SKIP (sample the array every interval points), 
            DATACOMPRESS_AVERAGE  (use the average value in each interval of wSkip points), DATACOMPRESS_MIN  
            (use the minimum value in each interval of wSkip points), DATACOMPRESS_MAX (use the maximum value  
            in each interval of wSkip points), and DATACOMPRESS_MINMAX (use the minimum and maximum value in each 
            interval of wSkip points). </param>
            <param name="lFirst"> The starting point, inclusive, in the source array for the data compression. </param>
            <param name="lLast"> The ending index, inclusive, in the source array for the data compression. </param>
            <param name="sourcetime"> The source time array for the data to be reduced. It must be time based values. </param>
            <param name="sourcey"> The source array that is actually reduced. It can be either numeric y-values, or 
            time based values. </param>
            <param name="validflags"> An array, the same size as the source array, that specify whether individual 
            data points  in the source array are valid. </param>
            <returns> Returns the new, compressed array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.ToDegrees(System.Double)">
            <summary>
             This method converts from radians to degrees. 
            </summary>
            <param name="radians"> The radians to convert. </param>
            <returns> Returns the value of radians in degrees.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.ToRadians(System.Double)">
            <summary>
             This method converts from degrees to radians. 
            </summary>
            <param name="degrees"> The degrees to convert. </param>
            <returns> Returns the value of degrees in radians.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.IsStackedPlotType(com.quinncurtis.chart2dnet.ChartPlot)">
            <summary>
             This method returns true if a plot object is one of the stacked (STACKEDBAR or STACKEDLINE) chart types. 
            </summary>
            <param name="plotobj"> The plot object to test. </param>
            <returns> This method returns true if a plot object is one of the stacked (STACKEDBAR or STACKEDLINE) 
            chart types. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.InterpolateColor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
             This method returns a color which is the interpolation from color1 to color2. 
            </summary>
            <param name="color1"> The start color of the inerpolation. </param>
            <param name="color2"> The end color of the inerpolation. </param>
            <param name="interpolatevalue"> A number between 0.0 and 1.0 that specifies the interpolation value. </param>
            <returns>  Returns the interpolated color.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSupport.GradientBar(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Rectangle2D,com.quinncurtis.chart2dnet.Rectangle2D,System.Drawing.Color,System.Drawing.Color,System.Double,System.Int32)">
            <summary>
              Draws a gradient rectangle with user defined striping.
            </summary>
            <param name="g2"> The graphics context.</param>
            <param name="bgrect"> The drawing rectangle.</param>
            <param name="scalerect"> The scaling rectangle for the gradient.</param>
            <param name="color1"> The first of the two gradient colors.</param>
            <param name="color2"> The second of the two gradient colors.</param>
            <param name="stripwidth"> The strip width as a percentage of the scale rect.</param>
            <param name="direction"> Direction of the gradient.</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartSymbol">
            <summary>
             The ChartSymbol class creates scatter plot symbols  in the SimpleScatterPlot, LineMarkerPlot, 
             PolarScatterPlot,  and DataCursor plot types.  The symbols are create as GraphicsPath objects.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartSymbol.symbolNumber">
            <summary>
             The value of the current symbol. Use one of chart symbol constants: NOSYMBOL, SQUARE, TRIANGLE, 
             DIAMOND, CROSS , PLUS,STAR ,LINE,HBAR, VBAR, and CIRCLE
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartSymbol.symbolShape">
            <summary>
             The GraphicsPath represented by the value of symbolNumber.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartSymbol.maxSymbolNum">
            <summary>
             The maximum symbol number value.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartSymbol.symbolRotation">
            <summary>
             The symbol rotation value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.ErrorCheck(System.Int32)">
            <summary>
              Checks the ChartSymbol object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.Copy(com.quinncurtis.chart2dnet.ChartSymbol)">
            <summary>
              Copies the source ChartSymbol object. 
            </summary>
            <param name="source"> The source ChartSymbol object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.Clone">
            <summary>
             Returns an object that is a clone of this ChartSymbol object. 
            </summary>
            <returns> Returns a clone of this ChartSymbol object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.#ctor">
            <summary>
              The default ChartSymbol constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new ChartSymbol object using the specified scale,  symbol and attributes. 
            </summary>
            <param name="transform"> The symbol object is placed in the coordinate system defined by transform. </param>
            <param name="nsymbol"> The symbol number. Use one of chart symbol constants:  NOSYMBOL, SQUARE, TRIANGLE, 
            DIAMOND,CROSS , PLUS,STAR ,LINE,HBAR, VBAR,BAR3D, and CIRCLE. </param>
            <param name="attrib"> Specifies the attributes (line and fill color) for the symbol.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new ChartSymbol object using the specified scale,  GraphicsPath and attributes. 
            </summary>
            <param name="transform"> The symbol object is placed in the coordinate system defined by transform. </param>
            <param name="symbolshape"> A reference to a GraphicsPath object. </param>
            <param name="attrib"> Specifies the attributes (line and fill color) for the symbol.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new ChartSymbol object using the specified scale,  GraphicsPath and attributes. 
            </summary>
            <param name="transform"> The symbol object is placed in the coordinate system defined by transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.InitChartSymbol(System.Int32,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This method initializes the properties of a chart symbol. 
            </summary>
            <param name="nsymbol"> The symbol number. Use one of chart symbol constants:  NOSYMBOL, SQUARE, TRIANGLE, 
            DIAMOND,CROSS , PLUS,STAR ,LINE,HBAR, VBAR,BAR3D, and CIRCLE. </param>
            <param name="attrib"> Specifies the attributes (line and fill color) for the symbol.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.DrawSymbol(System.Drawing.Graphics)">
            <summary>
             Draws the symbol to the current graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetSymbolShape">
            <summary>
             Returns the GraphicsPath of the current symbol. 
            </summary>
            <returns> Returns the GraphicsPath of the current symbol.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.SetSymbolShape(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
             Sets the GraphicsPath of the current symbol. 
            </summary>
            <param name="GraphicsPath"> Sets the GraphicsPath of the current symbol.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetNoSymbolShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value NOSYMBOL. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value NOSYMBOL.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetSquareShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value SQUARE. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value SQUARE.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetDownTriangleShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value DOWNTRIANGLE. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value DOWNTRIANGLE.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetUpTriangleShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value UPTRIANGLE. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value UPTRIANGLE.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetDiamondShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value DIAMOND. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value DIAMOND.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetCrossShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value CROSS. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value CROSS.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetPlusShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value PULSE. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value PLUSE.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetStarShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value STAR. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value START.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetLineShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value LINE. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value LINE.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetHBarShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value HBAR. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value DOWNTRIANGLE.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetVBarShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value VBAR. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value VBAR.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetCircleShape">
            <summary>
             Returns the GraphicsPath object represented by the symbol value CIRCLE. 
            </summary>
            <returns> Returns the GraphicsPath object represented by the symbol value CIRCLE.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.CalcSymbolShape(System.Int32)">
            <summary>
             Returns the GraphicsPath object represented by the specified symbol value. 
            </summary>
            <param name="nsymbol"> The symbol number. </param>
            <returns> Returns the GraphicsPath object represented by the specified symbol value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance of 
              the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.SetSymbolSize(System.Double)">
            <summary>
             Sets the symbol size of an ChartSymbol object. 
            </summary>
            <param name="size"> The symbol size, measured in window device coordinates,  sets the field symbolSize.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetSymbolSize">
            <summary>
             Returns the symbol size of an ChartSymbol object. 
            </summary>
            <returns> Returns the symbol size.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.GetSymbolNumber">
            <summary>
             Returns the symbol number. 
            </summary>
            <returns> Returns the symbol number.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartSymbol.SetSymbolNumber(System.Int32)">
            <summary>
             Sets the symbol number. 
            </summary>
            <param name="symbol"> Sets the symbol number.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartSymbol.SymbolSize">
            <summary>
             Set/Get the symbol size of an ChartSymbol object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartSymbol.SymbolRotation">
            <summary>
             Set/Get the symbol rotation of an ChartSymbol object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartSymbol.SymbolNumber">
            <summary>
             Returns the symbol number. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartTitle">
            <summary>
             The ChartTitle class creates a header, subheader and footer for a chart.  It is a concrete subclass of 
             the Text class.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartTitle.titleOffset">
            <summary>
             Header text is offset from the top of the chart, and  footer text is offset from the bottom of the chart, 
             by this value in device units.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartTitle.titleType">
            <summary>
             The title can be a header, subhead or footer. Use one of the title constants:  CHART_HEADER, CHART_SUBHEAD 
             or CHART_FOOTER.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartTitle.titlePosition">
            <summary>
             The title can be centered with respect to the entire graph area, or the plotting area. Use one of the title 
             position constants: CENTER_GRAPH or CENTER_PLOT.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.#ctor">
            <summary>
              The default ChartTitle constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.ErrorCheck(System.Int32)">
            <summary>
              Checks the chart title object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.InitChartTitle(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String,System.Int32,System.Int32)">
            <summary>
              This method initializes a new ChartTitle using the specified scale,  font, string, type and position. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object. </param>
            <param name="ntitletype"> The title can be a header, subhead or footer. Use one of the title type 
            constants:  CHART_HEADER, CHART_SUBHEAD or CHART_FOOTER. </param>
            <param name="ntitlepos"> The title can be centered with respect to the entire graph area, or the 
            plotting area.  Use one of the title position constants: CENTER_GRAPH or CENTER_PLOT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String)">
            <summary>
              This constructor creates a new ChartTitle using the specified scale,  font, and string. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new ChartTitle using the specified scale,  font, string, type and position. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object. </param>
            <param name="ntitletype"> The title can be a header, subhead or footer. Use one of the title type 
            constants:  CHART_HEADER, CHART_SUBHEAD or CHART_FOOTER. </param>
            <param name="ntitlepos"> The title can be centered with respect to the entire graph area, or the 
            plotting area.  Use one of the title position constants: CENTER_GRAPH or CENTER_PLOT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.Copy(com.quinncurtis.chart2dnet.ChartTitle)">
            <summary>
              Copies the source title object. 
            </summary>
            <param name="source"> The source title object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.Clone">
            <summary>
             Returns an object that is a clone of this ChartTitle object. 
            </summary>
            <returns> Returns a clone of this ChartTitle object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.SetTitleType(System.Int32)">
            <summary>
             Sets the title type. Use one of the title type constants:  CHART_HEADER, CHART_SUBHEAD or CHART_FOOTER. 
            </summary>
            <param name="ntitletype"> Sets the title type: CHART_HEADER, CHART_SUBHEAD or CHART_FOOTER.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.SetTitlePosition(System.Int32)">
            <summary>
             Sets the title position. Use one of the title position constants:  CENTER_GRAPH or CENTER_PLOT. 
            </summary>
            <param name="ntitlepos"> Sets the title type: CENTER_GRAPH or CENTER_PLOT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.GetTitleType">
            <summary>
             This method returns the title type value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.GetTitlePosition">
            <summary>
             This method returns the title position value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.SetTitleOffset(System.Double)">
            <summary>
             Sets the title text offset. The units are device units. 
            </summary>
            <param name="offset"> Sets the title offset.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.GetTitleOffset">
            <summary>
             This method returns the title text offset.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.PositionChartTitle">
            <summary>
             This method positions the title text in the graph window, based on  the title type, position, and offset.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartTitle.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. It positions the text in the graph window,  and calls the underlying 
              ChartText draw rout1ine for rendering. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartTitle.TitleType">
            <summary>
             Set/Get the title type. Use one of the title type constants:  CHART_HEADER, CHART_SUBHEAD or CHART_FOOTER. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartTitle.TitlePosition">
            <summary>
             Set/Get the title position value.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartTitle.TitleOffset">
            <summary>
             Set/Get the title text offset. The units are device units. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartView">
            <summary>
             The ChartView class, derived from the UserControl class, is the window used as the container for all chart objects.
            </summary>
            
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.currentMouseListener">
            <summary>
             Holds an instance of the current mouse listener.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.chartObjectsArrayList">
            <summary>
             A list of chart objects derived from abstract base class GraphObj.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.previousChartObjectsArrayList">
            <summary>
             Save the last list used to update the chart, to compare against the new list for changes.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.viewViewport">
            <summary>
             This rectangle is used as an aid in printing. It defines a viewport within  the current window 
             view. Allows the graph area to be positioned inside  the printable area of a printer device context.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.minimumSize">
            <summary>
             The control minimum size dimension
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.preferredSize">
            <summary>
             The control preferred size dimension
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.zOrderSortEnable">
            <summary>
             Enables the z-order sorting of the objects in the chartObjectsArrayList
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.resizeMultiplier">
            <summary>
             This field tracks any resizes of the control compared to the initial size
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.controlStyle">
            <summary>
             This field specifies the Control Style of the control. Use one of the ControlStyles  constants.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.resizeMode">
            <summary>
             This field specifies the resize mode of the view. Use one of the resize  
             constants: NO_RESIZE_OBJECTS, AUTO_RESIZE_OBJECTS or MANUAL_RESIZE_OBJECTS.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.backgroundDrawEnable">
            <summary>
             This field enable/disables the drawing of the graph background objects  if complex 
             gradient fills slow down printing.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.doubleBufferEnable">
            <summary>
             This field enable/disables the double buffering of the screen output.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.onPainBackgroundEnable">
            <summary>
             This field enable/disables the OnPaintBackground method. Set to true this will cause the 
             entire background to be erased on drawing,  causing flicker.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.renderingMode">
            <summary>
             This field specifies the rendering mode. SCREEN_RENDERING, BUFFERED_IMAGE_RENDERING, PRINTER_RENDERING.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartView.preRenderMode">
            <summary>
             This field specifies the pre-rendering mode. PRE_RENDER_ALL, PRE_RENDER_NONE, PRE_RENDER_AXES, 
             PRE_RENDER_ZORDER_CHANGE.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
             The OnPaint override method renders the current graph in the ChartView window. 
            </summary>
            <param name="pe"> The OnPaint PaintEventArgs objects .</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetMinimumSize">
            <summary>
             Gets the minimum allowable size for the component. 
            </summary>
            <returns> Returns the minimum allowable size for the component.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SetMinimumSize(System.Drawing.Size)">
            <summary>
             Sets the minimum allowable size for the component. 
            </summary>
            <param name="size"> Returns the minimum allowable size for the component.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SetViewport(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             This method defines a viewport within  the current UserControl view. Allows the graph area to be 
             positioned inside the printable area of a printer device context. 
            </summary>
            <param name="x"> The position of the upper left coordinate of the viewport, in device coordinates. </param>
            <param name="y"> The position of the upper left coordinate of the viewport, in device coordinates. </param>
            <param name="w"> The width of the viewport, in window device coordinates. </param>
            <param name="h"> The height of the viewport, in window device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.ResetViewport">
            <summary>
             Sets the value of the current viewport to null.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetViewport">
            <summary>
             This method returns a rectangle containing the current viewport. It returns  null if a viewport 
             has no been established. 
            </summary>
            <returns> Returns a rectangle containing the current viewport.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.#ctor">
            <summary>
              The default ChartView constructor. The default constructor assumes that the license file
              QCLicense.lic.xml (or QCLicenseCF.lic.xml) is located in the Windows/System32 subdirectory.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.#ctor(System.Drawing.Rectangle,System.Windows.Forms.Form)">
            <summary>
              A ChartView constructor. In the case of .Net, the constructor assumes that the license file
              QCLicense.lic.xml (or QCLicenseCF.lic.xml) is located in the Windows/System32 subdirectory. In
              the case of .Net CF, the license file should be compiled into the project as an embedded resource.
            <param name="positionRect"> Specifies the position of ChartView in the parent Form. </param>
            <param name="parent"> The parent form the ChartView is placed in. </param>
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.#ctor(System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
              A ChartView constructor. In the case of .Net, the constructor assumes that the license file
              QCLicense.lic.xml (or QCLicenseCF.lic.xml) is located in the Windows/System32 subdirectory. In
              the case of .Net CF, the license file should be compiled into the project as an embedded resource.
            <param name="positionRect"> Specifies the position of ChartView in the parent Form. </param>
            <param name="parent"> The parent control the ChartView is placed in. </param>
            </summary>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.#ctor(System.Drawing.Rectangle,System.Windows.Forms.Panel)">
            <summary>
              A ChartView constructor. In the case of .Net, the constructor assumes that the license file
              QCLicense.lic.xml (or QCLicenseCF.lic.xml) is located in the Windows/System32 subdirectory. In
              the case of .Net CF, the license file should be compiled into the project as an embedded resource.
            <param name="positionRect"> Specifies the position of ChartView in the parent Form. </param>
            <param name="parent"> The parent panel the ChartView is placed in. </param>
            </summary>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.#ctor(System.Drawing.Rectangle,System.Windows.Forms.TabPage)">
            <summary>
              A ChartView constructor. In the case of .Net, the constructor assumes that the license file
              QCLicense.lic.xml (or QCLicenseCF.lic.xml) is located in the Windows/System32 subdirectory. In
              the case of .Net CF, the license file should be compiled into the project as an embedded resource.
            <param name="positionRect"> Specifies the position of ChartView in the parent Form. </param>
            <param name="parent"> The parent tab page the ChartView is placed in. </param>
            </summary>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.AddChartObject(com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
             This method adds an GraphObj (or any concrete subclass of GraphObj) to the end of the  
             chartObjectsArrayList list. 
            </summary>
            <param name="chartobj"> This object is added to the end of the chartObjectsArrayList list. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.DeleteChartObject(com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
             This method deletes the first instance of an GraphObj (or any concrete subclass of GraphObj)  from 
             chartObjectsArrayList list. 
            </summary>
            <param name="chartobj"> The first instance of this object is deleted to the chartObjectsArrayList list. </param>
            <returns> Returns true if the object is found, and deleted from the list.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.ResetChartObjectList">
            <summary>
             This method empties all of the chart objects out of the display list.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.ResetPreviousChartObjectList">
            <summary>
             This method empties all of the chart objects out of the previous chart object display list.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.CalcResizedWindowFontMultiplier(System.Drawing.Size,System.Drawing.Size)">
            <summary>
             Calculates the value of the resizeMultiplier, based on the  component view resize mode, 
             the preferred size of the component, and the  actual size of the component. 
            </summary>
            <param name="preferreddim"> The preferred size of the component. </param>
            <param name="actualdim"> The actual size of the component. </param>
            <returns> Returns the new value for the resizeMultiplier property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.UpdateDraw">
            <summary>
             This method forces a redraw of the chart view within tm milliseconds.   
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.ClearViewport(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Rectangle2D,System.Drawing.Color)">
            <summary>
              The clear method for this class. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="rect"> The rectangle that gets cleared to the specified color. </param>
            <param name="color"> The color that is used to fill the clear rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SortChartObjectsByZOrder">
            <summary>
             This method sorts the objects in the chartObjectsArrayList array in the ascending value of their z-order.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.DrawObject(System.Drawing.Graphics,com.quinncurtis.chart2dnet.GraphObj,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              A single Graph objects is rendered to the specified graphics context. 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="graphobject1"> The graphics object to be rendered. </param>
            <param name="viewrect"> The viewport the graphics object is rendered in.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetCurrentDay">
            <summary>
              Returns the current day as the number of days since the base date of January 1, 2000. 
            </summary>
            <returns> Returns the current day as the number of days since the base date of January 1, 2000.  </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.IsDLLValid(System.Int32)">
            <summary>
              Returns true if the license for dll referenced by dllnum is valid.
            </summary>
            <param name="dllnum"> The number coordsponding to the a QC .Net DLL. 
             0= QCChart2DNet.Dll, 1= QCRTGraphNet.Dll, 2 = QCSPCChartNet.Dll
            </param>
            <returns> Returns true if the license for dll referenced by dllnum is valid.  </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.IsLicenseValid">
            <summary>
              Checks the license file, first as a resource and then as a file.
            </summary>
            <returns> Returns true if the license file is found and considered valid. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.LoadLicenseFile">
            <summary>
              Load the license file, first as a resource and then as a file.
            </summary>
            <returns> Returns true if the license file is found and considered valid. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.DrawInvalidLicenseMessage(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              Displays the invalid  license message.
            </summary>		
            <param name="g2"> The graphics context.</param>
            <param name="drect"> The drawing rectangle.</param>	 
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.DrawExpireLicenseMessage(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              Displays the expire license message.
            </summary>		
            <param name="g2"> The graphics context.</param>
            <param name="drect"> The drawing rectangle.</param>	    
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.DrawDeveloperMessage(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Rectangle2D,System.String)">
            <summary>
              Displays the license ID as a watermark in the graph window.
            </summary>
            <param name="g2"> The graphics context.</param>
            <param name="drect"> The drawing rectangle.</param>
            <param name="message"> The string displayed in the message.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.DrawLicenseMessages(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              Displays the license ID as a watermark in the graph window.
            </summary>
            <param name="g2"> The graphics context.</param>
            <param name="drect"> The drawing rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.EnabledNoDraw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. Each GraphObj object stored in the  chartObjectsArrayList 
              list is rendered to the specified graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.CheckForZOrderChanges">
            <summary>
              Compares the previous chartObjectsArrayList with the current one, to see if any z-order changes have occurred.
            </summary>
            <returns> Returns true if any object in the chartObjectsArrayList has changed, or if its z-order has changed.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.preRender(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              The draw method for this class. Each GraphObj object stored in the  chartObjectsArrayList list is 
              rendered to the specified graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
            <param name="drect"> The drawing rectangle of the viewport.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.PreDraw(System.Drawing.Graphics)">
            <summary>
              The PreDraw method is called in the ChartView.Draw method BEFORE all objects in the  chartObjectsArrayList list 
              are  rendered to the specified graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.PostDraw(System.Drawing.Graphics)">
            <summary>
              The PostDraw method is called in the ChartView.Draw method AFTER  all objects in the  chartObjectsArrayList list 
              are  rendered to the specified graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. Each GraphObj object stored in the  chartObjectsArrayList list is 
              rendered to the specified graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetChartObjectsArrayList">
            <summary>
             This method returns a reference to the vChartObject vector that holds  all of the GraphObj objects 
             added to the current view.
            </summary>
            <returns> Returns a reference to the vChartObject vector that holds  all of the GraphObj objects 
            added to the current view.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.FindObj(com.quinncurtis.chart2dnet.Point2D,System.String)">
            <summary>
              This method finds the chart object intersecting the test point. 
            </summary>
            <param name="testpoint"> The current position of the mouse in window device coordinates. </param>
            <param name="classname"> The class name of the base class that  is used to filter the desired class 
            objects. The string "ChartPlot" would  cause the rout1ine to return only object derived from the Plot class. </param>
            <returns> If a chart object is found, a reference to that object is  returned. Otherwise null is returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.FindObj(com.quinncurtis.chart2dnet.Point2D,System.String,System.Int32)">
            <summary>
              This method finds the chart object intersecting the test point. 
            </summary>
            <param name="testpoint"> The current position of the mouse in window device coordinates. </param>
            <param name="classname"> The class name of the base class that  is used to filter the desired class objects. 
            The string "ChartPlot" would  cause the rout1ine to return only object derived from the Plot class. </param>
            <param name="nthhit"> Specifies to return the nth object that intersects the test point. A value of 0  
            signifies that the first object found is returned, a value of 1 specifies that the second  item found is 
            returned, and so on. </param>
            <returns> If a chart object is found, a reference to that object is  returned. Otherwise null is returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SetZOrderSortEnable(System.Boolean)">
            <summary>
             Enable/Disables the z-order sorting of the graph objects in the  chartObjectsArrayList array. 
            </summary>
            <param name="enable"> Set to true to enable z-order sorting.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetZOrderSortEnable">
            <summary>
             Returns true if z-order sorting is enabled. 
            </summary>
            <returns> Returns true if z-order sorting is enabled.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SetResizeMultiplier(System.Double)">
            <summary>
             Explicitly sets the resizeMultiplier property. 
            </summary>
            <param name="multiplier"> The resizeMultiplier is set to this value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetResizeMultiplier">
            <summary>
             Returns the resizeMultiplier property. 
            </summary>
            <returns> Returns the resizeMultiplier.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SetControlStyle(System.Windows.Forms.ControlStyles)">
            <summary>
             Sets the Control Style. Use one of the ControlStyles constants. 
            </summary>
            <param name="style"> Sets the Control Style.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetControlStyle">
            <summary>
             Returns the Control Style. 
            </summary>
            <returns> Returns the Control Style.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SetResizeMode(System.Int32)">
            <summary>
             Sets the resize mode. Use one of the resize mode constants:  NO_RESIZE_OBJECTS, AUTO_RESIZE_OBJECTS or 
             MANUAL_RESIZE_OBJECTS. 
            </summary>
            <param name="mode"> Sets the resize mode.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetResizeMode">
            <summary>
             Returns the resize mode. 
            </summary>
            <returns> Returns the resize mode.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SetBackgroundDrawEnable(System.Boolean)">
            <summary>
             Specifies the printer background print mode. 
            </summary>
            <param name="background"> Specifies the printer background print mode.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetBackgroundDrawEnable">
            <summary>
             Returns the printer background print mode. 
            </summary>
            <returns> Returns the printer background print mode.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SetCurrentMouseListener(com.quinncurtis.chart2dnet.MouseListener)">
            <summary>
             Specifies the current mouse listener. 
            </summary>
            <param name="mouselistener"> Specifies the current mouse listener.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetCurrentMouseListener">
            <summary>
             Returns the he current mouse listener. 
            </summary>
            <returns> Returns the current mouse listener.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Override of the OnMouseDown event. 
            </summary>
            <param name="e"> Specifies the MouseEventArgs data. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Override of the OnMouseMove event. 
            </summary>
            <param name="e"> Specifies the MouseEventArgs data. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             Override of the OnMouseUp event. 
            </summary>
            <param name="e"> Specifies the MouseEventArgs data. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.OnClick(System.EventArgs)">
            <summary>
             Override of the OnClick event. 
            </summary>
            <param name="e"> Specifies the MouseEventArgs data. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.OnDoubleClick(System.EventArgs)">
            <summary>
             Override of the OnDoubleClick event. 
            </summary>
            <param name="e"> Specifies the MouseEventArgs data. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.OnLoad(System.EventArgs)">
            <summary>
             Override of the OnLoad event. 
            </summary>
            <param name="e"> Specifies the MouseEventArgs data. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.OnResize(System.EventArgs)">
            <summary>
             Override of the OnResize event. 
            </summary>
            <param name="e"> Specifies the OnResize event data. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
             Override of the SetBoundsCore event. This override seems to set the minimum
             size of the control properly, wherease OnResize would mess up if pushed
             into minimum size limits
            </summary>
            <param name="x"> New x-value. </param>
            <param name="y"> New y-value. </param>
            <param name="width"> New width. </param>
            <param name="height"> New height </param>
            <param name="specified"> A bitwise combination of the BoundsSpecified values. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.SetLicensePath(System.String)">
            <summary>
             Static routine to set the path of the license file.
            </summary>
            <param name="licensepath"> Specifies the path of the license file. Do not end in '/' or '\'.
            Since the routine sets a static value you only have to call it once per application, before
            any calls to a ChartView constructor.
            Example: licensepath = "c:/Windows/System32" </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.GetLicensePath">
            <summary>
             Static routine returns the path of the license file.
            </summary>
            <returns> Returns the path of the license file. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Override of the OnPaintBackground event. 
            </summary>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartView.Copy(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
              Copies the source scale. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.ZOrderSortEnable">
            <summary>
             Enable/Disables the z-order sorting of the graph objects in the  chartObjectsArrayList array. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.ResizeMode">
            <summary>
             Sets the resize mode. Use one of the resize mode constants:  NO_RESIZE_OBJECTS, AUTO_RESIZE_OBJECTS or 
             MANUAL_RESIZE_OBJECTS. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.RenderingMode">
            <summary>
             Sets the rendering mode. SCREEN_RENDERING, BUFFERED_IMAGE_RENDERING, PRINTER_RENDERING.. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.BackgroundDrawEnable">
            <summary>
             Specifies the printer background print mode. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.DoubleBufferEnable">
            <summary>
             Specifies the double buffer of the screen output. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.IsDesignMode">
            <summary>
             Specifies if the current instance is in design mode. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.PreRenderingMode">
            <summary>
             Get/Set the pre-rendering mode. User one of the pre-rendering constants:
              PRE_RENDER_ALL, PRE_RENDER_NONE, PRE_RENDER_AXES, PRE_RENDER_ZORDER_CHANGE.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.PreferredSize">
            <summary>
             Get/Set the preferred size of the control:
              
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.LS">
            <summary>
             Get the the mode.
              
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.DL">
            <summary>
             Get the the mode.
              
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.TextRenderingHint">
            <summary>
             Get/Set the value of the TextRenderingHint used in the ChartView:
              
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartView.SmoothingMode">
            <summary>
             Get/Set the value of the SmoothingMode used in the ChartView:
              
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ChartZoom">
            <summary>
              This class implements a chart zoom class based on the MouseListener class. The mouse is used to  
              define a zoom rectangle within one or more PhysicalCoordinates objects,  and the 
              PhysicalCoordinates objects are re-scaled to match the extents of  the zoom rectangle.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.MouseListener">
            <summary>
             The MouseListener class implements a generic class for managing  mouse events in a 
             graph window. 
             The MouseListener is the base class  for the MoveObj class.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MouseListener.cursorDevLocation">
            <summary>
             Specifies the current position of the cursor in device coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MouseListener.cursorPhysLocation">
            <summary>
             Specifies the current position of the cursor in physical coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MouseListener.lastPhysLocation">
            <summary>
             Specifies the previous position of the cursor in physical coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MouseListener.tempGraphics">
            <summary>
             Holds a reference to a temporary graphics context used while a marker is being move.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MouseListener.objActive">
            <summary>
             Specifies that a move is current active.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MouseListener.buttonMask">
            <summary>
             Specifies the mouse button that is trapped to invoke a move.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MouseListener.enabled">
            <summary>
             A flag signifying that the mouse listener is enabled
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.#ctor">
            <summary>
              The default MouseListener constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.InitDefaults">
            <summary>
              Initializes default values.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.#ctor(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
              This method initializes an MouseListener using the specified component. 
            </summary>
            <param name="component"> The ChartView object that this mouse listener is placed in. This  object 
            serves as the component that the mouse listener is added to.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.ErrorCheck(System.Int32)">
            <summary>
              Checks the current marker object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.Copy(com.quinncurtis.chart2dnet.MouseListener)">
            <summary>
              Copies the source MouseListener. 
            </summary>
            <param name="source"> The source MouseListener object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.SetEnable(System.Boolean)">
            <summary>
             Once the MouseListener object is created and installed using the addChartMouseListener method,  
             it can be turned on/off using this method. 
            </summary>
            <param name="on"> True turns the mouse listener on.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.GetEnable">
            <summary>
             Returns True if the mouse listener is on. 
            </summary>
            <returns> Returns True if the mouse listener is on.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
             The dummy OnMouseMove event method for this object. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
             The dummy OnMouseDown event method for this object. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
             The dummy OnMouseUp event method for this object. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.OnClick(System.EventArgs)">
            <summary>
             The dummy OnClick event method for this object. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.OnDoubleClick(System.EventArgs)">
            <summary>
             The dummy OnDoubleClick event method for this object. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.SetButtonMask(System.Windows.Forms.MouseButtons)">
            <summary>
              Sets the mouse button that is associated with moving objects. 
            </summary>
            <param name="buttonmask"> The mouse button that is to be associated with moving objects.  
            Use one of the MouseEventArgs button constants: MouseEventArgs.BUTTON1_MASK,  
            MouseEventArgs.BUTTON2_MASK, MouseEventArgs.BUTTON3_MASK.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.GetButtonMask">
            <summary>
              Returns the mouse button that is associated with moving objects. 
            </summary>
            <returns> Returns the mouse button that is associated with moving objects.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. Always returns false for zoom objects. 
            </summary>
            <param name="testpoint"> The test point. </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MouseListener.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. It is called to draw the zoom rectangle while  the mouse 
              button is held down and the mouse dragged. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.MouseListener.ButtonMask">
            <summary>
              Set/Get the mouse button that is associated with moving objects. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.MouseListener.ObjEnable">
            <summary>
              Set/Get the mouse listener enabled flag. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.MouseListener.TempGraphics">
            <summary>
             Holds a reference to a temporary graphics context used while a marker is being move.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomMinLocation">
            <summary>
             The final minimum x and y values of the zoom rectangle in physical coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomMaxLocation">
            <summary>
             The final maximum x and y values of the zoom rectangle in physical coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomCurrentLocation">
            <summary>
            The current location, in window device coordinates, of the mouse cursor while the mouse is dragged.
            </summary> 
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomDevLocation">
            <summary> 
            The new location, in window device coordinates, of the mouse cursor while the mouse is dragged.
            </summary> 
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.PrevDevLocation">
            <summary> 
            The previous location, in window device coordinates, of the mouse cursor while the mouse is dragged.
            </summary> 
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomDevStartLoc">
            <summary>
             The starting x and y values of the zoom rectangle in window device coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomDevEndLoc">
            <summary>
             The ending x and y values of the zoom rectangle in window device coordinates
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.superZoomScales">
            <summary>
             A ArrayList of PhysicalCoordinates objects, used to store all of the scales  associated 
             simple and super zoom operations.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.initialZoomCoordinates">
            <summary>
             The ChartView that holds the zoomed chart.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.numberSuperZoomScales">
            <summary>
             The number of PhysicalCoordinates objects associated with a super zoom operation.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.superZoomFlag">
            <summary>
             True signifies that the super zoom mode is in effect.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.rescaleFlag">
            <summary>
             True signifies that the chartObjScale object(simple zoom operation) or  the superZoomScales objects 
             (super zoom operation) should be re-scaled  using the results of the zoom operation.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomXEnable">
            <summary>
             True signifies that the x dimension should be zoomed.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomYEnable">
            <summary>
             True signifies that the y dimension should be zoomed.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomXRoundMode">
            <summary>
             This field specifies the rounding mode used to round the x dimension of PhysicalCoordinates objects  
             to the values of the zoom rectangle. Use one of the auto axis rounding constants:  AUTOAXES_NEAR, 
             AUTOAXES_FAR, or AUTOAXES_EXACT.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomYRoundMode">
            <summary>
             This field specifies the rounding mode used to round the y dimension of PhysicalCoordinates objects  to 
             the values of the zoom rectangle. Use one of the auto axis rounding constants:  AUTOAXES_NEAR, 
             AUTOAXES_FAR, or AUTOAXES_EXACT.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomStack">
            <summary>
             The zoom stack stores the previous coordinate system, each time the chart is  zoomed. The coordinate 
             systems can be pop'ed from the stack to re-establish  a previous coordinate system.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomStackEnable">
            <summary>
             This property enables/disables the zoom stack
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomRangeLimits">
            <summary>
             Specifies the absolute value of the zoom range limits.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomRangeLimitsRatio">
            <summary>
             Specifies the zoom range limits as a ratio of the initial chart scaling.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ChartZoom.zoomObjActive">
            <summary>
             Specifies the zoom rectangle is currently in draw mode.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.#ctor">
            <summary>
              The default ChartZoom constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.ErrorCheck(System.Int32)">
            <summary>
              Checks the zoom object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.Copy(com.quinncurtis.chart2dnet.ChartZoom)">
            <summary>
              Copies the source zoom object. 
            </summary>
            <param name="source"> The source zoom object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.Clone">
            <summary>
             Returns an object that is a clone of this ChartZoom object. 
            </summary>
            <returns> Returns a clone of this ChartZoom object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.InitZoomDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.CalcZoomRangeLimits(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             Calculate the zoom range limits using the zoomRangeLimitsRatio property. 
            </summary>
            <param name="chartscale"> The original scale of the zoom objects. </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.PushChartScale(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             Push the current coordinate system onto the zoom stack. 
            </summary>
            <param name="chartscale"> The scale object to push onto the zoom stack. </param>
            <returns> Returns the current number of scales in the zoom stack.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.PushSuperZoomStack">
            <summary>
             Push one set of super zoom coordinate systems onto the zoom stack.
            </summary>
            <returns> Returns the current number of scales in the zoom stack.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.PushSimpleZoomStack">
            <summary>
             Push the current coordinate system onto the zoom stack.  Used with simple zooming. 
            </summary>
            <returns> Returns the current number of scales in the zoom stack.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.PushZoomStack">
            <summary>
             Push a set of coordinate systems onto the zoom stack. Handles both simple and super zooming. 
            </summary>
            <returns> Returns the current number of scales in the zoom stack.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.PopSimpleZoomStack">
            <summary>
             Pop a coordinate system  from the zoom stack and initialize the current scale  with these values, 
             and re-scale the associated axes to match.  Used with simple zooming. 
            </summary>
            <returns> Returns the current number of scales in the zoom stack.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.PopSuperZoomStack">
            <summary>
             Pop one set of super zoom coordinate systems from  the zoom stack and initialize the super zoom scales  
             with these values, and re-scale the associated axes to match. 
            </summary>
            <returns> Returns the current number of scales in the zoom stack.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.PopZoomStack">
            <summary>
             Pop a set of zoom coordinate systems  from the zoom stack and initialize the current scale  
             with these value, and re-scale the associated axes to match. 
            </summary>
            <returns> Returns the current number of levels in the zoom stack.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.InitSimpleZoom(com.quinncurtis.chart2dnet.ChartView,com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Boolean)">
            <summary>
              This methods initializes a ChartZoom object using the specified  component and scale. Since 
              only one PhysicalCoordinates object is specified this  constructor implements simple zooming. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="transform"> The PhysicalCoordinates object associated with the scale being zoomed. </param>
            <param name="brescale"> True designates that the scale should be re-scaled, once  the final zoom 
            rectangle is ascertained.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.#ctor(com.quinncurtis.chart2dnet.ChartView,com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Boolean)">
            <summary>
              This constructor creates a new ChartZoom object using the specified  component and scale. Since 
              only one PhysicalCoordinates object is specified this  constructor implements simple zooming. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="transform"> The PhysicalCoordinates object associated with the scale being zoomed. </param>
            <param name="brescale"> True designates that the scale should be re-scaled, once  the final zoom rectangle 
            is ascertained.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.InitSuperZoom(com.quinncurtis.chart2dnet.ChartView,com.quinncurtis.chart2dnet.PhysicalCoordinates[],System.Boolean)">
            <summary>
              This method initializes an ChartZoom object using the specified  component and scales. Since an 
              array of PhysicalCoordinates objects are specified this  constructor implements super zooming. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="transforms"> An array of the PhysicalCoordinates objects associated with the zoom operation. </param>
            <param name="brescale"> True designates that the all of the scales should be re-scaled, once  the final 
            zoom rectangle is ascertained.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.#ctor(com.quinncurtis.chart2dnet.ChartView,com.quinncurtis.chart2dnet.PhysicalCoordinates[],System.Boolean)">
            <summary>
              This constructor creates a new ChartZoom object using the specified  component and scales. 
              Since an array of PhysicalCoordinates objects are specified this  constructor implements super zooming. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="transforms"> An array of the PhysicalCoordinates objects associated with the zoom operation. </param>
            <param name="brescale"> True designates that the all of the scales should be re-scaled, once  the final 
            zoom rectangle is ascertained.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseDragged event listener for this object. It causes the current  zoom rectangle object to 
              track the mouse cursor. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mousePressed event listener for this object. Once the specified mouse  button is pressed, the 
              zoom rectangle starts tracking the mouse cursor. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.RescaleAxesToTransform(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             This method re-scales the axes associated with an PhysicalCoordinates object to  the minimum and 
             maximum values of that PhysicalCoordinates object. 
            </summary>
            <param name="transform"> The PhysicalCoordinates object associated with the axes to be re-scaled.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.SaveAxesIntercepts(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             This method saves the normalized intercepts of the axes associated with an PhysicalCoordinates object. 
            </summary>
            <param name="transform"> The normalized intercepts of all axes associated with the PhysicalCoordinates object  
            are saved in order to restore them after the axes are re-scaled.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.ProcessSimpleZoom">
            <summary>
             This method applies the minimum and maximum values of the final zoom rectangle  to the current scale, 
             re-scales the axes and redraws the chart to reflect  the changes.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.ProcessSuperZoom">
            <summary>
             This method applies the minimum and maximum values of the final zoom rectangle  to all of the scales 
             in the superZoomScales, re-scales each axis associated  with each scale, and redraws the chart to 
             reflect the changes.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.OnClick(System.EventArgs)">
            <summary>
              The OnClick event listener for this object. Once the specified mouse  button is pressed, then released, 
              the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.OnDoubleClick(System.EventArgs)">
            <summary>
              The OnDoubleClick event listener for this object. Once the specified mouse  button is pressed, 
              then released, the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseReleased event listener for this object. Once the specified mouse  button is pressed, 
              then released, the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.SetPhysZoomLocations">
            <summary>
             This method, used in the simple zooming mode, calculates the minimum and  maximum physical coordinates 
             associated with the final zoom rectangle.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.SetPhysSuperZoomLocations(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             This method, used in the super zooming mode, calculates the minimum and  maximum physical coordinates 
             associated with the final zoom rectangle.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.GetZoomMin(System.Int32)">
            <summary>
             This method returns the final zoom rectangle minimum values using the  coordinate system specified by nmode. 
            </summary>
            <param name="nmode"> The coordinate system of the returned values. Use one of the  coordinate system 
            constants: DEV_POS, PHYS_POS, NORM_GRAPH_POS, NORM_PLOT_POS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.GetZoomMax(System.Int32)">
            <summary>
             This method returns the final zoom rectangle maximum values using the  coordinate system specified by nmode. 
            </summary>
            <param name="nmode"> The coordinate system of the returned values. Use one of the  coordinate system 
            constants: DEV_POS, PHYS_POS, NORM_GRAPH_POS, NORM_PLOT_POS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. It is called to draw the zoom rectangle while  the mouse button is 
              held down and the mouse dragged. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.SetZoomXEnable(System.Boolean)">
            <summary>
             True signifies that the x dimension is affected by the zoom operation. 
            </summary>
            <param name="bzoomx"> True signifies that the x dimension is affected by the zoom operation.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.SetZoomYEnable(System.Boolean)">
            <summary>
             True signifies that the y dimension is affected by the zoom operation. 
            </summary>
            <param name="bzoomy"> True signifies that the y dimension is affected by the zoom operation.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.GetZoomXEnable">
            <summary>
             Returns true if the x dimension is affected by the zoom operation. 
            </summary>
            <returns> True signifies that the x dimension is affected by the zoom operation.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.GetZoomYEnable">
            <summary>
             Returns true if the y dimension is affected by the zoom operation. 
            </summary>
            <returns> True signifies that the y dimension is affected by the zoom operation.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.SetZoomXRoundMode(System.Int32)">
            <summary>
             Sets the zoom rounding mode for x dimension. 
            </summary>
            <param name="nzoomx"> Sets the zoom rounding mode for x dimension. Use one of  the auto axis rounding 
            constants: AUTOAXES_NEAR, AUTOAXES_FAR, or AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.SetZoomYRoundMode(System.Int32)">
            <summary>
             Sets the zoom rounding mode for y dimension. 
            </summary>
            <param name="nzoomy"> Sets the zoom rounding mode for y dimension. Use one of  the auto axis 
            rounding constants: AUTOAXES_NEAR, AUTOAXES_FAR, or AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.GetZoomXRoundMode">
            <summary>
             Returns the zoom rounding mode for x dimension. 
            </summary>
            <returns> Returns the zoom rounding mode for x dimension.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.GetZoomYRoundMode">
            <summary>
             Returns the zoom rounding mode for y dimension. 
            </summary>
            <returns> Returns the zoom rounding mode for y dimension.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.SetZoomStackEnable(System.Boolean)">
            <summary>
             Turns on/off the zoom stack. 
            </summary>
            <param name="on"> True turns on the zoom stack.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.GetZoomStackEnable">
            <summary>
             Returns True if the zoom stack is on. 
            </summary>
            <returns> Returns True if the zoom stack is on.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.GetZoomRangeLimits">
            <summary>
             This method returns the zoom range limits placed on the zoom operation. Unless  explicitly set, 
             these values are set to 1/1000 of the initial x and y scale range. 
            </summary>
            <returns> Returns the zoom range limits.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.SetZoomRangeLimits(com.quinncurtis.chart2dnet.Dimension)">
            <summary>
             This method sets the zoom range limits placed on the zoom operation. Unless  explicitly set, 
             these values are set to 1/1000 of the initial x and y scale range. 
            </summary>
            <param name="limits"> Sets the zoom range limits.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.GetZoomRangeLimitsRatio">
            <summary>
             This method returns the zoom range limits ratio placed on the zoom operation. Unless  explicitly set, 
             these values are set to 0.001. 
            </summary>
            <returns> Returns the zoom range limits.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ChartZoom.SetZoomRangeLimitsRatio(com.quinncurtis.chart2dnet.Dimension)">
            <summary>
             This method sets the zoom range limits placed on the zoom operation. Unless  explicitly set, 
             these values are set to 0.001. 
            </summary>
            <param name="ratio"> Sets the zoom range limits as a ratio of the inital chart scale.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartZoom.ZoomXEnable">
            <summary>
             True signifies that the x dimension is affected by the zoom operation. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartZoom.ZoomYEnable">
            <summary>
             True signifies that the y dimension is affected by the zoom operation. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartZoom.ZoomXRoundMode">
            <summary>
             Sets the zoom rounding mode for x dimension. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartZoom.ZoomYRoundMode">
            <summary>
             Sets the zoom rounding mode for y dimension. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartZoom.ZoomStackEnable">
            <summary>
             Turns on/off the zoom stack. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ChartZoom.ZoomObjActive">
            <summary>
             Returns True if a zoom operation underway. In multi-threaded applications useful to avoid 
             updates from other threads. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ContourDataset">
            <summary>
              The ContourDataset class extends the SimpleDataset class, adding  a third dimension (z-values) 
              needed to produce a contour plot.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.SimpleDataset">
            <summary>
              A simple dataset class  encapsulates x- and y-data values that are to be used  as source of chart 
              information. Copies of the original data  arrays are stored. The original source data can be deleted 
              once  the dataset is created. If you want to make any changes to the data,  you must change the data 
              in the dataset, not the original source data.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimpleDataset.yData">
            <summary>
             A 1-D array, size numberDatapoints, of double that holds the y-values for a simple data set.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimpleDataset.columnName">
            <summary>
             The column name.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.ErrorCheck(System.Int32)">
            <summary>
              Checks the simple dataset object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.InitDatasetBase(System.String,System.Int32)">
            <summary>
              an SimpleDataset initialization method that initializes the name, x- and y-data arrays  of a simple dataset. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="n"> Specifies the number of xy data point pairs in x and y. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.InitializeData(System.Double[],System.Double[])">
            <summary>
              A SimpleDataset initialization method that initializes the x- and y-data values  of a simple dataset. 
            </summary>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.InitDataset(System.String,System.Double[],System.Double[])">
            <summary>
              an SimpleDataset initialization method that initializes the name, x- and y-data values  of a simple dataset. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.InitDataset(System.String,System.Double[],System.Double[],System.Int32)">
            <summary>
              an SimpleDataset initialization method that initializes the name, x- and y-data values  of a simple dataset. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array the y-values of a dataset. </param>
            <param name="n"> Number of datapointst. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.CalcMovingAverage(com.quinncurtis.chart2dnet.DoubleArray,com.quinncurtis.chart2dnet.DoubleArray,System.Int32,System.Int32)">
            <summary>
             Converts the source array of double values to a moving average and returns the  result in the dest array. 
            </summary>
            <param name="dest"> The destination array that the moving average is returned in.  It must already 
            have been allocated. </param>
            <param name="source"> The source array that holds the raw data for the moving data. </param>
            <param name="numsource"> The number of data points in the dest and source arrays. </param>
            <param name="averagepoints"> The length of the moving average window.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.ShiftArray(com.quinncurtis.chart2dnet.DoubleArray,com.quinncurtis.chart2dnet.DoubleArray,System.Int32,System.Int32)">
            <summary>
             Shifts the data values of the source shiftpoints elements and returns the result  in the destination array. 
            </summary>
            <param name="dest"> An destination array that the shifted data is returned in.  It must already have 
            been allocated. </param>
            <param name="source"> The source array that holds the raw data. </param>
            <param name="numsource"> The number of data points in the dest and source arrays. </param>
            <param name="shiftpoints">Shift the data this amount.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.ConvertToMovingAverage(System.Int32,System.Int32)">
            <summary>
             Converts the current dataset to a moving average version of its former self.  The new number of 
             datapoints is equal to (old number of data points -  averagepoints + 1). 
            </summary>
            <param name="averagepoints"> The length of the moving average window. </param>
            <param name="convertMode"> The moving average can be carried out using the x-values,  the y-values or 
            both x- and y-values. Use one the moving average constants:  MOVING_AVERAGE_X, MOVING_AVERAGE_Y, or 
            MOVING_AVERAGE_XY.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.Copy(com.quinncurtis.chart2dnet.SimpleDataset)">
            <summary>
              Copies the source dataset. 
            </summary>
            <param name="source"> The source dataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.Clone">
            <summary>
             Returns an object that is a clone of this SimpleDataset object. 
            </summary>
            <returns> Returns a clone of this SimpleDataset object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.#ctor(System.String,System.Double[],System.Double[])">
            <summary>
              This constructor creates a new, simple SimpleDataset object initializing each value with the values 
              of the source x- and y- arrays. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.#ctor(System.String,System.Double[],System.Double[],System.Boolean[])">
            <summary>
              This constructor creates a new, simple SimpleDataset object initializing each value with the values 
              of the source x- and y- arrays. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
            <param name="valid"> An array that specifies the valid values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.#ctor(System.String,System.Double[],System.Double[],System.Boolean[],System.Int32)">
            <summary>
              This constructor creates a new, simple SimpleDataset object initializing each value with the values 
              of the source x- and y- arrays. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
            <param name="valid"> An array that specifies the valid values of a dataset. </param>
            <param name="n"> Specifies the number of data points to use out of the x, y and valid arrays. This 
            value must be less than equal to x.Length. </param>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.#ctor(System.String,System.Int32)">
            <summary>
              This constructor creates a new, simple SimpleDataset object.  The data values of the dataset initially 
              set to 0.0. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="n"> Specifies the number of xy data point pairs in x and y.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.#ctor(com.quinncurtis.chart2dnet.CSV,System.String,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new SimpleDataset object from a file consisting of comma separated values.  
              The CSV object can be used to specify the orientation of the x and y  data arrays in the source *.CSV file. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file. </param>
            <param name="rowskip"> Skip this many rows before starting the read operation. </param>
            <param name="columnskip"> For each row of data, skip this many columns before reading the first value 
            from the row. </param>
            <see cref="T:com.quinncurtis.chart2dnet.CSV"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.#ctor">
            <summary>
             The default SimpleDataset constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetFirstValidIndex">
            <summary>
              This method returns the index of the first valid data point in a simple dataset. 
            </summary>
            <returns> Returns the index of the first valid data point in a simple dataset. If  the value of the returned 
            index is outside of the range 0 to numberDatapoints-1, the  dataset has no valid data points.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.AutoCompressDataset(com.quinncurtis.chart2dnet.SimpleDataset,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              This method returns a compressed dataset maps the display dataset close to that of
              the display screen. 
            </summary>
            <param name="dataset"> The source dataset.</param>
            <param name="compressmodex"> The compression type for the x-values. Use one of the data compression type 
            constants:  DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no 
            compression),  DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  
            (use the average x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and 
            y-value in each interval), DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), 
            and DATACOMPRESS_MINMAX (use the minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX 
            compression type is best used when the compressed data values number more than  1000, where adjacent 
            data values in the rendered chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  
            compression type will guarantee that the chart displays the same minimums and maximums as the original dataset. </param>
            <param name="compressmodey"> The compression type for the y-values. Use one of the he data compression 
            type constants. </param>
            <param name="trigger"> Compression will occur if the number of datapoints exceeds this value.</param>
            <param name="divisor"> The approximate divisor you want to reduce the dataset by. </param>
            <returns> Returns the compressed dataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetFastClipDataset(System.String,com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Int32@)">
            <summary>
              This method returns a truncated dataset that only includes the datapoints within the current scaling 
              limits, assuming the the data is monotonic in the x or y direction. 
            </summary>
            <param name="s"> A string specifying the new name of the dataset. </param>
            <param name="transform"> The transform that the dataset is clipped against.</param>
            <param name="fastclipmode"> Specifies if the data is clipped against the x-coordinate (FASTCLIP_X, 
            FASTCLIP_Y). </param> )
            <param name="fastclipoffset"> Returns the start offset of the fast clip data.</param>
            <returns> Returns the truncated dataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetDatasetMin(System.Int32)">
            <summary>
              This method returns the minimum value for either the xData or yData  arrays. If the x-values use 
              ChartCalendar dates, the equivalent of the date  in seconds is returned. 
            </summary>
            <param name="naxis"> Specifies which data array to return the minimum value from. UseX_AXIS  for the 
            xData array, andY_AXIS for yData array. </param>
            <returns> Returns the minimum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetDatasetMax(System.Int32)">
            <summary>
              This method returns the maximum value for either the xData or yData  arrays. If the x-values use 
              ChartCalendar dates, the equivalent of the date  in seconds is returned. 
            </summary>
            <param name="naxis"> Specifies which data array to return the maximum value from. UseX_AXIS  for the 
            xData array, andY_AXIS for yData array. </param>
            <returns> Returns the maximum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetYData">
            <summary>
              This method returns a reference to the yData array, the array of y-values  for simple datasets. 
            </summary>
            <returns> Returns a reference to the yData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetYDataObj">
            <summary>
              This method returns a reference to the internal DoubleArray object used to store the y-data values. 
            </summary>
            <returns> Returns a reference to the internal DoubleArray object used to store the y-data values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.SetYData(System.Double[])">
            <summary>
              This method sets the values of the yData array, the array of y-values  for simple and group datasets.   
            </summary>
            <param name="yvalues"> the new y-values. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.SetYData(com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
              This method sets the values of the yData array, the array of y-values  for simple and group datasets.   
            </summary>
            <param name="yvalues"> the new y-values. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetNumberGroups">
            <summary>
              This method returns the value of the nNumGroups field which is number of  groups in a group dataset. 
            </summary>
            <returns> Returns the value of the nNumGroups field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.SetDataPoint(System.Int32,System.Double,System.Double)">
            <summary>
              Sets the x- and y-values for a data point in a simple dataset. 
            </summary>
            <param name="index"> Specifies the index for the new data values.</param>
            <param name="x"> Specifies the new x-value for the data point at the specified index. </param>
            <param name="y"> Specifies the new y-value for the data point at the specified index. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.AddDataPoint(System.Double,System.Double)">
            <summary>
              This method adds a new xy point to a dataset, increasing its size by one. 
            </summary>
            <param name="x"> Specifies the new x-value for the data point to append to the end of the dataset. </param>
            <param name="y"> Specifies the new y-value for the data point to append to the end of the dataset.</param>
            <returns> Returns the new number of datapoints .</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.AddDataPoint(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              This method adds a new xy point to a dataset, increasing its size by one. 
            </summary>
            <param name="p"> Specifies the new data point to append to the end of the dataset.</param>
            <returns> Returns the new number of datapoints .</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.ResetBuffer">
            <summary>
              This method resets the buffer back to its original state.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.Resize(System.Int32)">
            <summary>
              Resizes the dataset, maintaining the original data. If the new dataset is  larger the dataset is 
              padded with zeros. If the new dataset is smaller  the original data is truncated to the new size. 
            </summary>
            <param name="n"> The new size of the dataset.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.InsertDataPoint(com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
              Insert a data point at the specified location, increasing the size of the dataset by one. 
            </summary>
            <param name="p"> The new data point to insert. </param>
            <param name="insertpoint"> The insertion point of the data. Zero based array indexing  is used, so the 
            5th data point in the array has an index value of 4.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.InsertDataPoint(System.Double,System.Double,System.Int32)">
            <summary>
              Insert a data point at the specified location, increasing the size of the dataset by one. 
            </summary>
            <param name="xvalue"> The x-value of the point to insert. </param>
            <param name="yvalue"> The y-value of the point to insert </param>
            <param name="insertpoint"> The insertion point of the data. Zero based array indexing  is used, so the 
            5th data point in the array has an index value of 4.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.DeleteDataPoint(System.Int32)">
            <summary>
              Deletes a data point at the specified location, decreasing the size of the dataset by one. 
            </summary>
            <param name="deletepoint"> The delete point. Zero based array indexing  is used, so the 5th data point 
            in the array has an index value of 4.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.SetDataPoint(System.Int32,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              Sets the x- and y-values for a data point in a simple dataset. 
            </summary>
            <param name="index"> Specifies the index for the new data values.</param>
            <param name="p"> Specifies the new x- and y-values for the data point at the specified index. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetDataPoint(System.Int32)">
            <summary>
              This method returns the x- and y-value of a point at the specified index. 
            </summary>
            <param name="index"> Specifies the index of the data point. </param>
            <returns> Returns a Point2D object that contains the x- and y-values of the  data point at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.SetYDataValue(System.Int32,System.Double)">
            <summary>
              Sets the y-value in a simple dataset. 
            </summary>
            <param name="y"> Specifies the new y-value for the data point at the specified index. </param>
            <param name="index"> Specifies the index for the new data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetYDataValue(System.Int32)">
            <summary>
              This method returns the y-value in a simple dataset. 
            </summary>
            <param name="index"> Specifies the index of the y-value values. </param>
            <returns> Returns the y-value for the data point at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.SetYDataValue(System.Int32,System.Int32,System.Double)">
            <summary>
              This method resolves the generalized setYDataValue method int the abstract ChartDataset class. 
            </summary>
            <param name="y"> Specifies the new y-value for the data point at the specified index and group. </param>
            <param name="group"> Specifies the group for the new data value.</param>
            <param name="index"> Specifies the index for the new data value. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetYDataValue(System.Int32,System.Int32)">
            <summary>
              This method resolves the generalized getYDataValue method int the abstract ChartDataset class. 
            </summary>
            <param name="group"> Specifies the group of the y-value. </param>
            <param name="index"> Specifies the index of the y-value. </param>
            <returns> Returns the y-value of the data point at the specified index and group.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.IsDataPointGood(System.Int32)">
            <summary>
              This method checks if the point at the specified index for a simple  dataset is valid. 
            </summary>
            <param name="index"> Specifies the index to check in the xData and yData arrays. </param>
            <returns> Returns true if the data point is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.CalcNearestPoint(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against all of the xy points  in a simple dataset and calculates 
              which point in the dataset  is nearest the test point. The nearness test has many  different forms: 
              FNP_X = nearest x, FNP_Y = nearest y,  FNP_DIST = shortest distance, FNP_NORMX = nearest normalized x,  
              FNP_NORMY = nearest normalized y, FNP_NORMDIST = shortest normalized distance. 
            </summary>
            <param name="transform"> The coordinate system of the test point. </param>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetSumY">
            <summary>
              Returns the sum of the y-values in the dataset. 
            </summary>
            <returns> Returns the sum of the y-values in the dataset. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetAverageY">
            <summary>
             Returns the average of the y-values in the dataset. 
            </summary>
            <returns> Returns the average of the y-values in the dataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.CombineDataset(com.quinncurtis.chart2dnet.SimpleDataset,System.Int32,System.Int32)">
            <summary>
             Combine this dataset with another, using one of three combine modes  (COMBINE_DATASET_X, COMBINE_DATASET_Y, 
             or COMBINE_DATASET_XY), and  four combine operators (COMBINE_DATASET_ADD, COMBINE_DATASET_SUBTRACT,  
             COMBINE_DATASET_MUTLIPLY or COMBINE_DATASET_DIVIDE). The datasets are  combined element by element. 
            </summary>
            <param name="source"> The the data elements of the source datasets are combined  with the current dataset, 
            element by element, using the combine operator. </param>
            <param name="combinecoord"> Specifies which coordinates of the two datasets are combined.  Use one of the 
            dataset combine mode constants: COMBINE_DATASET_X, COMBINE_DATASET_Y,  or COMBINE_DATASET_XY. </param>
            <param name="op"> Specifies how each element of the two datasets are combined.  Use one of the dataset 
            combine operator constants: COMBINE_DATASET_ADD, COMBINE_DATASET_SUBTRACT,  COMBINE_DATASET_MUTLIPLY or 
            COMBINE_DATASET_DIVIDE. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetGroupDatasetSumMax(System.Int32)">
            <summary>
              This method returns the maximum value for either the xData array, or the  maximum of the sum across groups 
              for each index of the yGroupData array.  If the x-values use ChartCalendar dates, the equivalent of the 
              date  in seconds is returned. This method is used by the auto-scale routines to  determine the maximum 
              scale value for "stacked" graphs that use group data. 
            </summary>
            <param name="naxis"> Specifies which data array to return the maximum value from. UseX_AXIS  for the 
            xData array, andY_AXIS for the yGroupData array. </param>
            <returns> Returns the maximum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.GetGroupDatasetSumMin(System.Int32)">
            <summary>
              This method returns the minimum value for either the xData array, or the  minimum of value in group 
              #0 of the yGroupData array.  If the x-values use ChartCalendar dates, the equivalent of the date  
              in seconds is returned. This method is used by the auto-scale routines to  determine the minimum 
              scale value for "stacked" graphs that use group data. 
            </summary>
            <param name="naxis"> Specifies which data array to return the minimum value from. UseX_AXIS  for the 
            xData array, andY_AXIS for the yGroupData array. </param>
            <returns> Returns the minimum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.SortByX(System.Boolean)">
            <summary>
             Sorts the array elements of the dataset using the values of the  xData array as the sort key. 
            </summary>
            <param name="ascending"> Specify true to sort the dataset array elements so that the  values of the 
            xData array start at the minimum value and end at the  maximum value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.CheckValidDataX(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32)">
            <summary>
              This method checks to see if the x-data value is valid, taking into  account any discontinuities 
              in the coordinate system. For example,  an TimeScale can be discontinue WEEK_5D mode, 
              or when it has  an hour range that is not the standard 24-hour day.  Any data value in one of the 
              discontinuities is considered invalid. 
            </summary>
            <param name="transform"> Specifies the coordinate system being used to plot the data. </param>
            <param name="index"> Specifies the index to check in the xData array. </param>
            <returns> Returns true if the x-data value is considered valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.CheckValidDataY(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32)">
            <summary>
              This method checks to see if the y-data value is valid, taking into  account any discontinuities 
              in the coordinate system. For example,  an TimeScale can be discontinue WEEK_5D mode, 
              or when it has  an hour range that is not the standard 24-hour day.  Any data value in one of the 
              discontinuities is considered invalid. 
            </summary>
            <param name="transform"> Specifies the coordinate system being used to plot the data. </param>
            <param name="index"> Specifies the index to check in the yData array. </param>
            <returns> Returns true if the y-data value is considered valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.CheckValidData(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32)">
            <summary>
              This method checks to see if the x- and y-data values for a given index are valid,  taking into 
              account any discontinuities in the coordinate system. For example,  an TimeScale can be discontinue 
              WEEK_5D mode, or when it has  an hour range that is not the standard 24-hour day.  If the x-value,
               or any of the y-values at a given index are invalid,  the method returns false. 
            </summary>
            <param name="transform"> Specifies the coordinate system being used to plot the data. </param>
            <param name="index"> Specifies the index to check in the group data arrays. </param>
            <returns> Returns true only if the x- and y-values for a given index are true.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.WriteSimpleDataset(com.quinncurtis.chart2dnet.CSV,System.String)">
            <summary>
              This methods will create a text file and output the dataset to that  file in a CSV (Comma Separated Value) 
              format. A CSV file can be read  by popular spreadsheet and word processing programs. Some localization  
              for different operating systems and locales can be handled by the  modifying the default csv (CSV) object.  
              The file can be organized so that  the columns represent groups and the rows represent data values for  
              each group (COLUMN_MAJOR), or the where the rows represent groups  and the columns represent data values 
              for each group (ROW_MAJOR).  Use the CSV.SetOrientation method to initialize the csv argument  for the 
              proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.WriteSimpleDataset(com.quinncurtis.chart2dnet.CSV,System.String,System.Boolean)">
            <summary>
              This methods will create a text file and output the dataset to that  file in a CSV (Comma Separated Value) 
              format. A CSV file can be read  by popular spreadsheet and word processing programs. Some localization  
              for different operating systems and locales can be handled by the  modifying the default csv (CSV) 
              object.  The file can be organized so that  the columns represent groups and the rows represent data 
              values for  each group (COLUMN_MAJOR), or the where the rows represent groups  and the columns 
              represent data values for each group (ROW_MAJOR).  Use the CSV.SetOrientation method to initialize 
              the csv argument  for the proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file.</param>
            <param name="append"> True and if the file exists, data is appended to the file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.ReadSimpleDataset(com.quinncurtis.chart2dnet.CSV,System.String,System.Int32,System.Int32)">
            <summary>
              This methods will open a text file and read the CSV (Comma Separated Value) formatted  data values 
              in that file. A CSV file can be created  by popular spreadsheet and word processing programs. Some 
              localization  for different operating systems and locales can be handled by the  modifying the default 
              csv (CSV) object.  The file can be organized so that  the columns represent groups and the rows 
              represent data values for  each group (COLUMN_MAJOR), or the where the rows represent groups  and 
              the columns represent data values for each group (ROW_MAJOR).  Use the CSV.SetOrientation method 
              to initialize the csv argument  for the proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file. </param>
            <param name="rowskip"> Skip this many rows before starting the read operation. </param>
            <param name="columnskip"> For each row of data, skip this many columns before reading the first value 
            from the row. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleDataset.CompressSimpleDataset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              This methods creates and returns a new dataset that is the data reduced  version of the source dataset. 
              The new, compressed dataset will contain  ((endindex - startindex + 1) / interval) datapoints, except 
              for the DATACOMPRESS_MINMAX  compress algorithm which is the previous formula x 2. 
            </summary>
            <param name="ctypex"> The compression type for the x-values. Use one of the data compression type 
            constants:  DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no 
            compression),  DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  
            (use the average x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and 
            y-value in each interval), DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), 
            and DATACOMPRESS_MINMAX (use the minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX 
            compression type is best used when the compressed data values number more than  1000, where adjacent 
            data values in the rendered chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  
            compression type will guarantee that the chart displays the same minimums and maximums as the original dataset. </param>
            <param name="ctypey"> The compression type for the y-values. Use one of the he data compression 
            type constants. </param>
            <param name="interval"> The number of data points in each segment that is reduced to a single 
            datapoint (two  for the DATACOMPRESS_MINMAX compression type) in the compressed dataset. </param>
            <param name="startindex"> The starting point, inclusive, in the source dataset for the data compression. </param>
            <param name="endindex"> The ending index, inclusive, in the source dataset for the data compression. </param>
            <param name="newname"> The string name for the new dataset. </param>
            <returns> Returns the new, compressed SimpleDataset.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.SimpleDataset.Item(System.Int32)">
            <summary>
              This accessor is the indexer for the class and get/sets the value of an individual xy datapoint, 
              represented using a Point2D object, in the dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.SimpleDataset.YData">
            <summary>
              This method returns a reference to the DoubleArray object used to store the y-values of
              the dataset.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ContourDataset.zData">
            <summary>
             An array, size numberDatapoints of double, that holds the z-values for a contour data set.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ContourDataset.datasetPolysurface">
            <summary>
             A polysurface object used for processing of a contour data set.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.ErrorCheck(System.Int32)">
            <summary>
              Checks the current dataset object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.InitDefaults">
            <summary>
              Initializes default values for the ContourDataset object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.InitDataset(System.String,System.Double[],System.Double[],System.Double[])">
            <summary>
              An ContourDataset initialization method that initializes the name, x-, y- and z-data values  
              of a simple dataset that uses floating point values. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
            <param name="z"> An array that specifies the z-values of a dataset.  </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.InitDataset(System.String,com.quinncurtis.chart2dnet.Point3D[])">
            <summary>
              An ContourDataset initialization method that initializes the name, x- and y-data values  of a 
              simple dataset that uses floating point values. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="points"> An array of Point3D points, that specifies the xyz values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.Copy(com.quinncurtis.chart2dnet.ContourDataset)">
            <summary>
              Copies the source dataset. 
            </summary>
            <param name="source"> The source dataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.Clone">
            <summary>
             Returns an object that is a clone of this ContourDataset object. 
            </summary>
            <returns> Returns a clone of this ContourDataset object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.Resize(System.Int32)">
            <summary>
              Resizes the dataset, maintaining the original data. If the new dataset is  larger the dataset is 
              padded with zeros. If the new dataset is smaller  the original data is truncated to the new size. 
            </summary>
            <param name="n"> The new size of the dataset.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.#ctor(System.String,com.quinncurtis.chart2dnet.Point3D[],System.Int32,System.Int32)">
            <summary>
              This constructor creates a new ContourDataset object that will be placed in  the specified 
              coordinate system. The dataset represents a surface that forms a regular  grid in the xy plane. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="grid"> An array, size [rows  columns] of Point3D points, that specifies the xyz 
            values of a dataset.  The data points must form an regular grid in the xy plane. A regular grid is 
            one where the  x-increment between adjacent x values is fixed, as is the y-increment. The x-increment 
            and  the y-increment do not have to be the same. </param>
            <param name="rows"> Specifies the number of rows (in the y direction) in the regular grid. </param>
            <param name="columns"> Specifies the number of columns (in the x direction) in the regular grid. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.#ctor(System.String,com.quinncurtis.chart2dnet.Point3D[])">
            <summary>
              This constructor creates a new ContourDataset object that will be placed in  the specified 
              coordinate system. The dataset represents a surface, not necessarily  a regular grid. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="grid"> An array of Point3D points, that specifies the xyz values of a dataset.  
            The data points do not have to form an regular grid in the xy plane. A triangularization  function is 
            run on the data points to define a surface. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.#ctor(System.String,System.Double[],System.Double[],System.Double[])">
            <summary>
              This constructor creates a new ContourDataset object that will be placed in  the specified 
              coordinate system. The dataset represents a surface, not necessarily  a regular grid. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of the dataset. </param>
            <param name="y"> An array that specifies the y-values of the dataset. </param>
            <param name="z"> An array that specifies the z-values of the dataset.  The data points do not have to 
            form an regular grid in the xy plane. A triangularization  function is run on the data points to define a surface. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.#ctor(System.String,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,com.quinncurtis.chart2dnet.SurfaceFunction)">
            <summary>
              This constructor creates a new ContourDataset object that will be placed in  the specified coordinate 
              system. A dataset is generated using the supplied  SurfaceFunction, evaluated for the range x1,y1 to x2,y2 
              at  intervals equal to (x2-x1)/columns for the x direction, and (y2-y1)/rows  in the y direction. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="rows"> Specifies the number of rows (or y-values) to evaluate the function  over. </param>
            <param name="columns"> Specifies the number of columns (or x-values) to evaluate the function  over. </param>
            <param name="x1"> </param>
            <param name="y1"> </param>
            <param name="x2"> </param>
            <param name="y2"> The Surface function sf is evaluated for the range  x1,y1 to x2, y2. </param>
            <param name="sf"> The dataset data points are created by evaluating the SurfaceFunction  across 
            the range x1,y1 to x2, y2. </param>
            <see cref="T:com.quinncurtis.chart2dnet.SurfaceFunction"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.#ctor(com.quinncurtis.chart2dnet.CSV,System.String,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new ContourDataset object from a file consisting of comma separated values. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file. </param>
            <param name="rowskip"> Skip this many rows before starting the read operation. </param>
            <param name="columnskip"> For each row of data, skip this many columns before reading the first 
            value from the row.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.#ctor">
            <summary>
             The default ContourDataset constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.GetPolysurface">
            <summary>
             Returns the private Polysurface structure used to organize the dataset  data points as a 
             polysurface suitable for contour plot analysis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.GetFirstValidIndex">
            <summary>
              This method returns the index of the first valid data point in a simple dataset. 
            </summary>
            <returns> Returns the index of the first valid data point in a simple dataset. If  the value of the 
            returned index is outside of the range 0 to numberDatapoints-1, the  dataset has no valid data points.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.GetDatasetMin(System.Int32)">
            <summary>
              This method returns the minimum value for either the xData, yData or zData  arrays. 
            </summary>
            <param name="naxis"> Specifies which data array to return the minimum value from. Use X_AXIS  Y_AXIS or 
            Z_AXIS to specify which dataset array. </param>
            <returns> Returns the minimum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.GetDatasetMax(System.Int32)">
            <summary>
              This method returns the maximum value for either the xData, yData or zData  arrays. 
            </summary>
            <param name="naxis"> Specifies which data array to return the maximum value from. Use X_AXIS  Y_AXIS or 
            Z_AXIS to specify which dataset array. </param>
            <returns> Returns the maximum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.GetZData">
            <summary>
              This method returns a reference to the zData array. 
            </summary>
            <returns> Returns a reference to the zData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.GetZDataObj">
            <summary>
              This method returns a reference to the internal DoubleArray used to store the z-values. 
            </summary>
            <returns> Returns a reference to the internal DoubleArray used to store the z-values. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.GetNumberGroups">
            <summary>
              This method returns the value of the numberGroups field which is number of  groups in a group dataset. 
              Contour datasets always return 1. 
            </summary>
            <returns> Contour datasets always return 1.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.SetDataPoint(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
              Sets the x- and y- and z-values for a data point in a contour dataset. 
            </summary>
            <param name="index"> Specifies the index for the new data values.</param>
            <param name="x"> Specifies the new x-value for the data point at the specified index. </param>
            <param name="y"> Specifies the new y-value for the data point at the specified index. </param>
            <param name="z"> Specifies the new z-value for the data point at the specified index. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.SetDataPoint(System.Int32,com.quinncurtis.chart2dnet.Point3D)">
            <summary>
              Sets the x-, y- and z-values for a data point in a contour dataset. 
            </summary>
            <param name="index"> Specifies the index for the new data values.</param>
            <param name="p"> Specifies the new x-, y- and z-values for the data point at the specified index. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.GetDataPoint3D(System.Int32)">
            <summary>
              This method returns the x-, y- and z-values of a point at the specified index. 
            </summary>
            <param name="index"> Specifies the index of the data point. </param>
            <returns> Returns a Point3D object that contains the x-, -y and z-values of the  data point at the 
            specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.SetZDataValue(System.Double,System.Int32)">
            <summary>
              Sets the z-value in a contour dataset. 
            </summary>
            <param name="z"> Specifies the new z-value for the data point at the specified index. </param>
            <param name="index"> Specifies the index for the data value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.GetZDataValue(System.Int32)">
            <summary>
              This method returns the z-value in a contour dataset. 
            </summary>
            <param name="index"> Specifies the index of the z-value values. </param>
            <returns> Returns the z-value for the data point at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.IsDataPointGood(System.Int32)">
            <summary>
              This method checks if the point at the specified index for a simple  dataset is valid. 
            </summary>
            <param name="index"> Specifies the index to check in the xData and yData arrays. </param>
            <returns> Returns true if the data point is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.CalcNearestPoint(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against all of the xy points  in a contour dataset and calculates 
              which point in the dataset  is nearest the test point. The nearness test has many  different forms: 
              FNP_X = nearest x, FNP_Y = nearest y,  FNP_DIST = shortest distance, FNP_NORMX = nearest normalized x,  
              FNP_NORMY = nearest normalized y, FNP_NORMDIST = shortest normalized distance. 
            </summary>
            <param name="transform"> The coordinate system of the test point. </param>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.WriteContourDataset(com.quinncurtis.chart2dnet.CSV,System.String)">
            <summary>
              This method writes a contour dataset to a file as comma separated values. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.ReadContourDataset(com.quinncurtis.chart2dnet.CSV,System.String,System.Int32,System.Int32)">
            <summary>
              This method reads a contour dataset from a file consisting of comma separated values. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file. </param>
            <param name="rowskip"> Skip this many rows before starting the read operation. </param>
            <param name="columnskip"> For each row of data, skip this many columns before reading the 
            first value from the row.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourDataset.CompressContourDataset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              This methods creates and returns a new dataset that is the data reduced  version of the source dataset. 
              The new, compressed dataset will contain  ((endindex - startindex + 1) / interval) datapoints, except for 
              the DATACOMPRESS_MINMAX  compress algorithm which is the previous formula x 2. 
            </summary>
            <param name="ctypex"> The compression type. Use one of the data compression type constants:  
            DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no compression),  
            DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  
            (use the average x- and y-value in each interval), DATACOMPRESS_MIN (use the minimum x- and y-value in each interval), 
            DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), 
            and DATACOMPRESS_MINMAX (use the minimum and maximum x- and y-value in each interval). </param>
            <param name="ctypey"> The compression type for the y-values. Use one of the he data compression type constants. </param>
            <param name="ctypez"> The compression type for the z-values. Use one of the he data compression type constants. </param>
            <param name="interval"> The number of data points in each segment that is reduced to a single datapoint 
            (two  for the DATACOMPRESS_MINMAX compression type) in the compressed dataset. </param>
            <param name="startindex"> The starting point, inclusive, in the source dataset for the data compression. </param>
            <param name="endindex"> The ending index, inclusive, in the source dataset for the data compression. </param>
            <param name="newname"> The string name for the new dataset. </param>
            <returns> Returns the new, compressed ContourDataset.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ContourDataset.Item(System.Int32)">
            <summary>
              This accessor is the indexer for the class and get/sets the value of an individual xy datapoint, 
              represented using a Point3D object, in the dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ContourDataset.ZData">
            <summary>
              This method returns a reference to the DoubleArray object used to store the z-values of
              the dataset.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ContourPlot">
            <summary>
              The ContourPlot class displays an ContourDataset dataset  as a contour plot. The contour lines 
              can be displayed as colored lines,  or as regions of filled color.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ContourPlot.contourDataset">
            <summary>
             This field holds a reference to the dataset represented by this plot object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ContourPlot.contourLevels">
            <summary>
             An array of the contour levels used in the contour plot.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ContourPlot.contourLineFlags">
            <summary>
             An array of bool flags specifying whether a contour line should be drawn for  the associated contour level.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ContourPlot.contourLabelFlags">
            <summary>
             An array of bool flags specifying whether a contour line should be labeled with  the numeric value of the 
             associated contour level.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ContourPlot.polygonGridOn">
            <summary>
             Set to true and the outlines of the polygons making up the contour polysurface  are drawn in using the 
             objects primary line color.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ContourPlot.contourType">
            <summary>
             Controls the contour display method. Two display methods are support, line  contours, and filled contours. 
             Use one of the contour display method constants:  CONTOUR_FILL, CONTOUR_LINE, CONTOUR_LINEANDFILL.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ContourPlot.contourLineAlgorithm">
            <summary>
             Controls the contour interpolation algorithm. Use one of the contour algorithm  constants: 
             CONTOUR_LINEPOLYGON, CONTOUR_LINEWALK.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ContourPlot.numContourLevels">
            <summary>
             Specifies the number of contour levels controls the size of the  contourLevels, contourLineFlags and 
             contourLabelFlags array.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.InitDefaults">
            <summary>
              Initializes default values for the contour plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the contour plot object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.Copy(com.quinncurtis.chart2dnet.ContourPlot)">
            <summary>
              Copies the source contour object. 
            </summary>
            <param name="source"> The source contour object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.Clone">
            <summary>
             Returns an object that is a clone of this ContourPlot object. 
            </summary>
            <returns> Returns a clone of this ContourPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.#ctor">
            <summary>
             The ContourPlot default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new ContourPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new ContourPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.ContourDataset,System.Double[],com.quinncurtis.chart2dnet.ChartAttribute[],System.Int32,System.Int32)">
            <summary>
              This constructor creates a new ContourPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new ContourPlot object. </param>
            <param name="dataset"> The ContourDataset plot will represent the xyz  values in this contour data set. </param>
            <param name="contourlevels"> An array, size [numcontourlevels], of the contour levels used in the contour plot. </param>
            <param name="attribs"> An array of color and fill attributes, size [numcontourlevels+1]. If  the contourtype 
            is CONTOUR_LINE, the colors of elements 0..numcontourlevels-1 set  the colors of the contour lines. 
            If the contourtype is CONTOUR_FILL, elements  0..numcontourlevels set the color of the contour regions. </param>
            <param name="numcontourlevels"> The number of contour levels. </param>
            <param name="contourtype"> Specifies if the contour plot uses contour lines (CONTOUR_LINE),  filled contour 
            regions (CONTOUR_FILL) or both (CONTOUR_LINEANDFILL).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.ContourDataset,System.Double[],com.quinncurtis.chart2dnet.ChartAttribute[],System.Boolean[],System.Boolean[],System.Int32,System.Int32)">
            <summary>
              This constructor creates a new ContourPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new ContourPlot object. </param>
            <param name="dataset"> The ContourDataset plot will represent the xyz  values in this contour data set. </param>
            <param name="contourlevels"> An array, size [numcontourlevels], of the contour levels used in the contour plot. </param>
            <param name="attribs"> An array of color and fill attributes, one for each contour level. </param>
            <param name="blineflags"> An array, size [numcontourlevels], of bool flags specifying whether a contour 
            line should be displayed. </param>
            <param name="blabelflags"> An array, size [numcontourlevels], of bool flags specifying whether a contour 
            line should be labeled with  the numeric value of the associated contour level. </param>
            <param name="numcontourlevels"> The number of contour levels. </param>
            <param name="contourtype"> Specifies if the contour plot uses contour lines (CONTOUR_LINE),  filled contour 
            regions (CONTOUR_FILL) or both (CONTOUR_LINEANDFILL).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.InitContourPlot(com.quinncurtis.chart2dnet.ContourDataset,System.Double[],com.quinncurtis.chart2dnet.ChartAttribute[],System.Int32,System.Int32)">
            <summary>
              Sets the properties of a contour plot. 
            </summary>
            <param name="dataset"> The ContourDataset plot will represent the xyz  values in this contour data set. </param>
            <param name="contourlevels"> An array, size [numcontourlevels], of the contour levels used in the contour plot. </param>
            <param name="attribs"> An array of color and fill attributes, one for each contour level. </param>
            <param name="numcontourlevels"> The number of contour levels. </param>
            <param name="contourtype"> Specifies if the contour plot uses contour lines (CONTOUR_LINE),  filled contour 
            regions (CONTOUR_FILL) or both (CONTOUR_LINEANDFILL).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.InitContourPlot(com.quinncurtis.chart2dnet.ContourDataset,System.Double[],com.quinncurtis.chart2dnet.ChartAttribute[],System.Boolean[],System.Boolean[],System.Int32,System.Int32)">
            <summary>
              Sets the properties of a contour plot. 
            </summary>
            <param name="dataset"> The ContourDataset plot will represent the xyz  values in this contour data set. </param>
            <param name="contourlevels"> An array, size [numcontourlevels], of the contour levels used in the contour plot. </param>
            <param name="attribs"> An array of color and fill attributes, one for each contour level. </param>
            <param name="blineflags"> An array, size [numcontourlevels], of bool flags specifying whether a contour line 
            should be displayed. </param>
            <param name="blabelflags"> An array, size [numcontourlevels], of bool flags specifying whether a contour line 
            should be labeled with  the numeric value of the associated contour level. </param>
            <param name="numcontourlevels"> The number of contour levels. </param>
            <param name="contourtype"> Specifies if the contour plot uses contour lines (CONTOUR_LINE),  filled contour 
            regions (CONTOUR_FILL) or both (CONTOUR_LINEANDFILL).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.SetContourPlotAttributes(System.Double[],com.quinncurtis.chart2dnet.ChartAttribute[],System.Boolean[],System.Boolean[],System.Int32,System.Int32)">
            <summary>
              Sets the properties of a contour plot. 
            </summary>
            <param name="contourlevels"> An array, size [numcontourlevels], of the contour levels used in the contour plot. </param>
            <param name="attribs"> An array of color and fill attributes, one for each contour level. </param>
            <param name="blineflags"> An array, size [numcontourlevels], of bool flags specifying whether a contour line 
            should be displayed. </param>
            <param name="blabelflags"> An array, size [numcontourlevels], of bool flags specifying whether a contour 
            line should be labeled with  the numeric value of the associated contour level. </param>
            <param name="numcontourlevels"> The number of contour levels. </param>
            <param name="contourtype"> Controls the contour interpolation algorithm. Use one of the contour algorithm  
            constants: CONTOUR_LINEPOLYGON, CONTOUR_LINEWALK.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.SetContourPlotAttributes(System.Double[],com.quinncurtis.chart2dnet.ChartAttribute[],System.Int32,System.Int32)">
            <summary>
              Sets the properties of a contour plot. 
            </summary>
            <param name="contourlevels"> An array, size [numcontourlevels], of the contour levels used in the 
            contour plot. </param>
            <param name="attribs"> An array of color and fill attributes, one for each contour level. </param>
            <param name="numcontourlevels"> The number of contour levels. </param>
            <param name="contourtype"> Controls the contour interpolation algorithm. Use one of the contour algorithm  
            constants: CONTOUR_LINEPOLYGON, CONTOUR_LINEWALK.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.Interpolatepoint3D(com.quinncurtis.chart2dnet.Point3D,com.quinncurtis.chart2dnet.Point3D,com.quinncurtis.chart2dnet.Point3D,System.Int32)">
            <summary>
              Uses linear interpolation to determine the values of a 3D point based one the values
              of other points in the same plane. 
            </summary>
            <param name="known1"> Known 3D point #1  on plane. </param>
            <param name="known2"> Known 3D point #2  on plane.</param>
            <param name="partknown"> A 3D point with either only one parameter (x, y or z) known. </param>
            <param name="plane"> Specifies what plane to solve for</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.OutContourLabel2D(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Point3D,com.quinncurtis.chart2dnet.Point3D,com.quinncurtis.chart2dnet.NumericLabel)">
            <summary>
              Uses linear interpolation to determine the values of a 3D point based one the values
              of other points in the same plane. 
            </summary>
            <param name="g2"> The graphics device context. </param>
            <param name="pnt1"> One of two points that determine the position and rotational angle of the text.</param>
            <param name="pnt2"> Second of two points that determine the position and rotational angle of the text. </param>
            <param name="textobj"> The numeric label  </param>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.InterpolatePolyContour3D(com.quinncurtis.chart2dnet.Point3D[],System.Int32,System.Double,com.quinncurtis.chart2dnet.Point3D,com.quinncurtis.chart2dnet.Point3D,System.Int32[])">
            <summary>
              Uses linear interpolation determine the two 3D points that define how a contour passes
              through a polygon 
            </summary>
            <param name="pv"> An polygon defining a plane. </param>
            <param name="n"> Number of points in the polygon.</param>
            <param name="contour"> Contour level to calculate for in the polygon. </param>
            <param name="startp"> Returns the starting point of the contour line passing through the polygon.</param>
            <param name="stopp"> Returns the ending point of the contour line passing through the polygon.</param>
            <param name="order"> Returns two integer indices that specify the which edges of the polygon
            the control line passes through. </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.PlotContourSegment2D(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Polysurface,System.Int32[],System.Int32,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,System.Boolean,System.Boolean,com.quinncurtis.chart2dnet.NumericLabel)">
            <summary>
             Plot all instances of a contour line through a polysurface 
            </summary>
            <param name="g2"> The graphics context. </param>
            <param name="psf"> Defines the polysurface of the contour map</param>
            <param name="ctrilist"> A list of polygons that the contour passes through </param>
            <param name="numtri"> Number of triangles in the ctrilist </param>
            <param name="contour"> Contour level. </param>
            <param name="attrib"> Attribute of the contour line. </param>
            <param name="bdrawline">  True specifies that the contour line should be drawn </param>
            <param name="binsertlabel"> True specifies that a contour label should be placed in the contour line </param>
            <param name="textobj"> The text object that will be used to label the contour label </param>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.CheckForPolyContour3D(com.quinncurtis.chart2dnet.Point3D[],System.Int32,System.Double,System.Int32[])">
            <summary>
             Check to see if a contour level passes through a polygon
            </summary>
            <param name="pv"> Defines a polygon of the contour surface</param>
            <param name="n"> Number of points in the pv polygon </param>
            <param name="contour"> Contour level. </param>
            <param name="order"> Returns two integer indices that specify the which edges of the polygon
            the control line passes through. </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.DrawPolysurfacePolygon(System.Drawing.Graphics,com.quinncurtis.chart2dnet.ChartAttribute,com.quinncurtis.chart2dnet.Point3D[],System.Int32)">
            <summary>
              Draw a polysurface polygon
              
            </summary>
            <param name="g2"> The graphics device context. </param>
            <param name="attrib"> The attributes of the polygon. </param>
            <param name="pv"> A point list defining the polygon </param>
            <param name="n"> The number of points in the polygon.</param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.DrawPolysurfaceArea(System.Drawing.Graphics,com.quinncurtis.chart2dnet.ChartAttribute,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draw a polysurface polygon
              
            </summary>
            <param name="g2"> The graphics device context. </param>
            <param name="attrib"> The attributes of the polygon. </param>
            <param name="areaobj"> A GraphicsPath object that defines the polygon. </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.DefinePolysurfaceArea(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Point3D[],System.Int32)">
            <summary>
              Define a polygon as a GraphicsPath object
              
            </summary>
            <param name="g2"> The graphics device context. </param>
            <param name="pv"> The points defining the polygon. </param>
            <param name="n"> The number of points in the polygon </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.GetContourPolyList(com.quinncurtis.chart2dnet.Polysurface,System.Double,System.Int32[],System.Int32[],System.Boolean[])">
            <summary>
             Returns a list of contiguous polygons that a contour line passes through 
            </summary>
            <param name="psf"> Defines the polysurface of the contour map</param>
            <param name="contourvalue1"> Contour level. </param>
            <param name="startstoppoly"> Index 0 specifies the index of the starting polygon in the polysurface, 
            index 1 returns the index of the ending polygon in the list. </param>
            <param name="ctrilist"> Returns a list of polygons that the contour passes through </param>
            <param name="pchecked"> Returns an array of bool that where true at an index means that the polygon at that
            index has already been checked for the contour.</param>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.DrawLineContourChart(System.Drawing.Graphics)">
            <summary>
              Draw contour plot using the  specified algorithm
              
            </summary>
            <param name="g2"> The graphics device context. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.DrawLinePolygonContourChart(System.Drawing.Graphics)">
            <summary>
              Draw contour plot using the  CONTOUR_LINEPOLYGON algorithm
              
            </summary>
            <param name="g2"> The graphics device context. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.DrawLineWalkContourChart(System.Drawing.Graphics)">
            <summary>
              Draw contour plot using the  CONTOUR_LINEWALK algorithm
              
            </summary>
            <param name="g2"> The graphics device context. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.FindContourIndex(System.Double)">
            <summary>
             Find where a contour value is positioned compared to the contour level array
              
            </summary>
            <param name="contourvalue1"> The contour value to check. </param>  
            <returns> Returns the index of the first contour value in the contour level array
             that greater than the specified value. </returns>returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.DrawMultiContourTriangle(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Point3D[],System.Int32)">
            <summary>
              Draw all contours that pass through a polygon.
            </summary>
            <param name="g2"> The graphics device context. </param>
            <param name="pv"> The polygon to check. </param>
            <param name="numpoints"> The number of points in the polygon. </param>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.FillMultiContourTriangle(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Point3D[],System.Int32,System.Int32[])">
            <summary>
              Draw all contours that pass through a polygon.
            </summary>
            <param name="g2"> The graphics device context. </param>
            <param name="pv"> The polygon to check. </param>
            <param name="numpoints"> The number of points in the polygon. </param>
            <param name="minmax"> An array of two indices that specifies the staring and stopping contour index </param>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.FillOneContourTriangle(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Point3D[],System.Int32,System.Int32[])">
            <summary>
              Fills a polysurface triangle that only has one contour color.
            </summary>
            <param name="g2"> The graphics device context. </param>
            <param name="pv"> The polygon to check. </param>
            <param name="numpoints"> The number of points in the polygon. </param>
            <param name="minmax"> An array of two indices that specifies the staring and stopping contour index </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.ProcessTriContours(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Point3D[],System.Int32)">
            <summary>
              Fills a polysurface triangle with one or more contour colors.
            </summary>
            <param name="g2"> The graphics device context. </param>
            <param name="pv"> The polygon to check. </param>
            <param name="numpoints"> The number of points in the polygon. </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.CheckTriNumContours(com.quinncurtis.chart2dnet.Point3D[],System.Int32,System.Int32[])">
            <summary>
              Calculate how many contours pass through a polysurface triangle.
            </summary>
            <param name="pv"> The polygon to check. </param>
            <param name="numpoints"> The number of points in the polygon. </param>
            <param name="minmax"> An array of two indices that specifies the staring and stopping contour index </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.OrderPolygon(com.quinncurtis.chart2dnet.Point3D[])">
            <summary>
              Order polygon points so that point with highest z-value is first.
            </summary>
            <param name="source"> The 3 points of the polygon. </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.DrawFilledContourChart(System.Drawing.Graphics)">
            <summary>
              Draws a filled contour chart.
            </summary>
            <param name="g2"> The graphics device context. </param>
            			
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the CellPlot object  
              is drawn in the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.SetDataset(com.quinncurtis.chart2dnet.ContourDataset)">
            <summary>
             Replaces the current ContourDataset object with a new one. 
            </summary>
            <param name="dataset"> Specifies the new ContourDataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.GetDataset">
            <summary>
             Returns a reference to the current ContourDataset. 
            </summary>
            <returns> Returns a reference to the current ContourDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.CalcNearestPoint(com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against all of the xy points  in a simple dataset and calculates 
              which point in the dataset  is nearest the test point. The nearness test has many  different forms:  
              Nearness Mode Constant Description  FNP_X nearest x  FNP_Y nearest y  FNP_DIST shortest distance  
              FNP_NORMX nearest normalized x  FNP_NORMY nearest normalized y  FNP_NORMDIST shortest normalized distance 
            </summary>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.GetContourLevel(System.Int32)">
            <summary>
             Returns a specific contour level. 
            </summary>
            <param name="index"> The specific contour level to return. </param>
            <returns> Returns the contour level at contourLevels[index].</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.SetContourLevel(System.Int32,System.Double)">
            <summary>
             Sets a specific contour level. 
            </summary>
            <param name="index"> The specific contour level to set. </param>
            <param name="value"> Sets the contour level at contourLevels[index].</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.GetContourLineFlag(System.Int32)">
            <summary>
             Returns a specific contour line flag. 
            </summary>
            <param name="index"> The specific contour line flag to return. </param>
            <returns> Returns the contour line flag at contourLineFlags[index].</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.SetContourLineFlag(System.Int32,System.Boolean)">
            <summary>
             Sets a specific contour line flag. 
            </summary>
            <param name="index"> The specific contour line flag to set. </param>
            <param name="bvalue1"> Sets the contour line flag at contourLineFlags[index].</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.GetContourLabelFlag(System.Int32)">
            <summary>
             Returns a specific contour label flag. 
            </summary>
            <param name="index"> The specific contour label flag to return. </param>
            <returns> Returns the contour label flag at contourLabelFlags[index].</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.SetContourLabelFlag(System.Int32,System.Boolean)">
            <summary>
             Sets a specific contour label flag. 
            </summary>
            <param name="index"> The specific contour label flag to set. </param>
            <param name="bvalue1"> Sets the contour label flag at contourLabelFlags[index].</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.GetNumContourLevels">
            <summary>
             Returns the number of contour levels. 
            </summary>
            <returns> Returns the number of contour levels.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.SetPolygonGridOn(System.Boolean)">
            <summary>
             Sets the state of the polygonGridOn flag. 
            </summary>
            <param name="bvalue1"> Sets the state of the polygonGridOn flag.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.GetPolygonGridOn">
            <summary>
             Returns the state of the polygonGridOn flag. 
            </summary>
            <returns> Returns the state of the polygonGridOn flag.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.GetContourType">
            <summary>
             Returns the contour plot type. 
            </summary>
            <returns> Returns the contour plot type.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.SetContourType(System.Int32)">
            <summary>
             Sets the contour plot type. 
            </summary>
            <param name="contourtype"> Sets the contour plot type. Use one of the contour  plot type constants: 
            CONTOUR_FILL, CONTOUR_LINE or CONTOUR_LINEANDFILL.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.GetContourLineAlgorithm">
            <summary>
             Returns the contour line drawing algorithm. 
            </summary>
            <returns> Returns the contour line drawing algorithm.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ContourPlot.SetContourLineAlgorithm(System.Int32)">
            <summary>
             Sets the contour line drawing algorithm. 
            </summary>
            <param name="contourlinealgorithm"> Sets the contour line drawing algorithm.  Use one of the 
            contour line algorithm constants: CONTOUR_LINEPOLYGON or CONTOUR_LINEWALK.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ContourPlot.NumContourLevels">
            <summary>
             Gets the number of contour levels. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ContourPlot.PolygonGridOn">
            <summary>
             Set/Get the state of the polygonGridOn flag. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ContourPlot.ContourType">
            <summary>
             Returns the contour plot type. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.CSV">
            <summary>
              The CSV class provides utility routines and constants used to  read/write CSV (comma separated value) files. 
              CSV files allow data to be  exchanged with other programs that read and write CSV files, 
              such as  work processors and spreadsheets.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.SEEKING">
            <summary>
              parser: We are in blanks before the field.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.INPLAIN">
            <summary>
              parser: We are in the middle of an ordinary field.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.INQUOTED">
            <summary>
              parser: e are in middle of field surrounded in quotes.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.SEENQUOTE">
            <summary>
              parser: We have just hit a quote, might be doubled  or might be last one.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.columnDelimiterChar">
            <summary>
             The character used as the delimit character, separating one string from the  next, or columns, in a row of data.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.newLineString">
            <summary>
             The string used as the end of file designator, separating one line of  data, or row, from the next.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.timeDateFormat">
            <summary>
             A time date format in the form of a DateTimeFormatInfo that controls  how ChartCalendar values are written 
             to the target file.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.timeDateFormatString">
            <summary>
             A time/date format string the controls how ChartCalendar values are written to the target file.
            </summary>		
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.orientation">
            <summary>
             Controls the row/column orientation of the data file as it relates to conversion  into an 
             ChartDataset derived object. The file can be organized so that  the columns represent groups and the 
             rows represent data values for  each group (COLUMN_MAJOR), or the where the rows represent groups  
             and the columns represent data values for each group (ROW_MAJOR),
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.forceQuotes">
            <summary>
              true if you want all fields surrounded in quotes,  whether or not they contain commas, quotes or spaces.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.CSV.wasPreviousField">
            <summary>
              parser: need to insert a column delimiter.
            </summary>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.#ctor">
            <summary>
             The default CSV constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.#ctor(System.Int32)">
            <summary>
             This CSV constructor specifies the orientation of the data values  in the source or target data file. 
            </summary>
            <param name="orient"> Controls the row/column orientation of the data file as it relates to conversion  
            into an ChartDataset derived object. The file can be organized so that  the columns represent groups and 
            the rows represent data values for  each group (COLUMN_MAJOR), or the where the rows represent groups  
            and the columns represent data values for each group (ROW_MAJOR).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.Clone">
            <summary>
             Returns an object that is a clone of this  object. 
            </summary>
            <returns> Returns a clone of this object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.GetFileNumRows(System.IO.StreamReader)">
            <summary>
             This method counts the number of rows in a CSV file. Counting  starts at the current file position, 
             not the beginning of the file. 
            </summary>
            <param name="pReader"> A previously opened Reader object. </param>
            <returns> Returns the number of rows in the file.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.GetFileNumColumns(System.IO.StreamReader)">
            <summary>
             This method counts the number of columns in a CSV file. Counting  starts at the current file position, 
             not the beginning of the file. 
            </summary>
            <param name="pReader"> A previously opened Reader object. </param>
            <returns> Returns the number of columns in the file.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.WriteTime(System.IO.StreamWriter,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method write a ChartCalendar value to the specified StreamWriter object.  The this.timeDateFormat 
             object controls the ChartCalendar to text  conversion. 
            </summary>
            <param name="pWriter"> A previously opened StreamWriter object. </param>
            <param name="gregdate"> The ChartCalendar date that is to written to a file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.WriteDouble(System.IO.StreamWriter,System.Double)">
            <summary>
             This method write a double value to the specified StreamWriter object. 
            </summary>
            <param name="pWriter"> A previously opened StreamWriter object. </param>
            <param name="r"> The double value that is to written to a file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.WriteLong(System.IO.StreamWriter,System.Int64)">
            <summary>
             This method write a long value to the specified StreamWriter object. 
            </summary>
            <param name="pWriter"> A previously opened StreamWriter object. </param>
            <param name="l"> The long value that is to written to a file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.Write(System.IO.StreamWriter,System.String)">
            <summary>
             This method write a string to the specified StreamWriter object. 
            </summary>
            <param name="pWriter"> A previously opened StreamWriter object. </param>
            <param name="s"> The string that is to written to a file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.Writeln(System.IO.StreamWriter)">
            <summary>
             This method starts a new line by writing the newLineString character to the specified StreamWriter object. 
            </summary>
            <param name="pWriter"> A previously opened StreamWriter object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.ReadDouble(System.IO.StreamReader)">
            <summary>
             This method reads a double value from the specified Reader object. 
            </summary>
            <param name="pReader"> A previously opened Reader object. </param>
            <returns> The double value read from the file. </returns>
            <exception cref="T:System.IO.EndOfStreamException">  at end of file after all the fields have  been read.  </exception>
            <exception cref="T:System.IO.IOException">  Some problem reading the file, possibly malformed data.</exception>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.ReadLong(System.IO.StreamReader)">
            <summary>
             This method reads a long value from the specified Reader object. 
            </summary>
            <param name="pReader"> A previously opened Reader object. </param>
            <returns> The long value read from the file. </returns>
            <exception cref="T:System.IO.EndOfStreamException">  at end of file after all the fields have  been read.  </exception>
            <exception cref="T:System.IO.IOException">  Some problem reading the file, possibly malformed data.</exception>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.ReadTime(System.IO.StreamReader)">
            <summary>
             This method reads a ChartCalendar date from the specified Reader object. 
            </summary>
            <param name="pReader"> A previously opened Reader object. </param>
            <returns> The ChartCalendar value read from the file. </returns>
            <exception cref="T:System.IO.EndOfStreamException">  at end of file after all the fields have  been read.  </exception>
            <exception cref="T:System.IO.IOException">  Some problem reading the file, possibly malformed data.</exception>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.Read(System.IO.StreamReader)">
            <summary>
              This method reads one string from the specified Reader object. 
            </summary>
            <param name="pReader"> A previously opened Reader object. </param>
            <returns> String value, even if the field is numeric. Surrounded  and embedded double quotes are stripped.  
            possibly "". null means end of line.  </returns>
            <exception cref="T:System.IO.EndOfStreamException">  at end of file after all the fields have  been read.  </exception>
            <exception cref="T:System.IO.IOException">  Some problem reading the file, possibly malformed data.</exception>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.Skip(System.IO.StreamReader,System.Int32)">
            <summary>
              This method skips over fields that do not need to be processed.  
            </summary>
            <param name="pReader"> A previously opened Reader object. </param>
            <param name="fields"> How many field you want to bypass reading.  The newline counts as one field. </param>
            <exception cref="T:System.IO.EndOfStreamException">  at end of file after all the fields have  been read. </exception>
            <exception cref="T:System.IO.IOException">  Some problem reading the file, possibly malformed data.</exception>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.Readln(System.IO.StreamReader)">
            <summary>
              Skip over remaining fields on this line you don't want to process. 
            </summary>
            <param name="pReader"> A previously opened Reader object. </param>
            <exception cref="T:System.IO.EndOfStreamException">  at end of file after all the fields have  been read. </exception>
            <exception cref="T:System.IO.IOException">  Some problem reading the file, possibly malformed data.</exception>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.SetColumnDelimiterChar(System.Char)">
            <summary>
             This methods sets the column delimiter character, which is a comma by default.
            </summary>
            <param name="c"> The new comma delimiter character.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.GetColumnDelimiterChar">
            <summary>
             This methods returns the column delimiter character.
            </summary>
            <returns> The comma delimiter character.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.SetNewLineString(System.String)">
            <summary>
             This methods sets the newline string, which is a "\r\n" by default.
            </summary>
            <param name="s"> The new newline string.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.GetNewLineString">
            <summary>
             This methods returns the newline string.
            </summary>
            <returns> The newline string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.SetTimeDateFormat(System.Globalization.DateTimeFormatInfo)">
            <summary>
             A time date format in the form of a SimpleDateFormat object controls  how ChartCalendar values are 
             written to or read from the target file. The  default format is "M/dd/yy".  This object is set using this method. 
            </summary>
            <param name="format"> An instance of a SimpleDateFormat object, initialized  for the desired format.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.GetTimeDateFormat">
            <summary>
             A time date format in the form of a SimpleDateFormat object controls  how ChartCalendar values are 
             written to or read from the target file. The  default format is "M/dd/yy".  A reference to the current 
             SimpleDataFormat object is returned using  this method. 
            </summary>
            <returns> Returns an instance of the current SimpleDateFormat object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.SetTimeDateFormatString(System.String)">
            <summary>
             A time date format string controls  how ChartCalendar values are written to or read from the target 
             file. The  default format is "M/dd/yy".  This object is set using this method. 
            </summary>
            <param name="format"> The time date format string initialized  for the desired format.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.GetTimeDateFormatString">
            <summary>
             A time date format string controls  how ChartCalendar values are written to or read from the target file. 
             The  default format is "M/dd/yy".  A reference to the current SimpleDataFormat object is returned using  
             this method. 
            </summary>
            <returns> Returns an instance of the current time date format string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.SetOrientation(System.Int32)">
            <summary>
             Controls the row/column orientation of the data file as it relates to conversion  into an ChartDataset 
             derived object. The file can be organized so that  the columns represent groups and the rows represent 
             data values for  each group (COLUMN_MAJOR), or the where the rows represent groups  and the columns 
             represent data values for each group (ROW_MAJOR). 
            </summary>
            <param name="orient"> Set to COLUMN_MAJOR or ROW_MAJOR.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.CSV.GetOrientation">
            <summary>
             Returns the current orientation of the data file. 
            </summary>
            <returns> Returns the current orientation of the data file, either COLUMN_MAJOR or ROW_MAJOR.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.CSV.ColumnDelimiterChar">
            <summary>
             Set/Get the column delimiter character, which is a comma by default.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.CSV.NewLineString">
            <summary>
             Set/Get the newline string, which is a "\r\n" by default.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.CSV.TimeDateFormatObj">
            <summary>
             Set/Get time date format in the form of a SimpleDateFormat object controls  how ChartCalendar values 
             are written to or read from the target file. The  default format is "M/dd/yy".  This object is set 
             using this method. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.CSV.TimeDateFormatString">
            <summary>
             Set/Get time date format in the form of a SimpleDateFormat object controls  how ChartCalendar values 
             are written to or read from the target file. The  default format is "M/dd/yy".  This object is set 
             using this method. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.CSV.Orientation">
            <summary>
             Set/Get the row/column orientation of the data file as it relates to conversion  into an ChartDataset 
             derived object. The file can be organized so that  the columns represent groups and the rows represent 
             data values for  each group (COLUMN_MAJOR), or the where the rows represent groups  and the columns 
             represent data values for each group (ROW_MAJOR). 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.DataCursor">
            <summary>
              This class extends the Marker class, extending the MouseListener class providing additional methods 
              that allow markers to be moved around on a graph  using the mouse.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataCursor.mouseMarker">
            <summary>
             The Marker object used as the data cursor. 
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataCursor.cursorObjActive">
            <summary>
             A flag indicating that the data cursor is active. 
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.#ctor">
            <summary>
             The DataCursor default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.ErrorCheck(System.Int32)">
            <summary>
              Checks the current data cursor object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.InitDefaults">
            <summary>
              Initializes default values for the data cursor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.Copy(com.quinncurtis.chart2dnet.DataCursor)">
            <summary>
              Copies the source data cursor object. 
            </summary>
            <param name="source"> The source data cursor object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.Clone">
            <summary>
             Returns an object that is a clone of this DataCursor object. 
            </summary>
            <returns> Returns a clone of this DataCursor object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.InitChartDataCursor(com.quinncurtis.chart2dnet.ChartView,com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Double)">
            <summary>
              Initializes the attributes of an DataCursor object. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="transform"> The PhysicalCoordinates object associated with the data cursor. </param>
            <param name="nmarkertype"> The marker type. Use one of the Marker marker type constants:  
            MARKER_VLINE .. MARKER_HVLINE. </param>
            <param name="rsize"> The size in window device coordinates of the MARKER_BOX and MARKER_CROSS style cursors.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.#ctor(com.quinncurtis.chart2dnet.ChartView,com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Double)">
            <summary>
              This constructor creates a new DataCursor object using the specified  component, scale, 
              type and size parameters. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="transform"> The PhysicalCoordinates object associated with the data cursor. </param>
            <param name="nmarkertype"> The marker type. Use one of the Marker marker type constants:  
            MARKER_VLINE .. MARKER_HVLINE. </param>
            <param name="rsize"> The size in window device coordinates of the MARKER_BOX and MARKER_CROSS style cursors.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseDragged event listener for this object. It causes the current  
              data cursor object to track the mouse cursor. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mousePressed event listener for this object. Once the specified mouse  button is pressed, the
               data cursor starts tracking the mouse cursor. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseReleased event listener for this object. Once the specified mouse  button is pressed, 
              then released, the data cursor stops tracking the mouse cursor  and disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.OnClick(System.EventArgs)">
            <summary>
              The OnClick event listener for this object. Once the specified mouse  button is pressed, 
              then released, the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.OnDoubleClick(System.EventArgs)">
            <summary>
              The OnDoubleClick event listener for this object. Once the specified mouse  button is pressed, 
              then released, the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. The method calls the super class (Marker)  draw method. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.SetMarkerType(System.Int32)">
            <summary>
             Sets the marker type. 
            </summary>
            <param name="nmarkertype"> Sets the marker type. Use one of the marker type constants:  
            MARKER_NULL, MARKER_VLINE, MARKER_HLINE, MARKER_CROSS, MARKER_BOX or MARKER_HVLINE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.GetMarkerType">
            <summary>
             Returns the marker type. 
            </summary>
            <returns> Returns the marker type. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.DataCursor.SetMarkerType(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.SetMarkerSize(System.Double)">
            <summary>
             Sets the marker size. 
            </summary>
            <param name="rsize"> Sets the marker size in window device coordinates. The marker size applies  
            only to MARKER_BOX and MARKER_CROSS marker types.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.GetMarkerSize">
            <summary>
             Returns the marker size. 
            </summary>
            <returns> Returns the marker size in window device coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.GetMarker">
            <summary>
             Get the mouse data cursor marker. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataCursor.GetLocation">
            <summary>
             Get the mouse data cursor location. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataCursor.MarkerType">
            <summary>
             Set/Get the marker type. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataCursor.MarkerSize">
            <summary>
             Set/Get the marker size. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataCursor.MouseMarker">
            <summary>
             Get the mouse data cursor marker. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataCursor.Location">
            <summary>
             Get the mouse data cursor location. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.DataToolTip">
            <summary>
              The DataToolTip class extends the MouseListener class, providing additional methods  that allow the user to 
              popup a simple tooltip window displaying the x- and y-values of a data point.  This class looks at the 
              actually underlying data values of a plot objects dataset. It does not take into  account data objects 
              that use a stacked format: StackedBarPlot and StackedLinePlot.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.nearestPoint">
            <summary>
             Holds information regarding the nearest data point.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.hitTestThreshold">
            <summary>
             A data point must be within this distance of the test point, in DEV_POS coordinates  in order for it to be 
             considered a hit.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.toolTipGraphics">
            <summary>
             Holds a reference to a temporary graphics context used while a marker is being move.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.textTemplate">
            <summary>
             The ChartText template used to display the tooltip data.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.xValueTemplate">
            <summary>
             The ChartLabel template use to specify the numeric format of the x-data values.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.yValueTemplate">
            <summary>
             The ChartLabel template use to specify the numeric format of the y-data values.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.toolTipSymbol">
            <summary>
             The ChartSymbol object used to highlight a data points.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.nearestDataValue">
            <summary>
             Holds the xy value of the data point nearest the mouse click position.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.actualCursorPosition">
            <summary>
             Holds the actual xy value of the the mouse click position.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.selectedCoordinateSystem">
            <summary>
             Holds a reference to the coordinate system of the selected plot object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.selectedPlotObj">
            <summary>
             Specifies the currently selected plot object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.selectedDataset">
            <summary>
             Specifies the dataset associate with the currently selected plot object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.dataToolTipFormat">
            <summary>
             Specifies the format of the tooltip display. Use one of the data tooltip constants:  DATA_TOOLTIP_CUSTOM, 
             DATA_TOOLTIP_X, DATA_TOOLTIP_Y, DATA_TOOLTIP_XY_ONELINE, DATA_TOOLTIP_TWOLINE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.nearestPointFound">
            <summary>
             Set to true if the mouse click is within the hitThreshold value of a data point.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.tooltipActive">
            <summary>
             Set to true while the tooltip is displayed.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DataToolTip.oHLCStrings">
            <summary>
             Holds the strings used in the DATA_TOOLTIP_OHLC tooltip typ.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.InitDefaults">
            <summary>
              Initialized default values. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.ErrorCheck(System.Int32)">
            <summary>
              Checks the DataToolTip object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.Copy(com.quinncurtis.chart2dnet.DataToolTip)">
            <summary>
              Copies the source DataToolTip. 
            </summary>
            <param name="source"> The source DataToolTip object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.Clone">
            <summary>
             Returns an object that is a clone of this DataToolTip object. 
            </summary>
            <returns> Returns a clone of this DataToolTip object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.#ctor">
            <summary>
              The default DataToolTip constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.#ctor(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
              This constructor creates a new DataToolTip object using the specified  component and scale. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.#ctor(com.quinncurtis.chart2dnet.ChartView,System.Windows.Forms.MouseButtons)">
            <summary>
              This constructor creates a new DataToolTip object using the specified  component and scale. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="buttonmask"> Specifies the mouse button that is trapped to invoke a move.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.MakeDefaultDataToolTipString">
            <summary>
             Makes the string that is used as the default data toolip.
            </summary>
            <returns> Returns the string of the default data tooltip </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetValueString(com.quinncurtis.chart2dnet.ChartLabel,System.Double)">
            <summary>
             Returns a string representing a data value, either numeric or time based. 
            </summary>
            <param name="label"> The NumericLabel or TimeLabel template used to  format the associated data value. </param>
            <param name="value"> The data point value. </param>
            <returns> Returns a formatted string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.DrawDefaultDataToolTip">
            <summary>
             The default mousePressed tooltip event used by the DATA_TOOLTIP_X,  DATA_TOOLTIP_Y, DATA_TOOLTIP_XY_ONELINE, 
             DATA_TOOLTIP_TWOLINE formats.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.Draw(System.Drawing.Graphics)">
            <summary>
             The default drawing routine for the data tooltip. Can be overridden in subclasses.
            </summary>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mousePressed event listener for this object. If a data point is within the  threshold distance of the 
              mouse pressed event, the tootip box displaying the data value(s) is enabled.  If you uses the 
              DATA_TOOLTIP_CUSTOM tooltip format, override this method in a derived class.  Makes sure you call 
              base.mousePressed(event) as the first function in that method. This will locate  the nearest point to 
              the mouse pressed event. You can retrieve this information using the  getNearestDataValue, 
              getActualCursorPosition, getSelectedCoordinateSystem, getSelectedPlotObj, getSelectedDataset,  
              getNearestPoint methods. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseDragged event listener for this object. It causes the current  data cursor object to track 
              the mouse cursor. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.ReleaseDefaultDataToolTip">
            <summary>
             The default mouseReleased tooltip event used by the DATA_TOOLTIP_X,  DATA_TOOLTIP_Y, DATA_TOOLTIP_XY_ONELINE, 
             DATA_TOOLTIP_TWOLINE formats.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseReleased event listener for this object. Once the specified mouse  button is pressed, then 
              released, the tooltip disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.OnClick(System.EventArgs)">
            <summary>
              The OnClick event listener for this object. Once the specified mouse  button is pressed, then released, 
              the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.OnDoubleClick(System.EventArgs)">
            <summary>
              The OnDoubleClick event listener for this object. Once the specified mouse  button is pressed, then 
              released, the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.FindObj(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              This method finds the plot object nearest the test point. 
            </summary>
            <param name="testpoint"> The current position of the mouse in window device coordinates. </param>
            <returns> If a plot object is found, a reference to that object is  returned. Otherwise null is returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.SetHitTestThreshold(System.Double)">
            <summary>
              A data point must be within a threshold distance of the test point, in DEV_POS coordinates  in order for 
              it to be considered a hit. This method sets that value. 
            </summary>
            <param name="nearvalue"> A data point must be within this threshold distance of the test point, in DEV_POS 
            coordinates  in order for it to be considered a hit.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetHitTestThreshold">
            <summary>
              Returns the threshold distance used to determine if the test point is close enough to at data  point 
              to be considered a hit. 
            </summary>
            <returns> Returns the nearness test value. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.DataToolTip.SetHitTestThreshold(System.Double)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.SetTextTemplate(com.quinncurtis.chart2dnet.ChartText)">
            <summary>
             Sets the tootip text template. It specifies the data point justification of the  tooltip, and the text font. 
            </summary>
            <param name="texttemplate"> An instance of an ChartText object that has been  initialized so that the font, 
            font size, color and justification parameters  represent a template for the display of the tooltip values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetTextTemplate">
            <summary>
             Returns a reference to the tootip text template. 
            </summary>
            <returns> Returns an instance of the tooltip text template.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.SetXValueTemplate(com.quinncurtis.chart2dnet.ChartLabel)">
            <summary>
             Sets the tootip x-value template. It specifies the numeric format used to display the x-value  in the 
             tooltip. You can pass in either a NumericLabel object, or a TimeLabel object. 
            </summary>
            <param name="xvalue1template"> Specifies the numeric format used to display the x-value  in the tooltip.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetXValueTemplate">
            <summary>
             Returns a reference to the tootip x-value template. 
            </summary>
            <returns> Returns an instance of the tooltip x-value template.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.SetYValueTemplate(com.quinncurtis.chart2dnet.ChartLabel)">
            <summary>
             Sets the tootip y-value template. It specifies the numeric format used to display the y-value  in the 
             tooltip. You can pass in either a NumericLabel object, or a TimeLabel object. 
            </summary>
            <param name="yvalue1template"> Specifies the numeric format used to display the y-value  in the tooltip.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetYValueTemplate">
            <summary>
             Returns a reference to the tootip y-value template. 
            </summary>
            <returns> Returns an instance of the tooltip y-value template.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.SetToolTipSymbol(com.quinncurtis.chart2dnet.ChartSymbol)">
            <summary>
             Sets the tootip symbol used to highlight the tooltip data point. It specifies the  symbol style, size and color. 
            </summary>
            <param name="symbol"> Specifies the tootip symbol used to highlight the tooltip data point.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetToolTipSymbol">
            <summary>
             Returns a reference to the tootip symbol used to highlight the tooltip data point. 
            </summary>
            <returns> Returns a reference to the tootip symbol used to highlight the tooltip data point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetToolTipGraphics">
            <summary>
             Returns a reference to the graphics object used by the tooltip class. 
            </summary>
            <returns> Returns a reference to the tootip object used by the tooltip class.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.SetDataToolTipFormat(System.Int32)">
            <summary>
             Specifies the format of the tooltip display. Use one of the data tooltip constants:  DATA_TOOLTIP_CUSTOM, 
             DATA_TOOLTIP_X, DATA_TOOLTIP_Y, DATA_TOOLTIP_XY_ONELINE, DATA_TOOLTIP_TWOLINE. 
            </summary>
            <param name="format"> Specifies the format of the tooltip display.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetDataToolTipFormat">
            <summary>
             Returns the format of the tooltip display. 
            </summary>
            <returns> Returns the format of the tooltip display.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetNearestDataValue">
            <summary>
             In the mousePressed event, this function will return the xy data point nearest the mouse cursor  position. 
            </summary>
            <returns> Returns the xy data point nearest the mouse cursor position.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetActualCursorPosition">
            <summary>
             In the mousePressed event, this function will return the actual mouse cursor  position, in the physical 
             units of the associated plot object. If the threshold test  fails, this point is invalid. 
            </summary>
            <returns> Returns the xy position of the mouse cursor.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetSelectedCoordinateSystem">
            <summary>
             In the mousePressed event, this function will return the coordinate system of  the selected plot object. 
             If the threshold test  fails, this object is invalid. 
            </summary>
            <returns> Returns the coordinate system of the selected plot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetSelectedPlotObj">
            <summary>
             In the mousePressed event, this function will return the  selected plot object. If the threshold test  
             fails, this object is invalid. 
            </summary>
            <returns> Returns the selected plot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetSelectedDataset">
            <summary>
             In the mousePressed event, this function will return the  selected plot objects dataset. If the threshold 
             test  fails, this object is invalid. 
            </summary>
            <returns> Returns the selected plot objects dataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetNearestPoint">
            <summary>
             In the mousePressed event, this function will return information about1 the  the search for the nearest 
             data point. If the search fails the threshold test,  the value of getNearestPoint.getNearestPointValid 
             return false. 
            </summary>
            <returns> Returns information about1 the search for the nearest data point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.SetOHLCStrings(System.String[])">
            <summary>
             Set the strings used to differentiate the x, open, high, low and close values in the DATA_TOOLTIP_OHLC tooltip type. 
             The ohlcstrings[0] value holds the string for x, and the OHLCStrings[1).. OHLCStrings[4] values holds the strings
             for the open, high, low and close values.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DataToolTip.GetOHLCStrings">
            <summary>
             Get the strings used to differentiate the x, open, high, low and close values in the DATA_TOOLTIP_OHLC 
             tooltip type. 
            </summary>	
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataToolTip.HitTestThreshold">
            <summary>
              A data point must be within a threshold distance of the test point, in DEV_POS coordinates  
              in order for it to be considered a hit. This method sets that value. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataToolTip.TextTemplate">
            <summary>
             Set/Get the tootip text template. It specifies the data point justification of the  tooltip, 
             and the text font. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataToolTip.XValueTemplate">
            <summary>
             Set/Get the tootip x-value template. It specifies the numeric format used to display the x-value  in the 
             tooltip. You can pass in either a NumericLabel object, or a TimeLabel object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataToolTip.YValueTemplate">
            <summary>
             Sets the tootip y-value template. It specifies the numeric format used to display the y-value  
             in the tooltip. You can pass in either a NumericLabel object, or a TimeLabel object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataToolTip.ToolTipSymbol">
            <summary>
             Sets the tootip symbol used to highlight the tooltip data point. It specifies the  symbol style, 
             size and color. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataToolTip.DataToolTipFormat">
            <summary>
             Set/Get the format of the tooltip display. Use one of the data tooltip constants:  DATA_TOOLTIP_CUSTOM, 
             DATA_TOOLTIP_X, DATA_TOOLTIP_Y, DATA_TOOLTIP_XY_ONELINE, DATA_TOOLTIP_TWOLINE. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataToolTip.OHLCStrings">
            <summary>
             Set/Get the strings used to differentiate the x, open, high, low and close values in the DATA_TOOLTIP_OHLC 
             tooltip type. 
             The OHLCStrings[0] value holds the string for x, and the OHLCStrings[1).. OHLCStrings[4] values 
             holds the strings for the open, high, low and close values.
            </summary>	
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DataToolTip.TooltipActive">
            <summary>
             Set/Get if the tooltip is current active (displayed)
            </summary>	
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Dimension">
            <summary>
              This class is an implementation of the Dimension class that uses  doubles instead of integers for data storage.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Dimension.width">
            <summary>
             Width
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Dimension.height">
            <summary>
             Height
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Dimension.Copy(com.quinncurtis.chart2dnet.Dimension)">
            <summary>
              Copies the source object. 
            </summary>
            <param name="source"> The source object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Dimension.Clone">
            <summary>
             Returns an object that is a clone of this Dimension object. 
            </summary>
            <returns> Returns a clone of this Dimension object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Dimension.#ctor">
            <summary>
             Default constructor.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Dimension.#ctor(com.quinncurtis.chart2dnet.Dimension)">
            <summary>
              Creates an instance of <code>Dimension</code> whose width  and height are the same as for 
              the specified dimension. 
            </summary>
            <param name="d"> the specified dimension for the  <code>width</code> and  <code>height</code> values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Dimension.#ctor(System.Double,System.Double)">
            <summary>
              Constructs an Dimension and initializes it to the specified width and  specified height. 
            </summary>
            <param name="w"> the specified width dimension </param>
            <param name="h"> the specified height dimension</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Dimension.GetWidth">
            <summary>
              Returns the width of this dimension.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Dimension.GetHeight">
            <summary>
              Returns the height of this dimension.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Dimension.SetSize(System.Double,System.Double)">
            <summary>
              Set the size of this Dimension object to the specified width  and height. 
            </summary>
            <param name="w"> the new width for the Dimension object </param>
            <param name="h"> the new height for the Dimension object</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Dimension.GetSize">
            <summary>
              Gets the size of this <code>Dimension</code> object.  This method is included for completeness, to 
              parallel the  <code>getSize</code> method defined by <code>Component</code>. 
            </summary>
            <returns> the size of this dimension, a new instance of  <code>Dimension</code> with the same width and height. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.Dimension.SetSize(System.Double,System.Double)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Dimension.SetSize(com.quinncurtis.chart2dnet.Dimension)">
            <summary>
              Set the size of this <code>Dimension</code> object to the specified size.  This method is included 
              for completeness, to parallel the  <code>setSize</code> method defined by <code>Component</code>. 
            </summary>
            <param name="d"> the new size for this <code>Dimension</code> object. </param>
            <see cref="M:com.quinncurtis.chart2dnet.Dimension.GetSize"/>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Dimension.Height">
            <summary>
              Set/Get the height of this dimension.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Dimension.Width">
            <summary>
              Set/Get the width of this dimension.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.DoubleArray">
            <summary>
            Summary description for DoubleArray. It is a improved version of the standard Array
            type because it allows automatic and dynamic resizing of the array. The array has a Length 
            property that specifies the number of elements in the array, and a MaxCapacity property that 
            specifies the size of the internal Array buffer. The internal buffer can be sized much larger than
            the Length property, allowing the array to grow in length without forcing a time consuming
            reallocation and the subsequent copying of all of the data values. Not really important if you are dealing 
            with 10 or 20 element arrays, but very important if you have 1,000,000 element arrays.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DoubleArray.minimumMaxCapacity">
            <summary>
             The minimum allowable size of the dataBuffer.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DoubleArray.dataBuffer">
            <summary>
             The data buffer holding the array of data values.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DoubleArray.maxCapacity">
            <summary>
             The current allocated size of the dataBuffer. It is greater than or equal to the length property.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DoubleArray.length">
            <summary>
             The current number of used elements in the dataBuffer. It is less than or equal to maxCapacity.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.CopyArray(com.quinncurtis.chart2dnet.DoubleArray,System.Int32,com.quinncurtis.chart2dnet.DoubleArray,System.Int32,System.Int32)">
            <summary>
              Static routine copies all or part of one array to another. 
            </summary>
            <param name="source"> The source array.</param>
            <param name="sourceoffset"> The index to start copying from in the source array.</param>
            <param name="dest"> The destination array.</param>
            <param name="destoffset"> The index to start copying to in the destination array.</param>
            <param name="count"> The number of array elements to copy.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.#ctor">
            <summary>
              Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.#ctor(System.Int32)">
            <summary>
              Constructor creates an array of Length n, initialized to zero. 
            </summary>
            <param name="n"> The array is sized to n elements.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.#ctor(System.Double[],System.Int32)">
            <summary>
              Constructor initializes the array using the specified data values. 
              The number of elements of the array is set to the Length of the initializing array,
              while the internal buffer used to hold the data is sized to maxcap.
            </summary>
            <param name="x"> The initializing data values.</param>
            <param name="maxcap"> The internal buffer holding the data values is sized to the value of maxcap.
                If the number of datavalues exceeds the maxcap limit, the size of maxcap is automatically doubled.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.#ctor(System.Double[])">
            <summary>
              Constructor initializes the array using the specified data values. 
              The number of elements of the array is set to the Length of the source array,
              and the internal buffer used to hold the data is set to the same size.
            </summary>
            <param name="x"> The initializing data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.Copy(com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
              Copies the source array to the current instance. 
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.NDCopy(com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
              Non-Destructive copy does not reallocate buffers, limits copy to the number of elements in the smaller of 
              two arrays, the source or the current instance.
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the current instance to the destination array. 
            </summary>
            <param name="dest"> The destination array object.</param>
            <param name="index"> The index to start copying to in the destination array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.Clone">
            <summary>
             Returns an object that is a clone of this array object. 
            </summary>
            <returns> Returns a clone of this array object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.ResizeCapacity(System.Int32)">
            <summary>
              This method reallocates the internal data buffer to the new capacity value.
              The data is preserved. If the new buffer size is less than the number of data values
              in the old array, the array is truncated. If the new buffer size is greater than the number
              of data values, the Length property remains the same, but the MaxCapacity property is changed
              and the internal buffer reallocated to the new maxcapcity size. The minimum size for the
              capacity value is clamped to 8;
            </summary>
            <param name="newcapacity"> The internal buffer holding the data values is sized to the new value of new capacity.
             The Length property remains unchanged if the new buffer size is larger than the old buffer size, only the 
             buffer size is changed, not the current number of elements in the array.   </param>param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.Reset">
            <summary>
             Resets the Length property to 0, the MaxCapacity property to 16 and reallocates
             the internal buffer to MaxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.Clear">
            <summary>
             Resets (same as Clear) the Length property to 0, the MaxCapacity property to 16 and reallocates
             the internal buffer to MaxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.ShiftLeft(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the left. If you have a 10 element array and
              shift the array 2 elements to the left, element 7 ends up with the value originally in element
              9, element 6 ends up with the value originally in element 8, etc.
            </summary>
            <param name="shiftcount"> The elements are shifted to left by shiftcount elements.</param>
            <param name="fillzero"> Set to true if elements to the right of the final shift point are to be set to zero. 
            In the example above this would apply to elements 8 and 9 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.ShiftRight(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the right. If you have a 10 element array and
              shift the array 2 elements to the right, element 2 ends up with the value originally in element
              0, element 3 ends up with the value originally in element 1, etc.
            </summary>
            <param name="shiftcount"> The elements are shifted to right by shiftcount elements.</param>
            <param name="fillzero"> Set to true if elements to the left of the final shift point are to be set to zero. 
             In the example above this would apply to elements 0 and 1 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.ShiftLeftThenResize(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the left. If you have a 10 element array and
              shift the array 2 elements to the left, element 7 ends up with the value originally in element
              9, element 6 ends up with the value originally in element 8, etc. The array is resized to a size
              equal to the original array size minus the shift count (Length - shiftcount).
            </summary>
            <param name="shiftcount"> The elements are shifted to left by shiftcount elements.</param>
            <param name="trim"> Set to true if the MaxCapacity property is to be set equal to Length property,
             sizing the internal data buffers to the exact array size.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.Insert(System.Int32,System.Double)">
            <summary>
             Inserts an element in the array at the specified index, increasing the length of the array by one. If
             the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled and the internal buffer
             resized accordingly.
            </summary>
            <param name="index"> The array element where the new value is inserted.</param>
            <param name="r"> The new value to insert.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.RemoveAt(System.Int32)">
            <summary>
             Removes an element at the specified index, decreasing the length of the array by one. The size
             of the internal buffer remains unchanged.
            </summary>
            <param name="index"> The array element that is deleted.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.Delete(System.Int32)">
            <summary>
             Removes an element at the specified index, decreasing the length of the array by one. The size
             of the internal buffer remains unchanged.
            </summary>
            <param name="index"> The array element that is deleted.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.SetLength(System.Int32)">
            <summary>
             Resizes the array to the specified length. The MaxCapacity property is iteratively doubled until
             it exceeds the new length, then internal buffer are resized to the new MaxCapacity value.
            </summary>
            <param name="newlength"> The array is resized to the new length.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.TrimToSize">
            <summary>
             The MaxCapacity property is set equal to the Length property of the array
             and the internal buffer are resized to the new MaxCapacity value. This leaves no "slack"
             in the internal buffer that allows the array length to grow without forcing a reallocation
             and copy of all data elements should the length of the array be increased.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.Resize(System.Int32)">
            <summary>
             The length of the arrays is set to the specified value. If the new length is greater than the current 
             Length property value, but less or equal to the MaxCapacity property value, the Length property is increased to
             reflect the new value. If the new length is greater than MaxCapacity, the MaxCapacity value is
             doubled until it is greater than the new length, and the internal buffer increased accordingly.
             New, uninitialized array elements are set to zero.
            </summary>
            <param name="newlength"> The array is resized to the new length.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.Add(System.Double)">
            <summary>
             Adds a new element at the end of the array, increasing the length of the array by one. If
             the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled and the internal buffer
             resized accordingly.
            </summary>
            <param name="r"> The new value to add at the end of the array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.AddRange(System.Double[])">
            <summary>
             Adds a array of new values at the end of the array, increasing the length of the array by the length of the 
             source array. If the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled 
             and the internal buffer resized accordingly.
            </summary>
            <param name="x"> An array of new values that are added to the end of the array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.SetElements(System.Double[])">
            <summary>
             Initializes the elements of the array, starting at element 0. The size of the array is set
             equal to the length of the source array. If the source array is
             larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.SetElements(System.Double[],System.Int32)">
            <summary>
             Initializes the elements of the array, starting at element 0 and continuing for count elements.
              The size of the array is set equal to the length of the source array, or the count, whichever is smaller. 
              If the new length larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array, or the count value, whichever is smaller.</param>
            <param name="count"> Specifies the number of elements to initialize.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.SetElements(com.quinncurtis.chart2dnet.DoubleArray,System.Int32)">
            <summary>
             Initializes the elements of the array, starting at element 0 and continuing for count elements.
              The size of the array is set equal to the length of the source array, or the count, whichever is smaller. 
              If the new length larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array, or the count value, whichever is smaller.</param>
            <param name="count"> Specifies the number of elements to initialize.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.SetElements(com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
             Initializes the elements of the array, starting at element 0. The size of the array is set
             equal to the length of the source array. If the source array is
             larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.SetElement(System.Int32,System.Double)">
            <summary>
             Set the value of a single element in the array.
            </summary>
            <param name="index"> The index to set in the array.</param>
            <param name="r"> The array element at index is set to the value r.</param>///
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.GetElement(System.Int32)">
            <summary>
             Get the value of a single element in the array.
            </summary>
            <param name="index"> The array index.</param>
             <returns> Returns the value of the array at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.GetElements">
            <summary>
             Returns a copy of the data values in the array sized to the number of elements.
            </summary>
             <returns> Returns a copy of the data values in the array sized to the number of elements.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray.GetDataBuffer">
            <summary>
             Returns a reference to the Array object that represents internal data buffer. It may be sized to the
             maxCapacity value, instead of the number of items in the buffer. This reference will remain valid only 
             as long as the array is not forced to resize, forcing a reallocation of the internal buffer.
            </summary>
             <returns> Returns a reference to the Array object that represents the internal data buffer.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DoubleArray.Length">
            <summary>
              This accessor returns the value of the length field which is number of  data points in a simple dataset, 
              or the number of x-values in a group dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DoubleArray.MaxCapacity">
            <summary>
              This accessor returns the value of the maxCapacity field. The MaxCapacity property represents the 
              allocated size  of the internal Array object used as the data buffer for the array. It is always 
              greater than or equal to the Length property.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DoubleArray.DataBuffer">
            <summary>
             Returns a reference to the Array object that represents internal data buffer. This reference will remain 
             valid only as long as the array is not forced to resize, forcing a reallocation of the internal buffer.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DoubleArray.Item(System.Int32)">
            <summary>
              This accessor is the indexer for the class and get/sets the value of an individual element in the array. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.DoubleArray2D">
            <summary>
            Summary description for DoubleArray2D. It is a improved version of the standard Array
            type because it allows automatic and dynamic resizing of a 2D array. The array has a NumColumns 
            property that specifies the number of columns in the 2D array, and a NumRows properties the specifies
            the number of rows in the 2D array. Internally the data buffer is setup as an Array of DoubleArray
            objects. The rowCapacity property  
            specifies the size of the internal Array buffer that holds a collection of DoubleArray
            objects. The internal buffer can be sized much larger than
            the NumRows property, allowing the array to grow in without forcing a time consuming
            reallocation and the subsequent copying of all of the data values. 
            
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DoubleArray2D.minimumRowCapacity">
            <summary>
             The minimum allowable row capacity the dataBuffer.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DoubleArray2D.dataBuffer">
            <summary>
             The data buffer holding the array of data values. Implemented as an array of DoubleArray objects
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DoubleArray2D.rowCapacity">
            <summary>
             The current allocated size of the number of elements (rows) in the dataBuffer array. It is greater than 
             or equal to the numberRows property.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.DoubleArray2D.numberRows">
            <summary>
             The current number of used elements (rows) in the dataBuffer array. It is less than or equal to rowCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.CopyArray(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
              Static routine copies between two Array objects of different dimensions. May or may not be safe.
            </summary>
            <param name="source"> The source Array object.</param>
            <param name="sourceoffset"> The source offset to start copying from in the source array.</param>
            <param name="dest"> The destination Array object.</param>
            <param name="destoffset"> The destination offset to start copying to in the destination array.</param>
            <param name="count"> The number of array elements to copy.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.CopyArray(com.quinncurtis.chart2dnet.DoubleArray2D,System.Int32,System.Int32,com.quinncurtis.chart2dnet.DoubleArray,System.Int32,System.Int32)">
            <summary>
              Static routine copies a row of a DoubleArray2D to a DoubleArray. 
            </summary>
            <param name="source"> The source DoubleArray2D array.</param>
            <param name="sourcerow"> The row of the source array to copy from. </param>
            <param name="sourceoffset"> The column offset to start copying from in the source array.</param>
            <param name="dest"> The destination DoubleArray array.</param>
            <param name="destoffset"> The index to start copying to in the destination array.</param>
            <param name="count"> The number of array elements to copy.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.CopyArray(com.quinncurtis.chart2dnet.DoubleArray,System.Int32,com.quinncurtis.chart2dnet.DoubleArray2D,System.Int32,System.Int32,System.Int32)">
            <summary>
              Static routine copies a row of a DoubleArray2D to a DoubleArray. 
            </summary>
            <param name="source"> The source DoubleArray2D array.</param>
            <param name="sourceoffset"> The column offset to start copying from in the source array.</param>
            <param name="dest"> The destination DoubleArray array.</param>
            <param name="destrow"> The row of the destination array to copy to.</param>
            <param name="destoffset"> The index to start copying to in the destination array.</param>
            <param name="count"> The number of array elements to copy.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.CopyArray(com.quinncurtis.chart2dnet.DoubleArray2D,System.Int32,System.Int32,com.quinncurtis.chart2dnet.DoubleArray2D,System.Int32,System.Int32,System.Int32)">
            <summary>
              Static routine copies a row of a DoubleArray2D to a row of another DoubleArray2D. 
            </summary>
            <param name="source"> The source DoubleArray2D array.</param>
            <param name="sourcerow"> The row of the source array to copy from. </param>
            <param name="sourceoffset"> The column offset to start copying from in the source array.</param>
            <param name="dest"> The destination DoubleArray array.</param>
            <param name="destrow"> The row of the destination array to copy to. </param>
            <param name="destoffset"> The index to start copying to in the destination array.</param>
            <param name="count"> The number of array elements to copy.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.#ctor">
            <summary>
              Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructor creates an array of Length n, initialized to zero. 
            </summary>
            <param name="rows"> The number of rows for the 2D array.</param>
            <param name="columns"> The number of columns for the 2D array.</param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.#ctor(System.Double[0:,0:],System.Int32)">
            <summary>
              Constructor initializes the array using the specified data values. 
              The dimensions of the array is set to the dimensions of the initializing array.
              Each row of the array is represented by an DoubleArray object. 
            </summary>
            <param name="rc"> The initializing data values.</param>
            <param name="colmaxcap"> The rowCapacity  property of each rows DoubleArray object is set to this value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.#ctor(System.Double[0:,0:])">
            <summary>
              Constructor initializes the array using the specified data values. 
              The dimensions of the array is set to the dimensions of the initializing array.
              Each row of the array is represented by an DoubleArray object. 
            </summary>
            <param name="rc"> The initializing data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.Copy(com.quinncurtis.chart2dnet.DoubleArray2D)">
            <summary>
              Copies the source array. 
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.Clone">
            <summary>
             Returns an object that is a clone of this array object. 
            </summary>
            <returns> Returns a clone of this array object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.ResizeColumnCapacity(System.Int32)">
            <summary>
              This method reallocates the internal column data buffers, where each row of the array is
              represented by an ArrayDouble object, to the new column capacity value.
            </summary>
            <param name="newcolcapacity"> The internal DoubleArray objects are resized to the new capacity.
             The NumColumns property remains unchanged if the new capacity is larger than the old capacity, only the 
             buffer size is changed, not the current number of columns in the array.   </param>param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.ResizeRowCapacity(System.Int32)">
            <summary>
              This method reallocates the size of the internal row data buffers.
            </summary>
            <param name="newcapacity"> This method reallocates the size of the internal row data buffer.
             The NumRows property remains unchanged if the new capacity is larger than the old capacity, only the 
             row buffer size is changed, not the current number of rows in the array.   </param>param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.ResizeNumColumns(System.Int32)">
            <summary>
             Resizes the number of columns in the 2D array. The columns MaxCapacity property for each rows data is 
             iteratively doubled until
             it exceeds the new length. Each row of the 2D array is resized to the new MaxCapacity value.
            </summary>
            <param name="newnumcols"> The number of columns in the array is resized to this value.</param>
             <returns> Returns the new value of the NumColumns property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.ResizeNumRows(System.Int32)">
            <summary>
             Resizes the number of rows in the 2D array. The RowCapacity property is iteratively doubled until
             it exceeds the new size, the internal row buffer buffer is resized to the new RowCapacity value.
            </summary>
            <param name="newlength"> The number of rows in the array is resized to this value.</param>
             <returns> Returns the new value of the NumRows property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.Reset">
            <summary>
             Resets the NumColumns and NumRows properties to 0. Each rows MaxCapacity property
             is  set to 16. The RowCapacity property is also set to 16. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.Clear">
            <summary>
             Resets the NumColumns and NumRows properties to 0. Each rows MaxCapacity property
             is  set to 16. The RowCapacity property is also set to 16. 		
             </summary>summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.ShiftLeft(System.Int32,System.Boolean)">
            <summary>
              Shifts the column elements of each row of the array to the left. If you have a 2D array with 10 columns  and
              shift the array 2 columns to the left, column 7 ends up with the values originally in column
              9, column 6 ends up with the value originally in column 8, etc.
            </summary>
            <param name="shiftcount"> The columns are shifted to left by shiftcount elements.</param>
            <param name="fillzero"> Set to true if columns to the right of the final shift point are to be set to zero. 
            In the example above this would apply to columns 8 and 9 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.ShiftRight(System.Int32,System.Boolean)">
            <summary>
              Shifts the column elements of each row of the array to the right. If you have a 2D array with 10 columns and
              shift the array 2 elements to the right, column 2 ends up with the value originally in column
              0, column 3 ends up with the value originally in column 1, etc.
            </summary>
            <param name="shiftcount"> The columns are shifted to right by shiftcount elements.</param>
            <param name="fillzero"> Set to true if columns to the left of the final shift point are to be set to zero. 
            In the example above this would apply to columns 0 and 1 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.ShiftLeftThenResize(System.Int32,System.Boolean)">
            <summary>
              Shifts the column elements of each row of the array to the left. If you have a 2D array with 10 columns  and
              shift the array 2 columns to the left, column 7 ends up with the values originally in column
              9, column 6 ends up with the value originally in column 8, etc. The NumColumns property is resized to
              equal to the original NumColumns value minus the shift count (NumColumns - shiftcount).
            </summary>
            <param name="shiftcount"> The columns are shifted to left by shiftcount elements.</param>
            <param name="trim"> Set to true if each rows MaxCapacity property is to be set equal to that rows Length 
             (or NumColumns) property, sizing the internal data buffers to the exact array size.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.InsertColumn(System.Int32,System.Double[])">
            <summary>
             Inserts a column in the array at the specified column index, increasing the NumColumns property of the 
             array by one. If the MaxCapacity property for that row is exceeded the MaxCapacity property is 
             automatically doubled and the internal buffer resized accordingly.
            </summary>
            <param name="index"> The array column where the new values are inserted.</param>
            <param name="r"> An array (size NumRows) of new values to insert.</param>
             <returns> Returns the new value of the NumColumns property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.InsertColumn(System.Int32,com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
             Inserts a column in the array at the specified column index, increasing the NumColumns property of the 
             array by one. If the MaxCapacity property for that row is exceeded the MaxCapacity property is 
             automatically doubled and the internal buffer resized accordingly.
            </summary>
            <param name="index"> The array column where the new values are inserted.</param>
            <param name="r"> An array (size NumRows) of new values to insert.</param>
             <returns> Returns the new value of the NumColumns property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.RemoveColumnAt(System.Int32)">
            <summary>
             Removes a column in the array at the specified column index, decreasing the NumColumns property 
             of the array by one. 
            </summary>
            <param name="index"> The array column to be deleted.</param>
             <returns> Returns the new value of the NumColumns property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.DeleteColumn(System.Int32)">
            <summary>
             Removes a column in the array at the specified column index, decreasing the NumColumns property of 
             the array by one. 
            </summary>
            <param name="index"> The array column to be deleted.</param>
             <returns> Returns the new value of the NumColumns property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.RemoveRowAt(System.Int32)">
            <summary>
             Removes a row in the array at the specified row index, decreasing the NumRows property of the array by one. 
            </summary>
            <param name="index"> The array row to be deleted.</param>
             <returns> Returns the new value of the NumRows property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.DeleteRow(System.Int32)">
            <summary>
             Removes a row in the array at the specified row index, decreasing the NumRows property of the array by one. 
            </summary>
            <param name="index"> The array row to be deleted.</param>
             <returns> Returns the new value of the NumRows property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.TrimToSize">
            <summary>
             The RowCapacity property is set equal to the NumRows property of the array
             and the internal buffer is resized to the new RowCapacity value. The DoubleArray object
             used as the data buffer for each row is also "trimmed". This leaves no "slack"
             in the internal buffers that allow the array to grow without forcing a reallocation
             and copy of all data elements should the size of the array be increased.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.AddColumn(System.Double[])">
            <summary>
             Adds a new column of data to the end of the array, increasing the number of columns by one. If
             the rows DoubleArray.MaxCapacity property is exceeded the MaxCapacity property is automatically doubled 
             and the internal buffer resized accordingly.
            </summary>
            <param name="r"> A new column of data, size[NumRows], added at the end of the array.</param>
             <returns> Returns the new value of the NumColumns property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.AddColumn(com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
             Adds a new column of data to the end of the array, increasing the number of columns by one. If
             the rows DoubleArray.MaxCapacity property is exceeded the MaxCapacity property is automatically doubled 
             and the internal buffer resized accordingly.
            </summary>
            <param name="r"> A new column of data, size[NumRows], added at the end of the array.</param>
             <returns> Returns the new value of the NumColumns property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.AddRow(System.Double[])">
            <summary>
             Adds a new row of data to the end of the array, increasing the number of rows by one. If
             the RowCapacity property is exceeded the RowCapacity property is automatically increased by one and the 
             internal buffer resized accordingly.
            </summary>
            <param name="r"> A new row of data, size[NumColumns], added at the end of the array.</param>
             <returns> Returns the new value of the NumRows property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.AddRow(com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
             Adds a new row of data to the end of the array, increasing the number of rows by one. If
             the RowCapacity property is exceeded the RowCapacity property is automatically increased by one and the 
             internal buffer resized accordingly.
            </summary>
            <param name="r"> A new row of data, size[NumColumns], added at the end of the array.</param>
             <returns> Returns the new value of the NumRows property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.InsertRow(System.Int32,System.Double[])">
            <summary>
             Inserts a new row of data at the specified index, increasing the number of rows by one. If
             the RowCapacity property is exceeded the RowCapacity property is automatically increased by one and the 
             internal buffer resized accordingly.
            </summary>
            <param name="index"> Insert the new data at this row index.</param>
            <param name="r"> A new row of data, size[NumColumns], inserted at the specified index.</param>
             <returns> Returns the new value of the NumRows property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.InsertRow(System.Int32,com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
             Inserts a new row of data at the specified index, increasing the number of rows by one. If
             the RowCapacity property is exceeded the RowCapacity property is automatically increased by one and the 
             internal buffer resized accordingly.
            </summary>
            <param name="index"> Insert the new data at this row index.</param>
            <param name="r"> A new row of data, size[NumColumns], inserted at the specified index.</param>
             <returns> Returns the new value of the NumRows property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.AddColumnRange(System.Double[0:,0:])">
            <summary>
             Adds multiple new columns of data to the end of the array, increasing the number of columns by by the 
             number of columns in the source data array. If the rows DoubleArray.MaxCapacity property is exceeded 
             the MaxCapacity property is automatically doubled and the internal buffer resized accordingly.
            </summary>
            <param name="rc"> A 2D array of new column data, with the number of rows equal to NumRows, 
                              added at the end of the array.</param>
             <returns> Returns the new value of the NumColumns property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.GetNumRows">
            <summary>
             Returns the current number of rows in the array.
            </summary>
             <returns> Returns the new value of the NumRows property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.GetNumColumns">
            <summary>
             Returns the current number of columns in the array. The current number of columns is
             equal to the DoubleArray.Length property for each DoubleArray object storing the data
             for each row of the array. Since the array
             must be rectangular, every row in the array must have the same length.
            </summary>
             <returns> Returns the new value of the NumColumns property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.GetLength(System.Int32)">
            <summary>
             Returns the size for each dimension of the array.
            </summary>
            <param name="dim"> A value of 0 returns the number of rows in the array, a value of 1 returns the 
            number of columns in the array.</param>
             <returns> Returns the size of the specified dimension.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.SetElement(System.Int32,System.Int32,System.Double)">
            <summary>
             Sets the value of a specific element in the 2D array.
            </summary>
            <param name="row"> The row index </param>
            <param name="col"> The column index </param>///
            <param name="r"> The value to assign the specified array element. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.SetRow(System.Int32,System.Double[])">
            <summary>
             Sets all of the column values in the specified row.
            </summary>
            <param name="row"> The row index </param>
            <param name="source"> The source array, size[NumColumns], to copy to the specified row. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.SetRow(System.Int32,com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
             Sets all of the column values in the specified row.
            </summary>
            <param name="row"> The row index </param>
            <param name="source"> The source array, size[NumColumns], to copy to the specified row. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.GetRow(System.Int32)">
            <summary>
             Returns all of the column values in the specified row.
            </summary>
            <param name="row"> The row index </param>
            <returns> Returns all of the column values in the specified row. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.GetRowObject(System.Int32)">
            <summary>
             Returns a reference to the DoubleArray object that holds the data for the given row.
            </summary>
            <param name="row"> The row index </param>
            <returns> Returns a reference to the DoubleArray object that holds the data for the given row. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.SetColumn(System.Int32,System.Double[])">
            <summary>
             Sets all of the row values in the specified column.
            </summary>
            <param name="column"> The column index </param>
            <param name="source"> The source array, size[NumRows], to copy to the specified column. </param>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.SetColumn(System.Int32,com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
             Sets all of the row values in the specified column.
            </summary>
            <param name="column"> The column index </param>
            <param name="source"> The source array, size[NumRows], to copy to the specified column. </param>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.GetColumn(System.Int32)">
            <summary>
             Returns all of the row values in the specified column.
            </summary>
            <param name="column"> The column index </param>
            <returns> Returns all of the row values in the specified column. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.GetElement(System.Int32,System.Int32)">
            <summary>
             Returns the value of the array element at the specified row and column.
            </summary>
            <param name="row"> The row index </param>
            <param name="col"> The column index </param>
            <returns> Returns the value of the array element at the specified row and column. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.SetElements(System.Double[0:,0:])">
            <summary>
             Sets the elements of the array. The array is resized to match the size of the source array.
            </summary>
            <param name="source"> The source 2D Array object. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.SetElements(com.quinncurtis.chart2dnet.DoubleArray2D)">
            <summary>
             Sets the elements of the array. The array is resized to match the size of the source array.
            </summary>
            <param name="source"> The source 2D Array object. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DoubleArray2D.GetElements">
            <summary>
             Returns the elements of the array as an Array object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DoubleArray2D.Length">
            <summary>
              This method returns the number of elements in the array, NumRows * NumColumns. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DoubleArray2D.NumRows">
            <summary>
              Returns the number of rows in the array. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DoubleArray2D.NumColumns">
            <summary>
              Returns the number of columns in the array. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DoubleArray2D.Item(System.Int32)">
            <summary>
              This accessor is the indexer for the class and returns a reference to the DoubleArray object
              representing a row in the array. Individual elements can be addressed using the following
              double bracket syntax:   thearray[row][col] = newvalue;
                         
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.DoubleArray2D.DataBuffer">
            <summary>
              This method returns a reference to the internal dataBuffer.  This reference is an Array of 
              DoubleArray objects.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.DummyObj">
            <summary>
            Summary description for DummyObj. This object type is used as a place holder in ArrayLists that
            hold arrays of GraphObj objects.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DummyObj.#ctor">
            <summary>
              Initializes default values for the axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DummyObj.ErrorCheck(System.Int32)">
            <summary>
              Checks the current object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DummyObj.Copy(com.quinncurtis.chart2dnet.DummyObj)">
            <summary>
              Copies the source axis. 
            </summary>
            <param name="source"> The source axis object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DummyObj.Clone">
            <summary>
             Returns an object that is a clone of this DummyObj object. 
            </summary>
            <returns> Returns a clone of this DummyObj object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DummyObj.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.DummyObj.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ErrorBarPlot">
            <summary>
              The ErrorBarPlot class extends the GroupPlot class and  displays error bars. Error bars are two lines 
              that can be positioned around  a data point to signify the statistical error associated with the data point  
              The group size of the dataset must be two. The X,Y[0] values of the group dataset  represent the xy position 
              of the first error bar lines, the X,Y[1] values  of the group dataset represent the xy position of the 
              second error bar lines.  The error bar lines are center on the X value with a width of barWidth.  
              The error bar lines can be optionally connected with a line. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ErrorBarPlot.errorBarLineFlag">
            <summary>
             TRUE connects the error bars of an error bar object with a line.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.#ctor">
            <summary>
             The default ErrorBarPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the ErrorBarPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.InitDefaults">
            <summary>
              Initializes default values for the ErrorBarPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.Copy(com.quinncurtis.chart2dnet.ErrorBarPlot)">
            <summary>
              Copies the source ErrorBarPlot object. 
            </summary>
            <param name="source"> The source ErrorBarPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.Clone">
            <summary>
             Returns an object that is a clone of this ErrorBarPlot object. 
            </summary>
            <returns> Returns a clone of this ErrorBarPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new ErrorBarPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new ErrorBarPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new ErrorBarPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new ErrorBarPlot object. </param>
            <param name="dataset"> The error bar plot will represent the values in this group data set.  
            The group size of the dataset must be two. The X,Y[0] values of the group dataset  represent the 
            xy position of the first error bar lines, the X,Y[1] values  of the group dataset represent the xy 
            position of the second error bar lines. </param>
            <param name="rbarwidth"> The width of the error bars. </param>
            <param name="attrib"> Specifies the attributes (line color and line style) for the error bars.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.InitErrorBarPlot(com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of an error bar plot.  A error bar plot plots a pair of y-values in a group as two 
              horizontal lines, suitable  for bracketing a data point with error limits. The number of groups in an 
              error bar plot  is restricted to two. 
            </summary>
            <param name="dataset"> The error bar plot will represent the values in this group data set.  
            The group size of the dataset must be two. The X,Y[0] values of the group dataset  represent the 
            xy position of the first error bar lines, the X,Y[1] values  of the group dataset represent the 
            xy position of the second error bar lines.  </param>
            <param name="rbarwidth"> The width of the error bar lines in units of the independent axis. </param>
            <param name="attrib"> Specifies the attributes (line color and line style) for the error bars.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.DrawErrorBarPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws an error bar plot using the current error bar plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The error bar plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the group plot object  is drawn in 
              the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.SetErrorBarLineFlag(System.Boolean)">
            <summary>
              Specifies whether error bar lines have a connecting line. 
            </summary>
            <param name="berrorbarline"> Set to true and each pair of error bar lines have a connecting  line.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.GetErrorBarLineFlag">
            <summary>
              Returns whether error bar lines have a connecting line. 
            </summary>
            <returns> Returns true if error bars lines have a connecting line.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorBarPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects one of the error bar lines. 
            </summary>
            <param name="testpoint"> The test point. </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.ErrorBarPlot.ErrorBarLineFlag">
            <summary>
              Set/Get the connecting line flag for error bars.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ErrorMessages">
            <summary>
              This class is holds the error message strings displayed by the software when *an error is thrown.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ErrorMessages.errorStrings">
            <summary>
             The array that holds the collection of error records. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorMessages.Clone">
            <summary>
             Returns an object that is a clone of this  object. 
            </summary>
            <returns> Returns a clone of this object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorMessages.InitDefaults">
            <summary>
              Initialize default values.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorMessages.#ctor">
            <summary>
              Default constructor.
            </summary>	    
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorMessages.GetRecord(System.Int32)">
            <summary>
             Returns the error record associated with an error number. 
            </summary>
            <param name="errorcode"> The number of the error. </param>
            <returns> Returns an error record associated with an error number.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorMessages.GetErrorMessage(System.Int32)">
            <summary>
             Returns the error message associated with an error number. 
            </summary>
            <param name="errorcode"> The number of the error. </param>
            <returns> Returns the error message associated with an error number.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorMessages.SetErrorMessage(System.Int32,System.String)">
            <summary>
             Sets the error message associated with an error number. 
            </summary>
            <param name="errorcode"> The number of the error. </param>
            <param name="errmessage"> Sets the error message associated with an error number.</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.ErrorMessages.ErrorRecord">
            <summary>
             A class for holding error information. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ErrorMessages.ErrorRecord.errorNumber">
            <summary>
             The number of the error. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ErrorMessages.ErrorRecord.errorConstantstring">
            <summary>
             A string representing the error value. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.ErrorMessages.ErrorRecord.errorMessage">
            <summary>
             An error message associated with the error. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.ErrorMessages.ErrorRecord.#ctor(System.String,System.String,System.Int32)">
            <summary>
             Constructor. 
            </summary>
            <param name="errmess"> The error message associated with this error number. </param>
            <param name="errconstantstring"> A string presenting the error value. </param>
            <param name="errnum"> The number of the error. </param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.FindObj">
            <summary>
              This class extends the MouseListener class,  providing additional methods that can be selectively used  
              to determine what graphical object is nearest the mouse  cursor.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.FindObj.selectedObj">
            <summary>
             Specifies the currently selected chart object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.FindObj.classToFind">
            <summary>
             Specifies the base class that selectively restricts what objects  are considered in the search for object 
             under the mouse cursor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.#ctor">
            <summary>
              This constructor creates a new FindObj object using the specified  component. It restricts the search to 
              objects that have the specified  base class. This way the search can be restricted to Axis objects,  
              or Plot objects, or ChartText objects, etc. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.#ctor(com.quinncurtis.chart2dnet.ChartView,System.String)">
            <summary>
              This constructor creates a new FindObj object using the specified  component. It restricts the search to 
              objects that have the specified  base class. This way the search can be restricted to Axis objects,  
              or Plot objects, or ChartText objects, etc. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="classname"> The fully qualified name of the base class that the object search  is limited to, 
            for example: "GraphObj".</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.#ctor(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
              This constructor creates a new FindObj object using the specified  component. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.ErrorCheck(System.Int32)">
            <summary>
              Checks the FindObj object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.Copy(com.quinncurtis.chart2dnet.FindObj)">
            <summary>
              Copies the source ErrorBarPlot object. 
            </summary>
            <param name="source"> The source ErrorBarPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.Clone">
            <summary>
             Returns an object that is a clone of this FindObj object. 
            </summary>
            <returns> Returns a clone of this FindObj object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseDragged event listener for this object. It causes the current  find operation object to track
               the mouse cursor. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mousePressed event listener for this object. Once the specified mouse  button is pressed, the 
              find operation starts. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseReleased event listener for this object. Once the specified mouse  button is pressed, 
              then released, the find operation stops. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.OnClick(System.EventArgs)">
            <summary>
              The OnClick event listener for this object. Once the specified mouse  button is pressed, 
              then released, the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.OnDoubleClick(System.EventArgs)">
            <summary>
              The OnDoubleClick event listener for this object. Once the specified mouse  button is pressed, 
              then released, the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.GetSelectedObject">
            <summary>
              Returns the graph object intersecting the cursor. 
            </summary>
            <returns> Returns the graph object intersecting the cursor, null otherwise.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.SetClassToFind(System.String)">
            <summary>
             Specifies the base class that selectively restricts what objects  are considered in the search for 
             object under the mouse cursor. 
            </summary>
            <param name="findclass"> A string that sets the base class that selectively restricts what objects  
            are considered in the search for object under the mouse cursor. For example:  "GraphObj".</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FindObj.GetClassToFind">
            <summary>
             Returns the string representation of the base class that selectively restricts what objects  are 
             considered in the search for object under the mouse cursor. 
            </summary>
            <returns> Returns the base class that selectively restricts what objects  are considered in the search 
            for object under the mouse cursor.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.FindObj.ClassToFind">
            <summary>
             Get/Set the string representation of the base class that selectively restricts what objects  
             are considered in the search for object under the mouse cursor. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.FloatingBarPlot">
            <summary>
              The FloatingBarPlot class extends the GroupPlot class and  displays free floating bars in a graph. 
              The bars are free floating because  each bar does not reference a fixed base value, as do the simple 
              bar plots,  stacked bar plots and group bar plots. The X,Y[0] values of the group dataset  represent 
              the starting point of the bar, the X,Y[1] values  of the group dataset represent the ending position 
              of the bar.  All bars in a given FloatingBarPlot object have the same width, barWidth. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.#ctor">
            <summary>
             The default FloatingBarPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the plot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.InitDefaults">
            <summary>
              Initializes default values for the FloatingBarPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.Copy(com.quinncurtis.chart2dnet.FloatingBarPlot)">
            <summary>
              Copies the source FloatingBarPlot object. 
            </summary>
            <param name="source"> The source FloatingBarPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.Clone">
            <summary>
             Returns an object that is a clone of this FloatingBarPlot object. 
            </summary>
            <returns> Returns a clone of this FloatingBarPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new FloatingBarPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new FloatingBarPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,System.Int32)">
            <summary>
              This constructor creates a new FloatingBarPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new FloatingBarPlot object. </param>
            <param name="dataset"> The floating bar plot will represent the values in this group data set.  
            The X,Y[0] values of the group dataset represent the starting points of each bar, the X,Y[1] values  
            of the group dataset represent the ending points of each bar. </param>
            <param name="rbarwidth"> The width of the floating bars in units of the independent axis. </param>
            <param name="attrib"> Specifies the attributes (line and fill color) for the floating bars. </param>
            <param name="nbarjust"> Specifies the justification with respect to the independent data value.  Use 
            one of the justification constants: JUSTIFY_MIN, JUSTIFY_CENTER, JUSTIFY_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.InitFloatingBarPlot(com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,System.Int32)">
            <summary>
              Sets the properties of a floating bar plot.  A floating bar plot plots a pair y-values in a group as a 
              bar, with a starting value  equal to the first y-value and an ending value equal to the second y-value.  
              The number of groups in a floating bar plot is restricted to two. 
            </summary>
            <param name="dataset"> The floating bar plot will represent the values in this group data set.  The X,Y[0] 
            values of the group dataset represent the starting points of each bar, the X,Y[1] values  of the group dataset 
            represent the ending points of each bar. </param>
            <param name="rbarwidth"> The width of the floating bars in units of the independent axis. </param>
            <param name="attrib"> Specifies the attributes (line and fill color) for the floating bars. </param>
            <param name="nbarjust"> Specifies the justification with respect to the independent data value.  Use one of 
            the justification constants: JUSTIFY_MIN, JUSTIFY_CENTER, JUSTIFY_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.CalcFloatingBarRect(System.Double,System.Double,System.Double,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
              Calculates the Rectangle2D shape used to draw the floating bar. 
            </summary>
            <param name="x"> The position of the bar in units of the independent axis. </param>
            <param name="start"> The starting position of the bar in units of the dependent axis. </param>
            <param name="stop"> The ending position of the bar in units of the dependent axis. </param>
            <param name="rect"> Returns the shape of the bar as a Rectangle2D object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.DrawFloatingBarPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a floating bar plot using the current floating bar plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The floating bar plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the FloatingBar object  is drawn in 
              the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.FloatingBarPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects one of the objects. 
            </summary>
            <param name="testpoint"> The test point. </param>
            <returns> Returns true if the test point intersects one of the objects. </returns>
            <param name="np"> Nearest point information for data based objects.</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Grid">
            <summary>
              The Grid class manages and displays the grid lines for linear and logarithmic axes.  It is a concrete 
              subclass of the GraphObj class.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Grid.gridType">
            <summary>
             Specifies if the grid aligns with the major tick marks (GRID_MAJOR), the minor tick  marks (GRID_MINOR) 
             or the major and minor tick marks (GRID_ALL) of the reference axis.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Grid.gridAxisType">
            <summary>
             Specifies which axis, stored in the field gridAxes, has the tick marks that
             are used to align the grid lines.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Grid.gridXAxis">
            <summary>
             Holds a reference to the x-axis  used to define the alignment and the extent  of the grid lines.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Grid.gridYAxis">
            <summary>
             Holds a reference to y-axis used to define the alignment and the extent  of the grid lines.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Grid.gridAxis">
            <summary>
             Holds the reference to the axis which has the tick marks used to align the grid lines.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.#ctor">
            <summary>
              The default Grid constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.ErrorCheck(System.Int32)">
            <summary>
              Checks the current grid object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.InitDefaults">
            <summary>
              Initializes default values for the grid.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.SetChartObjScale(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             Sets the reference to the PhysicalCoordinates object that the chart object is placed in.  It overrides 
             the GraphObj version because this is a compound object that  needs to update the Axis objects within. 
            </summary>
            <param name="transform"> A reference to the PhysicalCoordinates object that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.InitGrid(com.quinncurtis.chart2dnet.Axis,com.quinncurtis.chart2dnet.Axis,System.Int32,System.Int32)">
            <summary>
              This method initializes a new Grid object based on the specified  x- and y-axes. 
            </summary>
            <param name="xaxis"> The x-axis associated with the grid. </param>
            <param name="yaxis"> The y-axis associated with the grid. </param>
            <param name="gridaxistype"> The grid is aligned with the tick marks of this axis. The  grid is parallel to 
            the other axis. Use one of the axis constants, X_AXIS  or Y_AXIS. </param>
            <param name="gridtype"> Specifies if the grid aligns with the major tick marks  (GRID_MAJOR), the minor tick 
            marks (GRID_MINOR) or the major and minor  tick marks (GRID_ALL) of the reference axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.#ctor(com.quinncurtis.chart2dnet.Axis,com.quinncurtis.chart2dnet.Axis,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new Grid object based on the specified  x- and y-axes. 
            </summary>
            <param name="xaxis"> The x-axis associated with the grid. </param>
            <param name="yaxis"> The y-axis associated with the grid. </param>
            <param name="gridaxistype"> The grid is aligned with the tick marks of this axis. The  grid is parallel to 
            the other axis. Use one of the axis constants, X_AXIS  or Y_AXIS. </param>
            <param name="gridtype"> Specifies if the grid aligns with the major tick marks  (GRID_MAJOR), the minor tick 
            marks (GRID_MINOR) or the major and minor  tick marks (GRID_ALL) of the reference axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.Copy(com.quinncurtis.chart2dnet.Grid)">
            <summary>
              Copies the source grid. 
            </summary>
            <param name="source"> The source grid object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.Clone">
            <summary>
             Returns an object that is a clone of this Grid object. 
            </summary>
            <returns> Returns a clone of this Grid object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.CalcGridPoints(com.quinncurtis.chart2dnet.TickMark,com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              Calculates the end points of a grid line. 
            </summary>
            <param name="tickmark"> The tickmark object holding tickmark data. </param>
            <param name="pstart"> The starting physical coordinates for the position of the grid line. </param>
            <param name="pstop"> The ending physical coordinates for the position of the grid line.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.CheckGridType(System.Int32)">
            <summary>
             Returns true if a tick mark represents a grid line location. 
            </summary>
            <param name="ngridtype"> Specifies a tick mark type, either TICK_MAJOR or TICK_MINOR. </param>
            <returns> Returns true if a tick mark represents a grid line location.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.DrawGrid(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Cycles through the tick marks of the reference axis and draws grid lines  where appropriate. 
            </summary>
            <param name="g2"> The graphics context.</param>
            <param name="path"> The tick marks are drawn to this GraphicsPath object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.GetGridXAxis">
            <summary>
              Returns a reference to the x-axis object of the grid. 
            </summary>
            <returns> Returns a reference to the x-axis object of the grid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.GetGridYAxis">
            <summary>
              Returns a reference to the y-axis object of the grid. 
            </summary>
            <returns> Returns a reference to the y-axis object of the grid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.SetGridXAxis(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              Sets the x-axis object of the grid. 
            </summary>
            <param name="axis"> Specifies the x-axis object of the grid.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.SetGridYAxis(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              Sets the y-axis object of the grid. 
            </summary>
            <param name="axis"> Specifies the y-axis object of the grid.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.SetGridAxis(System.Int32,com.quinncurtis.chart2dnet.Axis)">
            <summary>
              Sets one of the axis objects of the grid. 
            </summary>
            <param name="axtype"> Specifies the which axis object, either X_AXIS or Y_AXIS. </param>
            <param name="axis"> Specifies the axis object of the grid.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.SetGridAxis(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              Sets one of the axis objects of the grid. 
            </summary>
            <param name="axis"> Specifies the axis object of the grid.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.GetGridAxis(System.Int32)">
            <summary>
              Returns the specified axis object of the grid. 
            </summary>
            <param name="axtype"> Specifies the which axis object, either X_AXIS or Y_AXIS. </param>
            <returns> Returns a reference to the axis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the grid lines for the  grid are 
              drawn in the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point is near one of the grid lines. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.SetGridType(System.Int32)">
            <summary>
              Sets the grid type. 
            </summary>
            <param name="ngrid"> Specifies the grid type: Use one of the grid type constants:  GRID_MAJOR, 
            GRID_MINOR or GRID_ALL.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.GetGridType">
            <summary>
              Returns the grid type. 
            </summary>
            <returns> Returns the grid type. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.Grid.SetGridType(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.SetGridAxisType(System.Int32)">
            <summary>
              Sets the axis type that defines the grid spacing. 
            </summary>
            <param name="naxis"> Specifies the grid axis type: Use one of the axis type constants:  X_AXIS or Y_AXIS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Grid.GetGridAxisType">
            <summary>
              Returns grid axis type. 
            </summary>
            <returns> Returns the grid axis type.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Grid.GridType">
            <summary>
              Set/Get the grid type. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Grid.GridAxisType">
            <summary>
              Set/Get the axis type that defines the grid spacing. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.GroupBarPlot">
            <summary>
              The GroupBarPlot class extends the GroupPlot class and  displays data in group bar format. 
              Individual bars, the height of which corresponds to the  group values (Y[0], Y[1], Y[2], ...) 
              of the dataset, are displayed side  by side, as a group, justified with respect to the X-position 
              value for each group.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GroupBarPlot.barOverlap">
            <summary>
             The overlap of group bars within the group for bar graph plot objects.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.#ctor">
            <summary>
              The default GroupPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the GroupBarPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.InitDefaults">
            <summary>
              Initializes default values for the group plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.Copy(com.quinncurtis.chart2dnet.GroupBarPlot)">
            <summary>
              Copies the source GroupBarPlot object. 
            </summary>
            <param name="source"> The source GroupBarPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.Clone">
            <summary>
             Returns an object that is a clone of this GroupPlot object. 
            </summary>
            <returns> Returns a clone of this GroupPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new GroupPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new GroupPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,System.Double,System.Double,com.quinncurtis.chart2dnet.ChartAttribute[],System.Int32)">
            <summary>
              This constructor creates a new GroupPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new GroupPlot object. </param>
            <param name="dataset"> The group bar graph represents the values in this group data set. </param>
            <param name="rbarwidth"> The width of the group bars in units of the independent axis. All  bars within 
            a group are squeezed into the width defined by rbarwidth. Each individual  bar within the group has a 
            width of rbarwidth/datasets.nNumGroups. </param>
            <param name="rbarbase"> The group bars start at the value rbarbase, and extend to the  group bar values 
            represented by the data set. </param>
            <param name="attribs"> An array of ChartAttribute objects, size datasets.nNumGroups  specify the attributes 
            (out1line color and fill color) for each group of a group bar graph. </param>
            <param name="nbarjust"> The group bars are justified with respect to the x-values in the  dataset using the 
            rbarjust justification value (JUSTIFY_MIN, JUSTIFY_CENTER,  or JUSTIFY_MAX).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.InitGroupBarPlot(com.quinncurtis.chart2dnet.GroupDataset,System.Double,System.Double,com.quinncurtis.chart2dnet.ChartAttribute[],System.Int32)">
            <summary>
              Sets the properties of a group bar plot.  A group-bar plot has all of the bars in a group side by side. 
            </summary>
            <param name="dataset"> The group bar graph represents the values in this group data set. </param>
            <param name="rbarwidth"> The width of the group bars in units of the independent axis. All  bars within a 
            group are squeezed into the width defined by rbarwidth. Each individual  bar within the group has a width 
             of rbarwidth/datasets.nNumGroups. </param>
            <param name="rbarbase"> The group bars start at the value rbarbase, and extend to the  group bar values 
            represented by the data set. </param>
            <param name="attribs"> An array of ChartAttribute objects, size datasets.nNumGroups  specify the attributes 
            (out1line color and fill color) for each group of a group bar graph. </param>
            <param name="nbarjust"> The group bars are justified with respect to the x-values in the  dataset using 
            the rbarjust justification value (JUSTIFY_MIN, JUSTIFY_CENTER,  or JUSTIFY_MAX).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.CalcGroupBarRect(System.Double,System.Double,System.Int32,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Calculates the Rectangle2D shape used to draw a single group bar. 
            </summary>
            <param name="x"> The position of the bar in units of the independent axis. </param>
            <param name="y"> The maximum value of the bar in units of dependent axis. </param>
            <param name="ngroup"> The group number of the bar. </param>
            <param name="rect"> Returns the shape of the bar as a Rectangle2D object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.DrawGroupBarPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a group bar plot using the current group bar plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The group bar plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the group plot object  is drawn in the 
              path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.SetBarOverlap(System.Double)">
            <summary>
              Sets the overlap for adjacent bars within a group for group bar plots. 
            </summary>
            <param name="baroverlap"> Sets the overlap for adjacent bars within a group for group bar plots.  
            Specified in units of the independent axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.GetBarOverlap">
            <summary>
              Returns the overlap for adjacent bars within a group for group bar plots. 
            </summary>
            <returns> Returns the overlap for adjacent bars within a group for group bar plots.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupBarPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects one of the objects. 
            </summary>
            <param name="testpoint"> The test point. </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects one of the objects.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GroupBarPlot.BarOverlap">
            <summary>
              Set/Get the overlap for adjacent bars within a group for group bar plots. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.GroupDataset">
            <summary>
              Group data is a collection of data, where more than one dependent variable, the x's, corresponds to  
              the independent one, the y's.  The number of columns in this array must be equal to the number of 
              data points, and  the number of rows - to the number of dependent variables or groups.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GroupDataset.yGroupData">
            <summary>
             A 2-D array, size numberGroups x numberDatapoints, of double that holds the y-values for a group data set.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GroupDataset.autoScaleNumberGroups">
            <summary>
             Not all groups in a group dataset contain data that should be considered when  analyzing the data for 
             auto-scaling. The number of groups analyzed is restricted  to this value, rather then the actual number 
             of groups. This value is initially  assigned the value of numberGroups when a group dataset is first 
             created, but  it can be reassigned to some lower value, depending on the group plot type.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.ErrorCheck(System.Int32)">
            <summary>
              Checks the current group dataset object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.InitDefaults">
            <summary>
              Initializes default values for the GroupDataset object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.Copy(com.quinncurtis.chart2dnet.GroupDataset)">
            <summary>
              Copies the source group dataset. 
            </summary>
            <param name="source"> The source group dataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.Clone">
            <summary>
             Returns an object that is a clone of this GroupDataset object. 
            </summary>
            <returns> Returns a clone of this GroupDataset object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.Resize(System.Int32)">
            <summary>
              Resizes the dataset, maintaining the original data. If the new dataset is  larger the dataset is padded 
              with zeros. If the new dataset is smaller  the original data is truncated to the new size. 
            </summary>
            <param name="n"> The new size of the dataset.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.#ctor">
            <summary>
              The default GroupDataset constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.InitDatasetBase(System.String,System.Int32,System.Int32)">
            <summary>
              An initialization method that sizes the group dataset arrays. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="nrows"> Specifies the number of rows, in the y group data array,  where y has the dimensions 
            [nrows,ncol]. The numberGroups field is set equal  to the nrows value. </param>
            <param name="ncols"> Specifies the number of columns in the y group data array,  where y has the 
            dimensions [nrows, ncols]. The numberDatapoints field is set equal  to the ncols value. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.InitializeData(System.Double[],System.Double[0:,0:])">
            <summary>
              An initialization method that initializes the x- and y-values  of a group dataset that uses floating point values. 
            </summary>
            <param name="x"> An array  that specifies the x-values of a group dataset. </param>
            <param name="y"> An array that specifies the y-values of a group dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.InitDataset(System.String,System.Double[],System.Double[0:,0:])">
            <summary>
              An initialization method that initializes the name, and the x- and y-values  of a group dataset that uses 
              floating point values. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a group dataset. </param>
            <param name="y"> An array that specifies the y-values of a group dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.AddGroup(System.Double[])">
            <summary>
              This method adds a new row (or group) of y-values to the existing group dataset, increasing  the number of 
              groups in the dataset by 1. 
            </summary>
            <param name="y"> An array that specifies the y-values for a new  group of a group dataset.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.#ctor(System.String,System.Double[],System.Double[0:,0:])">
            <summary>
              This constructor creates a new, group GroupDataset object that uses floating point values. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a group dataset. </param>
            <param name="y"> An array that specifies the y-values of a group dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.#ctor(System.String,System.Double[],System.Double[])">
            <summary>
              This constructor creates a new, group GroupDataset object that uses floating point values. 
              It assumes that initially there is only one group (or row) and the y data values are passed in
              as a 1-D double array, rather than as a 2-D array
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a group dataset. </param>
            <param name="y"> An array that specifies the y-values of a group dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.#ctor(System.String,System.Double[],System.Double[0:,0:],System.Boolean[])">
            <summary>
              This constructor creates a new, group GroupDataset object that uses floating point values. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a group dataset. </param>
            <param name="y"> An array that specifies the y-values of a group dataset. </param>
            <param name="valid"> An array that specifies the valid values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new, group GroupDataset object of the specified size. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="nrows"> Number of rows, or groups in the dataset. </param>
            <param name="ncols"> Number of columns, or numDatapoints in the dataset.  </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.#ctor(com.quinncurtis.chart2dnet.CSV,System.String,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new GroupDataset object from a file consisting of  comma separated values. 
              The file can be organized so that  the columns represent groups and the rows represent data values for  
              each group (COLUMN_MAJOR), or the where the rows represent groups  and the columns represent data values 
              for each group (ROW_MAJOR).  Use the CSV.SetOrientation method to initialize the csv argument  for the 
              proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file. </param>
            <param name="rowskip"> Skip this many rows before starting the read operation. </param>
            <param name="columnskip"> For each row of data, skip this many columns before reading the first value from the row.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetFirstValidIndex(System.Int32)">
            <summary>
              This method returns the index of the first valid data point in a group dataset. 
            </summary>
            <param name="ngroup"> Specifies the group number of the dataset that is to be checked. </param>
            <returns> Returns the index of the first valid data point in a simple dataset. If  the value of the 
            returned index is outside of the range 0 to numberDatapoints-1, the  dataset has no valid data points.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.AutoCompressDataset(com.quinncurtis.chart2dnet.GroupDataset,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              This method returns a compressed dataset maps the display dataset close to that of
              the display screen. 
            </summary>
            <param name="dataset"> The source dataset.</param>
            <param name="compressmodex"> The compression type for the x-values. Use one of the data compression type 
            constants:  DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no 
            compression),  DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  
            (use the average x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and 
            y-value in each interval), DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), 
            and DATACOMPRESS_MINMAX (use the minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX 
            compression type is best used when the compressed data values number more than  1000, where adjacent 
            data values in the rendered chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  
            compression type will guarantee that the chart displays the same minimums and maximums as the original dataset. </param>
            <param name="compressmodey"> The compression type for the y-values. Use one of the he data compression 
            type constants. </param>
            <param name="trigger"> Compression will occur if the number of datapoints exceeds this value.</param>
            <param name="divisor"> The approximate divisor you want to reduce the dataset by. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetFastClipDataset(System.String,com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Int32@)">
            <summary>
              This method returns a truncated dataset that only includes the datapoints within the current scaling 
              limits, assuming the the data is monotonic in the x or y direction. 
            </summary>
            <param name="s"> A string specifying the new name of the dataset. </param>
            <param name="transform"> The transform that the dataset is clipped against.</param>
            <param name="fastclipmode"> Specifies if the data is clipped against the x-coordinate (FASTCLIP_Y), 
            or the y-coordinate (FASTCLIP_Y).</param>
            <param name="fastclipoffset"> Returns the start offset of the fast clip data.</param>
            <returns> Returns the truncated dataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupDatasetMin(System.Int32)">
            <summary>
              This method returns the minimum value for either the xData or   arrays. 
            </summary>
            <param name="naxis"> Specifies which data array to return the minimum value from. UseX_AXIS  for the 
            xData array, andY_AXIS for the yGroupData array. </param>
            <returns> Returns the minimum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupDatasetMax(System.Int32)">
            <summary>
              This method returns the maximum value for either the xData or yGroupData  arrays. 
            </summary>
            <param name="naxis"> Specifies which data array to return the maximum value from. UseX_AXIS  for the 
            xData array, andY_AXIS for the yGroupData array. </param>
            <returns> Returns the maximum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupDatasetColumnSum">
            <summary>
              This method returns an array of double, that contains the sum  of the group values for each index, 0 to 
              numberDatapoints-1. 
            </summary>
            <returns> Returns an array of double that contains the sum  of the group values for each index, 0 to 
            numberDatapoints-1.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetDatasetColumnSum">
            <summary>
              This method returns an array of double that contains the sum  of the group values for each index, 0 to 
              numberDatapoints-1. 
            </summary>
            <returns> Returns an array of double that contains the sum  of the group values for each index, 0 to 
            numberDatapoints-1.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupDatasetSumMax(System.Int32)">
            <summary>
              This method returns the maximum value for either the xData array, or the  maximum of the sum across groups 
              for each index of the yGroupData array.  This method is used by the auto-scale routines to  determine the 
              maximum scale value for "stacked" graphs that use group data. 
            </summary>
            <param name="naxis"> Specifies which data array to return the maximum value from. UseX_AXIS  for the xData 
            array, andY_AXIS for the yGroupData array. </param>
            <returns> Returns the maximum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupDatasetSumMin(System.Int32)">
            <summary>
              This method returns the minimum value for either the xData array, or the  minimum of value in group #0 
              of the yGroupData array.  If the x-values use ChartCalendar dates, the equivalent of the date  in seconds 
              is returned. This method is used by the auto-scale routines to  determine the minimum scale value for 
              "stacked" graphs that use group data. 
            </summary>
            <param name="naxis"> Specifies which data array to return the minimum value from. UseX_AXIS  for the xData 
            array, andY_AXIS for the yGroupData array. </param>
            <returns> Returns the minimum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupSumY(System.Int32)">
            <summary>
              This method returns the sum for the y-values of a specific group in a group dataset. 
            </summary>
            <param name="ngroup"> Specifies the group number of the dataset. </param>
            <returns> Returns the sum for the y-values of a specific group in a group dataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupAverageY(System.Int32)">
            <summary>
              This method returns the average for the y-values of a specific group in a group dataset. 
            </summary>
            <param name="ngroup"> Specifies the group number of the dataset. </param>
            <returns> Returns the average for the y-values of a specific group in a group dataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetNumberGroups">
            <summary>
              This method returns the value of the numberGroups field which is number of  groups in a group dataset. 
            </summary>
            <returns> Returns the value of the numberGroups field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetAutoScaleNumberGroups">
            <summary>
              This method returns the value of the number of groups used in auto axis  calculations. 
            </summary>
            <returns> Returns the value of the autoScaleNumberGroups field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SetAutoScaleNumberGroups(System.Int32)">
            <summary>
              Sets the value of the number of groups used in auto axis  calculations. 
            </summary>
            <param name="autoscalenumgroups"> Sets the value of the autoScaleNumberGroups field.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SetDataPoint(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
              Sets the x- and y-values for a data point in a group dataset. 
            </summary>
            <param name="index"> Specifies the index for the new data values. </param>
            <param name="x"> Specifies the new x-value for the data point at the specified index and group. </param>
            <param name="y"> Specifies the new y-value for the data point at the specified index and group. </param>
            <param name="ngroup"> Specifies the group number for the new data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SetDataPoint(System.Int32,com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
              Sets the x- and y-values for a data point in a group dataset. 
            </summary>
            <param name="p"> Specifies the new x- and y-values for the data point at the specified index and group. </param>
            <param name="ngroup"> Specifies the group number for the new data values.</param>
            <param name="index"> Specifies the index for the new data values. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.AddGroupDataPoints(System.Double,System.Double[])">
            <summary>
              This method adds a new xy point to a dataset, increasing its size by one. 
            </summary>
            <param name="x"> Specifies the new x-value for the data point. </param>
            <param name="y"> An array that holds the y-values to add. </param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.AddGroupDataPoints(com.quinncurtis.chart2dnet.GroupPoint2D)">
            <summary>
              This method adds a new xy point to a dataset, increasing its size by one. 
            </summary>
            <param name="xy"> Specifies the new x-value and y-values for the data point7. </param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.InsertGroupDataPoints(System.Double,System.Double[],System.Int32)">
            <summary>
              Insert a data point at the specified location, increasing the size of the dataset by one. 
            </summary>
            <param name="xvalue"> The x-value of the new data point to insert. </param>
            <param name="yvalue"> An array, size [numberGroups], of the y-values of the data points to insert </param>
            <param name="insertpoint"> The insertion point of the data. Zero based array indexing  is used, so the 5th 
            data point in the array has an index value of 4.</param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.InsertGroupDataPoints(com.quinncurtis.chart2dnet.GroupPoint2D,System.Int32)">
            <summary>
              Insert a data point at the specified location, increasing the size of the dataset by one. 
            </summary>
            <param name="xyvalue"> The x-value and y-values of the new data point to insert. </param>
            <param name="insertpoint"> The insertion point of the data. Zero based array indexing  is used, so the 
            5th data point in the array has an index value of 4.</param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.DeleteGroupDataPoints(System.Int32)">
            <summary>
              Deletes a data point at the specified location, decreasing the size of the dataset by one. 
            </summary>
            <param name="deletepoint"> The delete point. Zero based array indexing  is used, so the 5th data point 
            in the array has an index value of 4.</param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.DeleteGroup(System.Int32)">
            <summary>
              Deletes the specified group in the dataset, decreasing the numGroups field by one. 
            </summary>
            <param name="deletegroup"> The delete point. Zero based array indexing  is used, so the 5th data point 
            in the array has an index value of 4.</param>
            <returns> Returns the value of the numberGroups field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SetYGroupDataValue(System.Int32,System.Int32,System.Double)">
            <summary>
              Sets the y-value in a group dataset. 
            </summary>
            <param name="y"> Specifies the new y-value for the data point at the specified index and group. </param>
            <param name="ngroup"> Specifies the group number for the new data value.</param>
            <param name="index"> Specifies the index for the new data value. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetYGroupDataValue(System.Int32,System.Int32)">
            <summary>
              This method returns a y-value in a group dataset. 
            </summary>
            <param name="ngroup"> Specifies the group number of the data value. </param>
            <param name="index"> Specifies the index of the data value. </param>
            <returns> Returns the y-value of the data point at the specified index and group.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SetYDataValue(System.Int32,System.Int32,System.Double)">
            <summary>
              This method resolves the generalized setYDataValue method int the abstract ChartDataset class. 
            </summary>
            <param name="y"> Specifies the new y-value for the data point at the specified index and group. </param>
            <param name="ngroup"> Specifies the group for the new data value.</param>
            <param name="index"> Specifies the index for the new data value. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetYDataValue(System.Int32,System.Int32)">
            <summary>
              This method resolves the generalized getYDataValue method int the abstract ChartDataset class. 
            </summary>
            <param name="ngroup"> Specifies the group of the y-value. </param>
            <param name="index"> Specifies the index of the y-value. </param>
            <returns> Returns the y-value of the data point at the specified index and group.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetDataPoint(System.Int32,System.Int32)">
            <summary>
              This method returns the x- and y-value of a point in a group dataset. 
            </summary>
            <param name="ngroup"> Specifies the group number of the data point. </param>
            <param name="index"> Specifies the index of the data point. </param>
            <returns> Returns a Point2D object that contains the x- and y-values of the  data point at the specified 
            index and group number.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SetGroupDataColumn(System.Double,System.Double[],System.Int32)">
            <summary>
              Sets the x- and y-values associated with a group dataset column index. 
            </summary>
            <param name="x"> Specifies the new x-value for the data point at the specified column index. </param>
            <param name="y"> An array, size [numberGroups], that specifies the new y-values for the  group dataset 
            at the specified column index. </param>
            <param name="ncolumn"> Specifies the column index for the new data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SetGroupDataColumn(System.Double[],System.Int32)">
            <summary>
              Sets the y-values associated with a group dataset column index. 
            </summary>
            <param name="y"> An array, size [numberGroups], the new y-values for the group dataset  at specified 
            column index. </param>
            <param name="ncolumn"> Specifies the column index for the new data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SetGroupDataRow(System.Double[],System.Int32)">
            <summary>
              Sets the y-values associated with a group dataset row index. 
            </summary>
            <param name="y"> An array, size [numberDatapoints], the new y-values for the group dataset  at specified 
            row index. </param>
            <param name="nrow"> Specifies the row index for the new data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SetGroupDataElement(System.Double,System.Int32,System.Int32)">
            <summary>
              Sets the y-value at a specific row and column of a group dataset. 
            </summary>
            <param name="y"> The new y-value for a group data value at the specific row and column. </param>
            <param name="nrow"> Specifies the row index for the new data value. </param>
            <param name="ncolumn"> Specifies the column index for the new data value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupDataRow(System.Int32)">
            <summary>
              This method gets the y-values associated with a group dataset row index. 
            </summary>
            <param name="nrow"> Specifies the row index for the data values. </param>
            <returns> Returns a reference to the y-value array, size [numberDatapoints],  associated with a group 
            dataset row index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupDataColumn(System.Int32)">
            <summary>
              This method gets the y-values associated with a group dataset column index. 
            </summary>
            <param name="ncolumn"> Specifies the column index for the data values. </param>
            <returns> Returns a reference to a new array, size [numberGroups], that holds the values of  the 
            specified column of data.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupData">
            <summary>
              This method returns a reference to the yGroupData array, the array of y-values  for group datasets. 
            </summary>
            <returns> Returns a reference to the yGroupData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetGroupDataObj">
            <summary>
              This method returns a reference to the internal DoubleArray2D object used to store the group y-values. 
            </summary>
            <returns> Returns a reference to the internal DoubleArray2D object used to store the group y-values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetYData">
            <summary>
              This method returns a reference to the yGroupData array, the array of y-values  for group datasets. 
            </summary>
            <returns> Returns a reference to the yGroupData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetYDataObj">
            <summary>
              This method returns a reference to the internal DoubleArray2D object used to store the group y-values. 
            </summary>
            <returns> Returns a reference to the internal DoubleArray2D object used to store the group y-values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SetGroupData(System.Double[0:,0:])">
            <summary>
              This method sets the values of the yGroupData array, the array of group y-values  for group datasets.  
              If the circular buffer in in effect the buffer pointer is reset to 0. 
            </summary>
            <param name="ygroup"> the new y-values. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.IsDataPointGood(System.Int32,System.Int32)">
            <summary>
              This method checks if the point at the specified index and group number for a  group dataset is valid. 
            </summary>
            <param name="ngroup"> Specifies the group number to check in the xData and yGroupData arrays. </param>
            <param name="index"> Specifies the index to check in the xData and yGroupData arrays. </param>
            <returns> Returns true if the data point is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetDatasetMin(System.Int32)">
            <summary>
              This method returns the minimum value for either the xData or yData  arrays. 
            </summary>
            <param name="naxis"> Specifies which data array to return the minimum value from. UseX_AXIS  for the xData 
            array, andY_AXIS for yData array. </param>
            <returns> Returns the minimum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetDatasetMax(System.Int32)">
            <summary>
              This method returns the maximum value for either the xData or yData  arrays. 
            </summary>
            <param name="naxis"> Specifies which data array to return the maximum value from. UseX_AXIS  for the 
            xData array, andY_AXIS for yData array. </param>
            <returns> Returns the maximum value of the specified data array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.CalcNearestPoint(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against all of the xy points  in a simple dataset and calculates 
              which point in the dataset  is nearest the test point. The nearness test has many  different forms:  
              Nearness Mode Constant Description  FNP_X nearest x  FNP_Y nearest y  FNP_DIST shortest distance  
              FNP_NORMX nearest normalized x  FNP_NORMY nearest normalized y  FNP_NORMDIST shortest normalized distance 
            </summary>
            <param name="transform"> The PhysicalCoordinates coordinate system associated with these points. </param>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.IsDataPointGood(System.Int32)">
            <summary>
              This method checks if the point at the specified index for a simple  dataset is valid. 
            </summary>
            <param name="index"> Specifies the index to check in the xData and yData arrays. </param>
            <returns> Returns true if the data point is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.FindNearestGroup(System.Int32,System.Double)">
            <summary>
              This method finds the nearest group data value nearest a test value. 
            </summary>
            <param name="index"> Specifies the data point index of the group values. </param>
            <param name="findvalue"> Specifies the test value. </param>
            <returns> Returns the group number of the nearest group value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.SortByX(System.Boolean)">
            <summary>
              This method sorts the group dataset according to the x-values. 
            </summary>
            <param name="ascending"> If true, the group dataset is sorted in an ascending  order, by x-value. 
            Otherwise it is sorted in descending order.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.CheckValidGroupDataX(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32)">
            <summary>
              This method checks to see if the x-data value is valid, taking into  account any discontinuities
               in the coordinate system. For example,  an TimeScale can be discontinuous in WEEK_5D mode, or 
               when it has  an hour range that is not the standard 24-hour day.  Any data value in one of the 
               discontinuities is considered invalid. 
            </summary>
            <param name="transform"> Specifies the coordinate system being used to plot the data. </param>
            <param name="index"> Specifies the index to check in the xData array. </param>
            <returns> Returns true if the x-data value is considered valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.CheckValidGroupDataY(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Int32)">
            <summary>
              This method checks to see if the y-data value is valid, taking into  account any discontinuities in 
              the coordinate system. For example,  an TimeScale can be discontinuous WEEK_5D mode, or 
              when it has  an hour range that is not the standard 24-hour day.  Any data value in one of the 
              discontinuities is considered invalid. 
            </summary>
            <param name="transform"> Specifies the coordinate system being used to plot the data. </param>
            <param name="index"> Specifies the index to check in the yData array. </param>
            <param name="ngroup"> Specifies the group number to check in the yGroupData array. </param>
            <returns> Returns true if the y-data value is considered valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.CheckValidGroupData(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Int32)">
            <summary>
              This method checks to see if the x- and y-data values for a given index are valid,  taking into account 
              any discontinuities in the coordinate system. For example,  an TimeScale can be discontinuous 
              in WEEK_5D mode, or when it has  an hour range that is not the standard 24-hour day.  If the x-value, or any 
              of the y-values at a given index are invalid,  the method returns false. 
            </summary>
            <param name="transform"> Specifies the coordinate system being used to plot the data. </param>
            <param name="index"> Specifies the index to check in the group data arrays. </param>
            <param name="ngroup"> Specifies the group number to check in the yGroupData array.  </param>
            <returns> Returns true only if the x- and y-values for a given index are true.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.CheckValidGroupData(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32)">
            <summary>
              This method checks to see if the x- and y-data values for a given index are valid,  taking into 
              account any discontinuities in the coordinate system. For example,  an TimeScale can be discontinuous in 
              WEEK_5D mode, or when it has  an hour range that is not the standard 24-hour day.  If the x-value, or 
              any of the y-values at a given index are invalid,  the method returns false. 
            </summary>
            <param name="transform"> Specifies the coordinate system being used to plot the data. </param>
            <param name="index"> Specifies the index to check in the group data arrays. </param>
            <returns> Returns true only if the x- and y-values for a given index are true.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.WriteGroupDataset(com.quinncurtis.chart2dnet.CSV,System.String)">
            <summary>
              This methods will create a text file and output the dataset to that  file in a CSV 
              (Comma Separated Value) format. A CSV file can be read  by popular spreadsheet and word processing programs. 
              Some localization  for different operating systems and locales can be handled by the  modifying the default csv 
              (CSV) object.  The file can be organized so that  the columns represent groups and the rows represent data 
              values for  each group (COLUMN_MAJOR), or the where the rows represent groups  and the columns represent 
              data values for each group (ROW_MAJOR).  Use the CSV.SetOrientation method to initialize the csv argument  
              for the proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.WriteGroupDataset(com.quinncurtis.chart2dnet.CSV,System.String,System.Boolean)">
            <summary>
              This methods will create a text file and output the dataset to that  file in a CSV (Comma Separated Value) 
              format. A CSV file can be read  by popular spreadsheet and word processing programs. Some localization  
              for different operating systems and locales can be handled by the  modifying the default csv (CSV) 
              object.  The file can be organized so that  the columns represent groups and the rows represent data 
              values for  each group (COLUMN_MAJOR), or the where the rows represent groups  and the columns 
              represent data values for each group (ROW_MAJOR).  Use the CSV.SetOrientation method to 
              initialize the csv argument  for the proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file.</param>
            <param name="append"> True and if the file exists, data is appended to the file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.ReadGroupDataset(com.quinncurtis.chart2dnet.CSV,System.String,System.Int32,System.Int32)">
            <summary>
              This methods will open a text file and read the CSV (Comma Separated Value) formatted  data values 
              in that file. A CSV file can be created  by popular spreadsheet and word processing programs. Some 
              localization  for different operating systems and locales can be handled by the  modifying the 
              default csv (CSV) object.  The file can be organized so that  the columns represent groups and 
              the rows represent data values for  each group (COLUMN_MAJOR), or the where the rows represent groups  
              and the columns represent data values for each group (ROW_MAJOR).  Use the CSV.SetOrientation method to 
              initialize the csv argument  for the proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file. </param>
            <param name="rowskip"> Skip this many rows before starting the read operation </param>
            <param name="columnskip"> For each new row, skip this many columns before starting read.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.CompressGroupDataset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              This methods creates and returns a new dataset that is the data reduced  version of the source dataset. 
              The new, compressed dataset will contain  ((endindex - startindex + 1) / interval) datapoints, except 
              for the DATACOMPRESS_MINMAX  compress algorithm which is the previous formula x 2. 
            </summary>
            <param name="ctypex"> The compression type. Use one of the data compression type constants:  
            DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no compression),  
            DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  (use the average 
            x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and y-value in each interval), 
            DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), and DATACOMPRESS_MINMAX 
            (use the minimum and maximum x- and y-value in each interval). </param>
            <param name="ctypey"> The compression type for the y-values. Use one of the he data compression type constants. </param>
            <param name="interval"> The number of data points in each segment that is reduced to a single 
            datapoint (two  for the DATACOMPRESS_MINMAX compression type) in the compressed dataset. </param>
            <param name="startindex"> The starting point, inclusive, in the source dataset for the data compression. </param>
            <param name="endindex"> The ending index, inclusive, in the source dataset for the data compression. </param>
            <param name="newname"> The string name for the new dataset. </param>
            <returns> Returns the new, compressed GroupDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.CompressGroupDataset(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              This methods creates and returns a new dataset that is the data reduced  version of the source dataset. 
              The new, compressed dataset will contain  ((endindex - startindex + 1) / interval) datapoints, except 
              for the DATACOMPRESS_MINMAX  compress algorithm which is the previous formula x 2. 
            </summary>
            <param name="ctypex"> The compression type. Use one of the data compression type constants:  
            DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no compression),  
            DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  (use the average x- and 
            y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and y-value in each interval), 
            DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), and DATACOMPRESS_MINMAX (use the 
            minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX compression type is best 
            used when the compressed data values number more than  1000, where adjacent data values in the rendered 
            chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  compression type will guarantee that 
            the chart displays the same minimums and maximums as the original dataset. </param>
            <param name="ctypey"> An array of compression types for the y-values, one for each group. Use one of the  
            data compression type constants. </param>
            <param name="interval"> The number of data points in each segment that is reduced to a single 
            datapoint (two  for the DATACOMPRESS_MINMAX compression type) in the compressed dataset. </param>
            <param name="startindex"> The starting point, inclusive, in the source dataset for the data compression. </param>
            <param name="endindex"> The ending index, inclusive, in the source dataset for the data compression. </param>
            <param name="newname"> The string name for the new dataset. </param>
            <returns> Returns the new, compressed GroupDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupDataset.GetSimpleDataset(System.String,System.Int32)">
            <summary>
              This methods creates a new, SimpleDataset object using the x-values and the y-values
              of the specified group. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="group"> Specifies the y-values to include in the new SimpleDataset. </param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GroupDataset.Item(System.Int32)">
            <summary>
              This accessor is the indexer for the class and gets/sets a GroupPoint2D object that
              contains one x-value and as many y-values as there are groups in the dataset.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GroupDataset.YGroupData">
            <summary>
              This method returns a reference to the DoubleArray2D object used to store the y-values of
              the group dataset.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.GroupPoint2D">
            <summary>
              The  <code>GroupPoint2D</code> class defines a point representing a location  in (x,y) coordinate space.  
              This class is only the abstract superclass for all objects that  store a 2D coordinate.  The actual 
              storage representation of the coordinates is left to  the subclass.  
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GroupPoint2D.x">
            <summary>
              The x-coordinate of this <code>GroupPoint2D</code>. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.GroupPoint2D.ygroup">
            <summary>
              The y-coordinate of this <code>GroupPoint2D</code>. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.#ctor">
            <summary>
              Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.#ctor(System.Double,System.Double[])">
            <summary>
              Constructs and initializes a <code>GroupPoint2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> an array of the y-coordinates </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.#ctor(System.Double,com.quinncurtis.chart2dnet.DoubleArray)">
            <summary>
              Constructs and initializes a <code>GroupPoint2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> an array of the y-coordinates </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.#ctor(com.quinncurtis.chart2dnet.ChartCalendar,System.Double[])">
            <summary>
              Constructs and initializes a <code>Point2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinates </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.#ctor(System.DateTime,System.Double[])">
            <summary>
              Constructs and initializes a <code>Point2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinates </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.#ctor(com.quinncurtis.chart2dnet.GroupPoint2D)">
            <summary>
              Constructs and initializes a <code>GroupPoint2D</code> with the  specified coordinates. 
            </summary>
            <param name="p"> the xy coordinates </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.GetX">
            <summary>
              Returns the X coordinate of this <code>GroupPoint2D</code>. 
            </summary>
            <returns> the X coordinate of this <code>GroupPoint2D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.GetCalendarX">
            <summary>
              Returns the X coordinate of this <code>Point2D</code>. 
            </summary>
            <returns> the X coordinate of this <code>Point2D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.GetDateTimeX">
            <summary>
              Returns the X coordinate of this <code>Point2D</code>. 
            </summary>
            <returns> the X coordinate of this <code>Point2D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.GetY">
            <summary>
              Returns the Y coordinates of this <code>GroupPoint2D</code>. 
            </summary>
            <returns> the Y coordinates of this <code>GroupPoint2D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.SetLocation(System.Double,System.Double[])">
            <summary>
              Sets the location of this <code>GroupPoint2D</code> to the  specified  coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinates</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.SetLocation(com.quinncurtis.chart2dnet.ChartCalendar,System.Double[])">
            <summary>
              Initializes a <code>Point2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinates </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.SetLocation(System.DateTime,System.Double[])">
            <summary>
              Initializes a <code>Point2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinates </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.SetLocation(com.quinncurtis.chart2dnet.GroupPoint2D)">
            <summary>
              Sets the location of this <code>GroupPoint2D</code> to the  specified  coordinates. 
            </summary>
            <param name="p"> the coordinate values</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.DistanceSq(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Returns the square of the distance between two points. 
            </summary>
            <param name="X1"> the x-coordinate of the first point </param>
            <param name="Y1"> the y-coordinate of the first point </param>
            <param name="X2"> the x-coordinate of the second point </param>
            <param name="Y2"> the y-coordinate of the second point </param>
            <returns> the square of the distance between the two  sets of specified coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Returns the distance between two points. 
            </summary>
            <param name="X1"> the x-coordinate of the first point </param>
            <param name="Y1"> the y-coordinate of the first point </param>
            <param name="X2"> the x-coordinate of the second point </param>
            <param name="Y2"> the y-coordinate of the second point </param>
            <returns> the distance between the two sets of specified  coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.DistanceSq(System.Double,System.Double,System.Int32)">
            <summary>
              Returns the square of the distance between the specified point and the current point. 
            </summary>
            <param name="PX"> the x-value of the specified point </param>
            <param name="PY"> the y-value of the specified point </param>
            <param name="groupindex"> the group index to use for the y-value </param>
            <returns> the square of the distance between the current point and the specified point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.DistanceSq(com.quinncurtis.chart2dnet.GroupPoint2D,System.Int32)">
            <summary>
              Returns the square of the distance between the specified point and the current point. 
            </summary>
            <param name="pt"> the coordinates of the specified point </param>
            <param name="groupindex"> the group index to use for the y-value </param>
            <returns> the square of the distance between the current point and the specified point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.Distance(System.Double,System.Double,System.Int32)">
            <summary>
              Returns the distance from this <code>GroupPoint2D</code> to  a specified point. 
            </summary>
            <param name="PX"> the x-value of the specified point </param>
            <param name="PY"> the y-value of the specified point </param>
            <param name="groupindex"> the group index to use for the y-value </param>
            <returns> the distance between this <code>GroupPoint2D</code>  and a specified point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.Distance(com.quinncurtis.chart2dnet.GroupPoint2D,System.Int32)">
            <summary>
              Returns the distance from this <code>GroupPoint2D</code> to a  specified <code>GroupPoint2D</code>. 
            </summary>
            <param name="pt"> the coordinates of the specified point </param>
            <param name="groupindex"> the group index to use for the y-value </param>
            <returns> the distance between this <code>GroupPoint2D</code> and  the specified <code>GroupPoint2D</code>.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.GroupPoint2D.Clone">
            <summary>
              Creates a new object of the same class and with the  same contents as this object. 
            </summary>
            <returns> a clone of this instance. </returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GroupPoint2D.X">
            <summary>
             Get/Set the x-value of the point. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GroupPoint2D.CalendarX">
            <summary>
             Get/Set the x-value of the point. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GroupPoint2D.DateTimeX">
            <summary>
             Get/Set the x-value of the point. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.GroupPoint2D.Y">
            <summary>
             Get/Set the y-value of the point. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.HistogramPlot">
            <summary>
              The HistogramPlot class extends the GroupPlot class and  displays histogram plots. A histogram plot 
              is a collection of rectangular objects  with independent positions, widths and heights, specified 
              using the  values of the associated group dataset. The group size  of the data set must be two. 
              The X-values of the group dataset  represent the x-position of the lower left corner of each histogram bar,  
              the Y[0]-values set the height of each histogram bar, and the Y[1]-values set  the width of 
              each histogram bar. The histogram bars share a common base value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.#ctor">
            <summary>
              The default HistogramPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the HistogramPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.InitDefaults">
            <summary>
              Initializes default values for the HistogramPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.Copy(com.quinncurtis.chart2dnet.HistogramPlot)">
            <summary>
              Copies the source HistogramPlot object. 
            </summary>
            <param name="source"> The source HistogramPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.Clone">
            <summary>
             Returns an object that is a clone of this HistogramPlot object. 
            </summary>
            <returns> Returns a clone of this HistogramPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new HistogramPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new HistogramPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new HistogramPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new HistogramPlot object. </param>
            <param name="dataset"> The histogram plot will represent the values in this group data set.  
            The group size of the data set must be two. The X-values of the group dataset  represent the x-position 
            of the lower left corner of each histogram bar,  the Y[0]-values set the height of each histogram bar, and 
            the Y[1]-values set  the width of each histogram bar. </param>
            <param name="rbarbase"> The histogram bars start at the value rbarbase, and extend to the  bar values 
            represented by the data set. </param>
            <param name="attrib"> Specifies the attributes (line color and line style) for the histogram bars.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.InitHistogramPlot(com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of an floating bar plot.  A floating bar plot plots a pair y-values in a group as a bar, 
              with a starting value  equal to the first y-value and an ending value equal to the second y-value.  The 
              number of groups in an floating bar plot is restricted to two. 
            </summary>
            <param name="dataset"> The histogram plot will represent the values in this group data set.  The group 
            size of the dataset must be two. The X-values of the group dataset  represent the x-position of the lower 
            left corner of each histogram bar,  the Y[0]-values set the height of each histogram bar, and the Y[1]-values 
            set  the width of each histogram bar. </param>
            <param name="rbarbase"> The histogram bars start at the value rbarbase, and extend to the  bar values 
            represented by the data set. </param>
            <param name="attrib"> Specifies the attributes (line color and line style) for the histogram bars.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.InitHistogramPlot(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of an floating bar plot.  A floating bar plot plots a pair y-values in a group as a bar, 
              with a starting value  equal to the first y-value and an ending value equal to the second y-value.  The 
              number of groups in an floating bar plot is restricted to two. 
            </summary>
            <param name="transform"> The coordinate system for the new HistogramPlot object. </param>
            <param name="dataset"> The histogram plot will represent the values in this group data set.  The group 
            size of the dataset must be two. The X-values of the group dataset  represent the x-position of the lower 
            left corner of each histogram bar,  the Y[0]-values set the height of each histogram bar, and the Y[1]-values 
            set  the width of each histogram bar. </param>
            <param name="rbarbase"> The histogram bars start at the value rbarbase, and extend to the  bar values 
            represented by the data set. </param>
            <param name="attrib"> Specifies the attributes (line color and line style) for the histogram bars.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.CalcHistogramRect(System.Double,System.Double,System.Double,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Calculates the Rectangle2D shape used to draw a single histogram bar. 
            </summary>
            <param name="x"> The position of the bar in units of the independent axis. </param>
            <param name="y"> The height of the bar in units of dependent axis. </param>
            <param name="width"> The width of the bar in units of the independent axis. </param>
            <param name="rect"> Returns the shape of the bar as a Rectangle2D object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.DrawHistogramPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a histogram plot using the current histogram plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The histogram plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the group plot object  
              is drawn in the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.HistogramPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects one of the data objects. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.IntArray">
            <summary>
            Summary description for IntArray. It is a improved version of the standard Array
            type because it allows automatic and dynamic resizing of the array. The array has a Length 
            property that specifies the number of elements in the array, and a MaxCapacity property that 
            specifies the size of the internal Array buffer. The internal buffer can be sized much larger than
            the Length property, allowing the array to grow in length without forcing a time consuming
            reallocation and the subsequent copying of all of the data values. Not really important if you are dealing 
            with 10 or 20 element arrays, but very important if you have 1,000,000 element arrays.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.IntArray.minimumMaxCapacity">
            <summary>
             The minimum allowable size of the dataBuffer.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.IntArray.dataBuffer">
            <summary>
             The data buffer holding the array of data values.
            </summary>		
        </member>
        <member name="F:com.quinncurtis.chart2dnet.IntArray.maxCapacity">
            <summary>
             The current allocated size of the dataBuffer. It is >= the length property.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.IntArray.length">
            <summary>
             The current number of used elements in the dataBuffer. It is less than or equal to maxCapacity.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.CopyArray(com.quinncurtis.chart2dnet.IntArray,System.Int32,com.quinncurtis.chart2dnet.IntArray,System.Int32,System.Int32)">
            <summary>
              Static routine copies all or part of one array to another. 
            </summary>
            <param name="source"> The source array.</param>
            <param name="sourceoffset"> The index to start copying from in the source array.</param>
            <param name="dest"> The destination array.</param>
            <param name="destoffset"> The index to start copying to in the destination array.</param>
            <param name="count"> The number of array elements to copy.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.InitializeArray(System.Int32)">
            <summary>
              Initialize all elements in the current array to value. 
            </summary>
            <param name="value"> All data elements in the array are set to value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.#ctor">
            <summary>
              Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.#ctor(System.Int32)">
            <summary>
              Constructor creates an array of Length n, initialized to zero. 
            </summary>
            <param name="n"> The array is sized to n elements.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.#ctor(com.quinncurtis.chart2dnet.IntArray)">
            <summary>
              Constructor creates an array using the values in the source array. 
            </summary>
            <param name="a"> The array used to initialize the array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.#ctor(System.Int32[],System.Int32)">
            <summary>
              Constructor initializes the array using the specified data values. 
              The number of elements of the array is set to the Length of the initializing array,
              while the internal buffer used to hold the data is sized to maxcap.
            </summary>
            <param name="x"> The initializing data values.</param>
            <param name="maxcap"> The internal buffer holding the data values is sized to the value of maxcap.
                If the number of data values exceeds the maxcap limit, the size of maxcap is automatically doubled.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.#ctor(System.Int32[])">
            <summary>
              Constructor initializes the array using the specified data values. 
              The number of elements of the array is set to the Length of the source array,
              and the internal buffer used to hold the data is set to the same size.
            </summary>
            <param name="x"> The initializing data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.Copy(com.quinncurtis.chart2dnet.IntArray)">
            <summary>
              Copies the source array to the current instance. 
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.NDCopy(com.quinncurtis.chart2dnet.IntArray)">
            <summary>
              Non-Destructive copy does not reallocate buffers, limits copy to the number of elements in the smaller of 
              two arrays, the source or the current instance.
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the current instance to the destination array. 
            </summary>
            <param name="dest"> The destination array object.</param>
            <param name="index"> The index to start copying to in the destination array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.Clone">
            <summary>
             Returns an object that is a clone of this array object. 
            </summary>
            <returns> Returns a clone of this array object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.ResizeCapacity(System.Int32)">
            <summary>
              This method reallocates the internal data buffer to the new capacity value.
              The data is preserved. If the new buffer size is less than the number of data values
              in the old array, the array is truncated. If the new buffer size is greater than the number
              of data values, the Length property remains the same, but the MaxCapacity property is changed
              and the internal buffer reallocated to the new maxcapacity size.
            </summary>
            <param name="newcapacity"> The internal buffer holding the data values is sized to the new 
             value of new capacity.
             The Length property remains unchanged if the new buffer size is larger than the old buffer size, only the 
             buffer size is changed, not the current number of elements in the array.   </param>param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.Reset">
            <summary>
             Resets the Length property to 0, the MaxCapacity property to 16 and reallocates
             the internal buffer to MaxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.Clear">
            <summary>
             Resets (same as Clear) the Length property to 0, the MaxCapacity property to 16 and reallocates
             the internal buffer to MaxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.ShiftLeft(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the left. If you have a 10 element array and
              shift the array 2 elements to the left, element 7 ends up with the value originally in element
              9, element 6 ends up with the value originally in element 8, etc.
            </summary>
            <param name="shiftcount"> The elements are shifted to left by shiftcount elements.</param>
            <param name="fillzero"> Set to true if elements to the right of the final shift point are to be set to zero. 
            In the example above this would apply to elements 8 and 9 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.ShiftRight(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the right. If you have a 10 element array and
              shift the array 2 elements to the right, element 2 ends up with the value originally in element
              0, element 3 ends up with the value originally in element 1, etc.
            </summary>
            <param name="shiftcount"> The elements are shifted to right by shiftcount elements.</param>
            <param name="fillzero"> Set to true if elements to the left of the final shift point are to be set to zero. 
            In the example above this would apply to elements 0 and 1 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.ShiftLeftThenResize(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the left. If you have a 10 element array and
              shift the array 2 elements to the left, element 7 ends up with the value originally in element
              9, element 6 ends up with the value originally in element 8, etc. The array is resized to a size
              equal to the original array size minus the shift count (Length - shiftcount).
            </summary>
            <param name="shiftcount"> The elements are shifted to left by shiftcount elements.</param>
            <param name="trim"> Set to true if the MaxCapacity property is to be set equal to Length property,
             sizing the internal data buffers to the exact array size.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.Insert(System.Int32,System.Int32)">
            <summary>
             Inserts an element in the array at the specified index, increasing the length of the array by one. If
             the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled and the internal buffer
             resized accordingly.
            </summary>
            <param name="index"> The array element where the new value is inserted.</param>
            <param name="r"> The new value to insert.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.RemoveAt(System.Int32)">
            <summary>
             Removes an element at the specified index, decreasing the length of the array by one. The size
             of the internal buffer remains unchanged.
            </summary>
            <param name="index"> The array element that is deleted.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.Delete(System.Int32)">
            <summary>
             Removes an element at the specified index, decreasing the length of the array by one. The size
             of the internal buffer remains unchanged.
            </summary>
            <param name="index"> The array element that is deleted.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.SetLength(System.Int32)">
            <summary>
             Resizes the array to the specified length. The MaxCapacity property is iteratively doubled until
             it exceeds the new length, then internal buffer are resized to the new MaxCapacity value.
            </summary>
            <param name="newlength"> The array is resized to the new length.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.TrimToSize">
            <summary>
             The MaxCapacity property is set equal to the Length property of the array
             and the internal buffer are resized to the new MaxCapacity value. This leaves no "slack"
             in the internal buffer that allows the array length to grow without forcing a reallocation
             and copy of all data elements should the length of the array be increased.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.Resize(System.Int32)">
            <summary>
             The length of the arrays is set to the specified value. If the new length is greater than the current 
             Length property value, but less or equal to the MaxCapacity property value, the Length property is increased to
             reflect the new value. If the new length is greater than MaxCapacity, the MaxCapacity value is
             doubled until it is greater than the new length, and the internal buffer increased accordingly.
             New, initialized array elements are set to zero.
            </summary>
            <param name="newlength"> The array is resized to the new length.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.Add(System.Int32)">
            <summary>
             Adds a new element at the end of the array, increasing the length of the array by one. If
             the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled and 
             the internal buffer resized accordingly.
            </summary>
            <param name="r"> The new value to add at the end of the array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.AddRange(System.Int32[])">
            <summary>
             Adds a array of new values at the end of the array, increasing the length of the array by the length 
             of the source array. If the MaxCapacity property is exceeded the MaxCapacity property is automatically 
             doubled and the internal buffer resized accordingly.
            </summary>
            <param name="x"> An array of new values that are added to the end of the array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.SetElements(System.Int32[])">
            <summary>
             Initializes the elements of the array, starting at element 0. The size of the array is set
             equal to the length of the source array. If the source array is
             larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.SetElements(System.Int32[],System.Int32)">
            <summary>
             Initializes the elements of the array, starting at element 0 and continuing for count elements.
              The size of the array is set equal to the length of the source array, or the count, whichever is smaller. 
              If the new length larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array, or the count value, whichever is smaller.</param>
            <param name="count"> Number of elements to initialize.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.SetElements(com.quinncurtis.chart2dnet.IntArray,System.Int32)">
            <summary>
             Initializes the elements of the array, starting at element 0 and continuing for count elements.
              The size of the array is set equal to the length of the source array, or the count, whichever is smaller. 
              If the new length larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array, or the count value, whichever is smaller.</param>
            <param name="count"> Number of elements to initialize.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.SetElements(com.quinncurtis.chart2dnet.IntArray)">
            <summary>
             Initializes the elements of the array, starting at element 0. The size of the array is set
             equal to the length of the source array. If the source array is
             larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.SetElement(System.Int32,System.Int32)">
            <summary>
             Set the value of a single element in the array.
            </summary>
            <param name="index"> The index to set in the array.</param>
            <param name="r"> The array element at index is set to the value r.</param>///
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.GetElement(System.Int32)">
            <summary>
             Get the value of a single element in the array.
            </summary>
            <param name="index"> The array index.</param>
             <returns> Returns the value of the array at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.GetDataBuffer">
            <summary>
             Returns a reference to the Array object that represents internal data buffer. It may be sized to the
             maxCapacity value, instead of the number of items in the buffer. This reference will remain valid 
             only as long as the array is not forced to resize, forcing a reallocation of the internal buffer.
            </summary>
             <returns> Returns a reference to the Array object that represents the internal data buffer.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.IntArray.GetElements">
            <summary>
             Returns a copy of the data values in the array sized to the number of elements.
            </summary>
             <returns> Returns a copy of the data values in the array sized to the number of elements.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.IntArray.Length">
            <summary>
              This method returns the value of the length field which is number of  data points in a simple dataset, or 
              the number of x-values in a group dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.IntArray.MaxCapacity">
            <summary>
              This method returns the value of the maxCapacity field. The MaxCapacity property represents 
              the allocated size of the internal Array object used as the data buffer for the array. 
              It is always greater than or equal to the Length property.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.IntArray.DataBuffer">
            <summary>
             Returns a reference to the Array object that represents internal data buffer. This reference will 
             remain valid only as long as the array is not forced to resize, forcing a reallocation 
             of the internal buffer.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.IntArray.Item(System.Int32)">
            <summary>
              This method get/sets the value of an individual element in the array. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.LegendItem">
            <summary>
              The LegendItem class contains the text and symbol  used in displaying a single element of a chart legend.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.LegendItem.legendItemText">
            <summary>
             Holds a reference to the ChartText object used for the legend item caption.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.LegendItem.legendItemSymbol">
            <summary>
             Holds a reference to the ChartSymbol object used for the legend item symbol.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.ErrorCheck(System.Int32)">
            <summary>
              Checks the legend item object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.#ctor">
            <summary>
              The default LegendItem constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.SetChartObjScale(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             Sets the reference to the PhysicalCoordinates object that the chart object is placed in.  
             It overrides the GraphObj version because this is a compound object that  needs to update the ChartText 
             and ChartSymbol objects within. 
            </summary>
            <param name="transform"> A reference to the PhysicalCoordinates object that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.InitDefaults">
            <summary>
              Initializes default values for the legend item.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.Copy(com.quinncurtis.chart2dnet.LegendItem)">
            <summary>
              Copies the source legend item object. 
            </summary>
            <param name="source"> The source legend item object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.Clone">
            <summary>
             Returns an object that is a clone of this LegendItem object. 
            </summary>
            <returns> Returns a clone of this LegendItem object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.#ctor(com.quinncurtis.chart2dnet.ChartText,System.Int32)">
            <summary>
              The LegendItem constructor creates a new object based on the source  ChartText object and the source nsymbol value. 
            </summary>
            <param name="textitem"> A reference to an ChartText item used as the text for a legend item. </param>
            <param name="nsymbol"> The symbol used in the legend item. Use one of the chart symbol  constants: NOSYMBOL, 
            SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR,  LINE, HBAR , VBAR, BAR3D, or CIRCLE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.#ctor(com.quinncurtis.chart2dnet.ChartText,System.Int32,com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
              an LegendItem constructor creates a new object based on the source ChartText object,  and the source nsymbol 
              value. Attributes for the legend item are copied  from the GraphObj parameter. 
            </summary>
            <param name="textitem"> A reference to an ChartText item used as the text for a legend item. </param>
            <param name="nsymbol"> The symbol used in the legend item. Use one of the chart symbol  constants: NOSYMBOL, 
            SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR,  LINE, HBAR , VBAR, BAR3D, or CIRCLE. </param>
            <param name="chartobj"> A reference to an GraphObj object. The color of the  legend item is copied out of this 
            object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.#ctor(com.quinncurtis.chart2dnet.ChartText,com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
              an LegendItem constructor creates a new object based on the source ChartText object,  and the source 
              nsymbol value. Attributes for the legend item are copied  from the GraphObj parameter. 
            </summary>
            <param name="textitem"> A reference to an ChartText item used as the text for a legend item. </param>
            <param name="chartobj"> A reference to an GraphObj object. The color of the  legend item is copied out 
            of this object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.String,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute,System.Drawing.Font)">
            <summary>
              an LegendItem constructor creates a new object based on the source  chart scale, a text string, a symbol 
              value, an ChartAttribute object,  and an explicit font. 
            </summary>
            <param name="transform"> The coordinate system for the new legend item object. </param>
            <param name="stext"> A string used as the text for a legend item. </param>
            <param name="nsymbol"> The symbol used in the legend item. Use one of the chart symbol  constants: NOSYMBOL, 
            SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR,  LINE, HBAR , VBAR, BAR3D, or CIRCLE. </param>
            <param name="attrib"> A reference to an ChartAttribute object. The color of the  legend item is copied out 
            of this object. </param>
            <param name="thefont"> A reference to the font that is to be used in the display of the  legend item text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.String,System.Int32,com.quinncurtis.chart2dnet.GraphObj,System.Drawing.Font)">
            <summary>
              an LegendItem constructor creates a new object based on the source  chart scale, a text string, a symbol 
              value, an GraphObj object,  and an explicit font. 
            </summary>
            <param name="transform"> The coordinate system for the new legend item object. </param>
            <param name="stext"> A string used as the text for a legend item. </param>
            <param name="nsymbol"> The symbol used in the legend item. Use one of the chart symbol  constants: 
            NOSYMBOL, SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR,  LINE, HBAR , VBAR, BAR3D, or CIRCLE. </param>
            <param name="chartobj"> A reference to an GraphObj object. The color of the  legend item is copied out 
            of attributes of this object. </param>
            <param name="thefont"> A reference to the font that is to be used in the display of the  legend item text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.String,com.quinncurtis.chart2dnet.GraphObj,System.Drawing.Font)">
            <summary>
              an LegendItem constructor creates a new object based on the source  chart scale, a text string, 
              a symbol value, an GraphObj object,  and an explicit font. 
            </summary>
            <param name="transform"> The coordinate system for the new legend item object. </param>
            <param name="stext"> A string used as the text for a legend item. </param>
            <param name="chartobj"> A reference to an GraphObj object. The color of the  legend item is copied 
            out of attributes of this object. </param>
            <param name="thefont"> A reference to the font that is to be used in the display of the  legend item text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.String,System.Int32,com.quinncurtis.chart2dnet.ChartPlot,System.Int32,System.Drawing.Font)">
            <summary>
              an LegendItem constructor creates a new object based on the source  chart scale, a text string, a 
              symbol value, an GraphObj object, a group  number, and an explicit font. 
            </summary>
            <param name="transform"> The coordinate system for the new legend item object. </param>
            <param name="stext"> A string used as the text for a legend item. </param>
            <param name="nsymbol"> The symbol used in the legend item. Use one of the chart symbol  constants: 
            NOSYMBOL, SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR,  LINE, HBAR , VBAR, BAR3D, or CIRCLE. </param>
            <param name="chartobj"> A reference to an GraphObj object. The color of the  legend item is copied 
            out of attributes for a particular group of this object. </param>
            <param name="ngroup"> The group number of the GraphObj that the color for this  legend item is copied from. </param>
            <param name="thefont"> A reference to the font that is to be used in the display of the  legend item text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.String,com.quinncurtis.chart2dnet.ChartPlot,System.Int32,System.Drawing.Font)">
            <summary>
              an LegendItem constructor creates a new object based on the source  chart scale, a text string, 
              a symbol value, an GraphObj object, a group  number, and an explicit font. 
            </summary>
            <param name="transform"> The coordinate system for the new legend item object. </param>
            <param name="stext"> A string used as the text for a legend item. </param>
            <param name="chartobj"> A reference to an GraphObj object. The color of the  legend item is 
            copied out of attributes for a particular group of this object. </param>
            <param name="ngroup"> The group number of the GraphObj that the color for this  legend item 
            is copied from. </param>
            <param name="thefont"> A reference to the font that is to be used in the display of the  legend item text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.SetClipping(System.Int32)">
            <summary>
             Sets the clipping mode for the legend item. 
            </summary>
            <param name="clipping"> Sets the clipping mode for the legend item.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.GetLegendItemText">
            <summary>
             Returns the ChartText object used by the legend item. 
            </summary>
            <returns> Returns the ChartText object used by the legend item.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.SetLegendItemText(com.quinncurtis.chart2dnet.ChartText)">
            <summary>
             Sets the ChartText object used by the legend item. 
            </summary>
            <param name="text"> Sets the ChartText object used by the legend item.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.GetLegendItemSymbol">
            <summary>
             Returns the ChartSymbol object used by the legend item. 
            </summary>
            <returns> Returns the ChartSymbol object used by the legend item.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.SetLegendItemSymbol(com.quinncurtis.chart2dnet.ChartSymbol)">
            <summary>
             Sets the ChartSymbol object used by the legend item. 
            </summary>
            <param name="symbol"> Sets the ChartSymbol object used by the legend item.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.SetLegendItemCustomShape(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
             Initializes the ChartSymbol object used by the legend item for a user defined shape. 
            </summary>
            <param name="symbolshape"> Specifies a user defined shape to use as the legend item symbol.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.GetLegendItemCustomShape">
            <summary>
             Returns the user defined shape used by the ChartSymbol object used by the legend item. 
            </summary>
            <returns> Returns a user defined shape used as the legend item symbol.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.SetResizeMultiplier(System.Double)">
            <summary>
             Sets the resize multiplier used by the legend item. 
            </summary>
            <param name="multiplier"> Sets the resize multiplier used by the legend item.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.GetResizeMultiplier">
            <summary>
             Returns the resize multiplier used by the legend item. 
            </summary>
            <returns> Returns the resize multiplier used by the legend item.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LegendItem.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance 
              of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.LegendItem.LegendItemText">
            <summary>
             Get/Set the ChartText object used by the legend item. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.LegendItem.LegendItemSymbol">
            <summary>
             Get/Set the ChartSymbol object used by the legend item. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.LinearAutoScale">
            <summary>
              The LinearAutoScale class is designed to be used with  linear coordinates and is  used to scale the 
              plotting area of graphs and to set the minimum  and maximum values of the axes displayed in the graphs.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.LinearAutoScale.tickInterval">
            <summary>
             Holds the calculated Auto-scale tick mark interval.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.InitDefaults">
            <summary>
              Initializes default values for the auto scale object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.#ctor">
            <summary>
             This default LinearAutoScale constructor
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.#ctor(com.quinncurtis.chart2dnet.ChartDataset,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new LinearAutoScale object based on the data  values in a dataset. 
            </summary>
            <param name="dataset"> The auto-scale values are calculated based on the minimum  and maximum values 
            derived from this dataset. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.#ctor(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32,System.Int32)">
            <summary>
             This constructor creates a new LinearAutoScale object based on the data  values in an array of datasets. 
            </summary>
            <param name="datasets"> An array of datasets. The auto-scale values are calculated based on the minimum  
            and maximum values derived from these datasets. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             This constructor creates a new LinearAutoScale object based on the initial scaling values of  an 
             PhysicalCoordinates object. 
            </summary>
            <param name="transform"> The auto-scale values are calculated based on the minimum  and maximum scaling 
            values of this PhysicalCoordinates object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new LinearAutoScale object based on the initial scaling values of  an 
             PhysicalCoordinates object. 
            </summary>
            <param name="transform"> The auto-scale values are calculated based on the minimum  and maximum scaling 
            values of this PhysicalCoordinates object. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new LinearAutoScale object based on the supplied initial scaling values. 
            </summary>
            <param name="rmin"> The auto-scale values are calculated using this minimum value as the starting point. </param>
            <param name="rmax"> The auto-scale values are calculated using this maximum value as the starting point. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.ErrorCheck(System.Int32)">
            <summary>
              Checks the LinearAutoScale object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.Copy(com.quinncurtis.chart2dnet.LinearAutoScale)">
            <summary>
              Copies the source LinearAutoScale object. 
            </summary>
            <param name="source"> The source LinearAutoScale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.Clone">
            <summary>
             Returns an object that is a clone of this LinearAutoScale object. 
            </summary>
            <returns> Returns a clone of this LinearAutoScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.CalcLabelStart(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
             Calculates the auto-scale tick mark and label starting value,  based on the rounding mode and the 
             calculated tick intervals. 
            </summary>
            <param name="rmin"> The current auto-scale minimum. </param>
            <param name="rmax"> The current auto-scale maximum. </param>
            <param name="rtickinterval"> The current auto-scale minor tick interval value. </param>
            <param name="nthtick"> The current auto-scale value for the number of minor ticks  per major tick interval. </param>
            <returns> Returns the auto-scale tick mark and label starting value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.CalcRoundAxisValues(System.Double,System.Double,System.Int32)">
            <summary>
             Calculates the auto-scale values based on the current setup. 
            </summary>
            <param name="raxmin"> The current auto-scale minimum. </param>
            <param name="raxmax"> The current auto-scale maximum. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAutoScale.GetTickInterval">
            <summary>
             Returns the calculated minor tick interval value of the auto-scale setup. 
            </summary>
            <returns> Returns the calculated tick interval value of the auto-scale setup.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.LinearAxis">
            <summary>
              The LinearAxis class implements a linear axis that has  evenly spaced major and minor tick marks.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.LinearAxis.axisTickSpace">
            <summary>
             The minor tick mark spacing.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.#ctor">
            <summary>
              The default LinearAxis constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.InitDefaults">
            <summary>
              Initializes default values for the axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.ErrorCheck(System.Int32)">
            <summary>
              Checks the current axis object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.Copy(com.quinncurtis.chart2dnet.LinearAxis)">
            <summary>
              Copies the source axis. 
            </summary>
            <param name="source"> The source axis object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.Clone">
            <summary>
             Returns an object that is a clone of this LinearAxis object. 
            </summary>
            <returns> Returns a clone of this LinearAxis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.FixAxisValues">
            <summary>
             This method detects and corrects, without generating an error, the most common error in 
             setting axis endpoint values:  setting the starting and ending value of the axis to the same value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32)">
            <summary>
              This constructor creates a new LinearAxis object of the specified type and  scales it to match the 
              minimum and maximum values of the specified PhysicalCoordinates object. 
            </summary>
            <param name="transform"> Sets the minimum and maximum value of the axis to the associated  minimum and 
            maximum value of the coordinate system transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Double,System.Double)">
            <summary>
              This constructor creates a new LinearAxis object of a specified type, and scales it to match  
              the specified minimum and maximum values. 
            </summary>
            <param name="transform"> Places the axes in the coordinate system defined by transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS). </param>
            <param name="minval"> Sets the minimum value for the axis. </param>
            <param name="maxval"> Sets the maximum value for the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.CalcAutoAxis">
            <summary>
              This auto-axis method uses the current minimum and maximum values in the chartObjScale  object to 
              determine the minimum and maximum value for the axis, and the  appropriate minor and major tick mark spacing.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.CalcAutoAxis(System.Double,System.Double)">
            <summary>
              This auto-axis method uses the supplied axis extents and calculates the  appropriate minor and major 
              tick mark spacing. 
            </summary>
            <param name="rmin"> The axis minimum value </param>
            <param name="rmax"> The axis maximum value</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.SetAxisTicks(System.Double,System.Double,System.Int32)">
            <summary>
              This method is used to initialize the minor and major tick mark spacing,  and the tick mark origin. 
            </summary>
            <param name="tickorigin"> The tick marks start at this value. </param>
            <param name="tickspace"> Specifies the spacing between minor tick marks. </param>
            <param name="ntickspermajor"> Specifies the number of minor tick marks per major tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.SetAxisTicks(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
              This method is used to initialize the minor and major tick mark spacing,  the tick mark origin, the tick
               marks lengths and the tick mark direction. 
            </summary>
            <param name="tickorigin"> The tick marks start at this value. </param>
            <param name="tickspace"> Specifies the spacing between minor tick marks. </param>
            <param name="nminortickspermajor"> Specifies the number of minor tick marks per major tick mark. </param>
            <param name="minorticklength"> The length of minor tick marks, in window device coordinates. </param>
            <param name="majorticklength"> The length of major tick marks, in window device coordinates. </param>
            <param name="tickdir"> The direction of the tick marks. Use one of the tick mark direction  constants: 
            AXIS_MIN, AXIS_CENTER, or AXIS_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.CalcAxisLabelsDecimalPos">
            <summary>
              Returns an integer value that is the number  of digits that should be displayed to the right of the 
              decimal point  when labeling the major axis tick marks.  The value is calculated based on the current 
              minor and major tick mark  values. 
            </summary>
            <returns> Returns the number of digits that should be displayed to the right  of the decimal point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.DrawLinearAxis(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              This methods draw the axis using the specified general path.  The defineLinearAxis method defines the 
              axis tick marks for a linear axis and the drawAxis  method (from the underlying Axis class) draws the 
              axis lines and  the axis tick marks using the specified general path. 
            </summary>
            <param name="path"> The axis is drawn using this general path object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.DefineLinearAxisTicks">
            <summary>
              This method defines the tick marks for a linear axis using the  axis minimum and maximum values, 
              the tick mark origin and the  tick mark spacing.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the axis is drawn using that path.  
              Once the path is complete it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance 
              of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.GetCompatibleAxisLabels">
            <summary>
             This method returns an AxisLabels object that is compatible  with this LinearAxis object. 
            </summary>
            <returns> Returns an AxisLabels object that is compatible  with this LinearAxis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.SetAxisTickSpace(System.Double)">
            <summary>
              Sets the minor tick mark spacing. 
            </summary>
            <param name="tickspace"> Sets the minor tick mark spacing.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearAxis.GetAxisTickSpace">
            <summary>
              Returns the minor tick mark spacing. 
            </summary>
            <returns> Returns the minor tick mark spacing.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.LinearAxis.AxisTickSpace">
            <summary>
              Get/Set the minor tick mark spacing. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.LinearScale">
            <summary>
              The LinearScale class implements a linear coordinate system for a single  coordinate, x or y. 
              Two such scales are used to provide the scaling routines  for x and y in an PhysicalCoordindates 
              derived class, CartesianCoordinates, for example.  This allows for different x and y scale types 
              (linear, logarithmic, time)  to be installed independently for x- and y-coordinates.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.InitDefaults">
            <summary>
              Initializes default values for the plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.AdjustLinearScaleForCommonErrors">
            <summary>
             This method detects and corrects without generating an error the most common error in setting  
             the scale endpoint values: setting the starting and ending value of the scale to the same value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.ErrorCheck(System.Int32)">
            <summary>
              Checks the current scale object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.Copy(com.quinncurtis.chart2dnet.LinearScale)">
            <summary>
              Copies the source scale. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.Clone">
            <summary>
             Returns an object that is a clone of this LinearScale object. 
            </summary>
            <returns> Returns a clone of this LinearScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.#ctor">
            <summary>
             The default LinearScale constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.#ctor(System.Double,System.Double)">
            <summary>
              This constructor creates a new LinearScale using the specified minimum and maximum values. 
            </summary>
            <param name="rstart"> Sets the minimum value for the scale. </param>
            <param name="rstop"> Sets the maximum value for the scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.GetCompatibleAutoScale">
            <summary>
             This method returns an AutoScale object that is compatible  with this LinearScale object, 
             an LinearAutoScale object. 
            </summary>
            <returns> Returns an AutoScale object that is compatible  with this LinearScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.GetCompatibleAxis">
            <summary>
             This method returns an Axis object that is compatible  with this LinearScale object, an LinearAxis object. 
            </summary>
            <returns> Returns an Axis object that is compatible  with this LinearScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.PhysToWorkingScale(System.Double)">
            <summary>
             This method converts an x- or y-coordinate from physical coordinates to working coordinates. 
            </summary>
            <param name="v"> The coordinate value that is converted from physical coordinates to working coordinates. </param>
            <returns> Returns the value of the coordinate in working coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.WorkingToPhysScale(System.Double)">
            <summary>
             This method converts an x- or y-coordinate from working coordinates to physical coordinates. 
            </summary>
            <param name="v"> The coordinate value that is converted from working coordinates to physical coordinates. </param>
            <returns> Returns the value of the coordinate in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LinearScale.CoordinateAdd(System.Double,System.Double)">
            <summary>
             This method adds an increment to an x- or y-coordinate in physical coordinates.  While a simple add operation 
             in this scale, in other scales it may be a much  more involved calculation. 
            </summary>
            <param name="v"> The coordinate value that is incremented. </param>
            <param name="rincrement"> The increment value. </param>
            <returns> Returns the new value in physical coordinates.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.LineGapPlot">
            <summary>
              The LineGapPlot class extends the GroupPlot class and i  displays a line gap chart. The number of 
              groups of the dataset must be two.  A line gap chart consists of two lines plots where  the area 
              between the two lines is filled with a contrasting color, highlighting  the difference between the 
              two lines. The X,Y[0] values of the group dataset  represent the first line plot, and the X,Y[1] 
              values of the group dataset  represent the second line plot. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.#ctor">
            <summary>
             The default LineGapPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the LineGapPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.InitDefaults">
            <summary>
              Initializes default values for the LineGapPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.Copy(com.quinncurtis.chart2dnet.LineGapPlot)">
            <summary>
              Copies the source LineGapPlot object. 
            </summary>
            <param name="source"> The source LineGapPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.Clone">
            <summary>
             Returns an object that is a clone of this LineGapPlot object. 
            </summary>
            <returns> Returns a clone of this LineGapPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new LineGapPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new LineGapPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new LineGapPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new LineGapPlot object. </param>
            <param name="dataset"> The line gap plot will represent the values in this group data set.  The number of 
            groups in this group dataset must be two. The X,Y[0] values of the group dataset  represent the first line 
            plot, and the X,Y[1] values of the group dataset  represent the second line plot. </param>
            <param name="attrib"> Specifies the attributes (line and fill color) for the fill area.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.InitLineGapPlot(com.quinncurtis.chart2dnet.GroupDataset,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of an LineGapPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="dataset"> The line gap plot will represent the values in this group data set.  The number of 
            groups in this group dataset must be two. The X,Y[0] values of the group dataset  represent the first line 
            plot, and the X,Y[1] values of the group dataset  represent the second line plot. </param>
            <param name="attrib"> Specifies the attributes (line and fill color) for the fill area.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.DrawLineGapPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a line gap plot using the current line plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The line gap plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the group plot object  is drawn in 
              the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LineGapPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects one of the data points. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.LogAutoScale">
            <summary>
              The LogAutoScale class is designed to be used with  logarithmic coordinates and is  used to scale 
              the plotting area of graphs and to set the minimum  and maximum values of the axes displayed in the graphs.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.InitDefaults">
            <summary>
              Initializes default values for the autoscale object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.#ctor">
            <summary>
             This default LogAutoScale constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.#ctor(com.quinncurtis.chart2dnet.ChartDataset,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new LogAutoScale object based on the data  values in a dataset. 
            </summary>
            <param name="dataset"> The auto-scale values are calculated based on the minimum  and maximum values 
            derived from this dataset. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTO_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.#ctor(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32,System.Int32)">
            <summary>
             This constructor creates a new LogAutoScale object based on the data  values in an array of datasets. 
            </summary>
            <param name="datasets"> An array of datasets. The auto-scale values are calculated based on the minimum  
            and maximum values derived from these datasets. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             This constructor creates a new LogAutoScale object based on the initial scaling values of  an 
             PhysicalCoordinates object. 
            </summary>
            <param name="transform"> The auto-scale values are calculated based on the minimum  and maximum 
            scaling values of this PhysicalCoordinates object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new LogAutoScale object based on the initial scaling values of  an 
             PhysicalCoordinates object. 
            </summary>
            <param name="transform"> The auto-scale values are calculated based on the minimum  and maximum scaling 
            values of this PhysicalCoordinates object. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new LogAutoScale object based on the supplied initial scaling values. 
            </summary>
            <param name="rmin"> The auto-scale values are calculated using this minimum value as the starting point. </param>
            <param name="rmax"> The auto-scale values are calculated using this maximum value as the starting point. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.Copy(com.quinncurtis.chart2dnet.LogAutoScale)">
            <summary>
              Copies the source LogAutoScale object. 
            </summary>
            <param name="source"> The source LogAutoScale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.ErrorCheck(System.Int32)">
            <summary>
              Checks the LogAutoScale object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.Clone">
            <summary>
             Returns an object that is a clone of this LogAutoScale object. 
            </summary>
            <returns> Returns a clone of this LogAutoScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.CalcLogMin(System.Double,System.Double,System.Int32)">
            <summary>
             Calculates the auto-scale minimum value for a log scale. 
            </summary>
            <param name="rmin"> The current auto-scale minimum. </param>
            <param name="rmax"> The current auto-scale maximum. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR). </param>
            <returns> Returns the auto-scale minimum value for a log scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.CalcLogMax(System.Double,System.Double,System.Int32)">
            <summary>
             Calculates the auto-scale maximum value for a log scale. 
            </summary>
            <param name="rmin"> The current auto-scale minimum. </param>
            <param name="rmax"> The current auto-scale maximum. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR). </param>
            <returns> Returns the auto-scale maximum value for a log scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAutoScale.CalcRoundAxisValues(System.Double,System.Double,System.Int32)">
            <summary>
             Calculates the auto-scale values based on the current setup. 
            </summary>
            <param name="raxmin"> The current auto-scale minimum. </param>
            <param name="raxmax"> The current auto-scale maximum. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR).</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.LogAxis">
            <summary>
              The LogAxis class implements a logarithmic axis where the major  tick marks are placed at logarithmic 
              intervals and the minor tick marks are  placed between major tick marks using a linear interval.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.LogAxis.logTickFormat">
            <summary>
             This parameter specifies which minor tick marks are flagged for labels.  The values are interpreted 
             as follows:  0 No minor tick mark labels  1 Place a label at tick mark 0 in each decade.  2 Place a 
             label at minor tick marks 1, 3 and 5 in each decade.  3 Place a label at minor tick marks 0, 1, 2, 3 
             and 5 in each decade.  4 Place a label at minor tick marks 0, 1, 2, 3, 4 and 5 in each decade.  5 Place 
             a label at minor tick marks 0, 1, 2, 3, 4, 5 and 6 in each decade.  6 Place a label at minor tick 
             marks 0, 1, 2, 3, 4, 5, 6 and 7 in each decade.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.#ctor">
            <summary>
              The default LogAxis constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.InitDefaults">
            <summary>
              Initializes default values for the axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.ErrorCheck(System.Int32)">
            <summary>
              Checks the current axis object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.Copy(com.quinncurtis.chart2dnet.LogAxis)">
            <summary>
              Copies the source axis. 
            </summary>
            <param name="source"> The source axis object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.Clone">
            <summary>
             Returns an object that is a clone of this LogAxis object. 
            </summary>
            <returns> Returns a clone of this LogAxis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.FixAxisValues">
            <summary>
             This method detects and corrects, without generating an error, the most common error in setting log axis 
             endpoint values:  setting an axis endpoint to a value less than or equal to 0, and setting the starting 
             and ending value of the axis to the same value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32)">
            <summary>
              This constructor creates a new LogAxis object of the specified type and  scales it to match the 
              minimum and maximum values of the specified PhysicalCoordinates object. 
            </summary>
            <param name="transform"> Sets the minimum and maximum value of the axis to the associated  minimum 
            and maximum value of the coordinate system transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Double,System.Double)">
            <summary>
              This constructor creates a new LogAxis object of a specified type, and scales it to match  the 
              specified minimum and maximum values. 
            </summary>
            <param name="transform"> Places the axes in the coordinate system defined by transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS). </param>
            <param name="minval"> Sets the minimum value for the axis. </param>
            <param name="maxval"> Sets the maximum value for the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.CalcAutoAxis">
            <summary>
              This method uses the current minimum and maximum values in the chartObjScale  object to determine 
              the minimum and maximum value for the axis, and the  appropriate tick mark spacing.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.CalcAutoAxis(System.Double,System.Double)">
            <summary>
              This auto-axis method uses the supplied axis extents and calculates the  appropriate ancillary properties. 
            </summary>
            <param name="rmin"> The axis minimum value </param>
            <param name="rmax"> The axis maximum value</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.SetAxisTicks(System.Double,System.Int32)">
            <summary>
              This method is used to initialize the minor and major tick mark spacing,  and the tick mark origin. 
            </summary>
            <param name="tickorigin"> The tick marks start at this value. </param>
            <param name="nlogtickformat"> This parameter specifies which minor tick marks are flagged for labels. 
            The values are interpreted as follows:  0 No minor tick mark labels  1 Place a label at tick mark 0 in 
            each decade.  2 Place a label at minor tick marks 1, 3 and 5 in each decade.  3 Place a label at minor 
            tick marks 0, 1, 2, 3 and 5 in each decade.  4 Place a label at minor tick marks 0, 1, 2, 3, 4 and 5 in 
            each decade.  5 Place a label at minor tick marks 0, 1, 2, 3, 4, 5 and 6 in each decade.  6 Place a 
            label at minor tick marks 0, 1, 2, 3, 4, 5, 6 and 7 in each decade.  7 Place a label at minor tick 
            marks 0, 1, 2, 3, 4, 5, 6, 7 and 8 in each decade.  8 Place a label at minor tick 
            marks 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9 in each decade.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.SetAxisTicks(System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
              This method is used to initialize the minor and major tick mark spacing,  and the tick mark origin. 
            </summary>
            <param name="origin"> The tick marks start at this value. </param>
            <param name="nlogtickformat"> This parameter specifies which minor tick marks are flagged for labels.  
            The values are interpreted as follows:  0 No minor tick mark labels  1 Place a label at tick mark 0 in 
            each decade.  2 Place a label at minor tick marks 1, 3 and 5 in each decade.  3 Place a label at minor 
            tick marks 0, 1, 2, 3 and 5 in each decade.  4 Place a label at minor tick marks 0, 1, 2, 3, 4 and 5 
            in each decade.  5 Place a label at minor tick marks 0, 1, 2, 3, 4, 5 and 6 in each decade.  6 Place 
            a label at minor tick marks 0, 1, 2, 3, 4, 5, 6 and 7 in each decade.  7 Place a label at minor tick 
            marks 0, 1, 2, 3, 4, 5, 6, 7 and 8 in each decade.  8 Place a label at minor tick 
            marks 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9 in each decade. </param>
            <param name="minorticklength"> The length of minor tick marks, in window device coordinates. </param>
            <param name="majorticklength"> The length of major tick marks, in window device coordinates. </param>
            <param name="tickdir"> The direction of the tick marks. Use one of the tick mark direction  constants: 
            AXIS_MIN, AXIS_CENTER, or AXIS_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.DrawLogAxis(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              This methods draw the axis using the specified general path.  Then defineLogAxisTicks method defines the 
              axis tick marks for a logarithmic axis and the drawAxis  method (from the underlying Axis class) draws 
              the axis lines and  the axis tick marks using the specified general path. 
            </summary>
            <param name="path"> The axis is drawn using this general path object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.CalcAxisLabelsDecimalPos">
            <summary>
              A dummy method. The number of digits to the right of the decimal varies from  tick mark to tick mark 
              for the axis labels. Send -99 back as a flag.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.CheckLogTickFormat(System.Int32)">
            <summary>
              This method check to see of a tick mark should be flagged for a label,  based on the current value 
              of the logTickFormat field.  tick mark to tick mark for the axis labels. 
            </summary>
            <param name="i"> the index of the current minor tick mark. </param>
            <returns> Returns true if the current tick mark should be flagged for a label.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.DefineLogAxisTicks">
            <summary>
              This method defines the tick marks for a logarithmic axis using the  axis minimum and maximum values, 
              the tick mark origin and the  tick mark format.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.CalcAxisLabelsDecimalPos(System.Double)">
            <summary>
              Returns an integer value that is the number  of digits that should be displayed to the right of the decimal 
              point  when labeling the axis tick marks.  The value is calculated based on the numeric value of the tick mark. 
            </summary>
            <param name="r"> The numeric value, in physical coordinates, of the tick mark. </param>
            <returns> Returns an integer value that is the number  of digits that should be displayed to the right of 
            the decimal point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the axis is drawn using that path.  
              Once the path is complete it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.GetCompatibleAxisLabels">
            <summary>
             This method returns an AxisLabels object that is compatible  with this LogAxis object. 
            </summary>
            <returns> Returns an AxisLabels object that is compatible  with this LogAxis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance 
              of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.SetLogTickFormat(System.Int32)">
            <summary>
              This method specifies which minor tick marks are flagged for labels. 
            </summary>
            <param name="nlogtickformat"> This parameter specifies which minor tick marks are flagged for labels.  
            The values are interpreted as follows:  0 No minor tick mark labels  1 Place a label at tick mark 0 in 
            each decade.  2 Place a label at minor tick marks 1, 3 and 5 in each decade.  3 Place a label at minor 
            tick marks 0, 1, 2, 3 and 5 in each decade.  4 Place a label at minor tick marks 0, 1, 2, 3, 4 and 5 
            in each decade.  5 Place a label at minor tick marks 0, 1, 2, 3, 4, 5 and 6 in each decade.  6 Place 
            a label at minor tick marks 0, 1, 2, 3, 4, 5, 6 and 7 in each decade.  7 Place a label at minor tick 
            marks 0, 1, 2, 3, 4, 5, 6, 7 and 8 in each decade.  8 Place a label at minor tick 
            marks 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9 in each decade.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogAxis.GetLogTickFormat">
            <summary>
              Returns the value of the logTickFormat field. 
            </summary>
            <returns> Returns the value of the logTickFormat field.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.LogAxis.LogTickFormat">
            <summary>
              Get/Set the value of the logTickFormat field. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.LogScale">
            <summary>	
             The LogScale class implements a logarithmic coordinate system for a single
             coordinate, x or y. Two such scales are used to provide the scaling routines
             for x and y in an PhysicalCoordindates derived class, CartesianCoordinates, for example.
             This allows for different x and y scale types (linear, logarithmic, time)
             to be installed independently for x- and y-coordinates.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.InitDefaults">
            <summary>	
             Initializes default values for the plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.AdjustLogScaleForCommonErrors">
            <summary>
             This method detects and corrects, without generating an error, the most common error in 
             setting log scale endpoint values:  setting an endpoint to a valueless than or equal to 0, 
             and setting the starting and ending value of the scale to the same value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.ErrorCheck(System.Int32)">
            <summary>
              Checks the LogScale object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.Copy(com.quinncurtis.chart2dnet.LogScale)">
            <summary>
              Copies the source scale. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.Clone">
            <summary>
             Returns an object that is a clone of this LogScale object. 
            </summary>
            <returns> Returns a clone of this LogScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.#ctor">
            <summary>
             The default LogScale constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.#ctor(System.Double,System.Double)">
            <summary>
              This constructor creates a new LogScale using the specified minimum and maximum values.  
              Do not use values less than or equal to 0. 
            </summary>
            <param name="rstart"> Sets the minimum value for the scale. </param>
            <param name="rstop"> Sets the maximum value for the scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.GetCompatibleAutoScale">
            <summary>
             This method returns an AutoScale object that is compatible  with this LogScale object, an LogAutoScale object. 
            </summary>
            <returns> Returns an AutoScale object that is compatible  with this LogScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.GetCompatibleAxis">
            <summary>
             This method returns an Axis object that is compatible  with this LogScale object, an LogAxis object. 
            </summary>
            <returns> Returns an Axis object that is compatible  with this LogScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.PhysToWorkingScale(System.Double)">
            <summary>
             This method converts an x- or y-coordinate from physical coordinates to working coordinates. 
            </summary>
            <param name="v"> The coordinate value that is converted from physical coordinates to working coordinates. </param>
            <returns> Returns the value of the coordinate in working coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.WorkingToPhysScale(System.Double)">
            <summary>
             This method converts an x- or y-coordinate from working coordinates to physical coordinates. 
            </summary>
            <param name="v"> The coordinate value that is converted from working coordinates to physical coordinates. </param>
            <returns> Returns the value of the coordinate in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.LogScale.CoordinateAdd(System.Double,System.Double)">
            <summary>
             This method adds an increment to an x- or y-coordinate in physical coordinates.  While a simple add 
             operation in this scale, in other scales it may be a much  more involved calculation. 
            </summary>
            <param name="v"> The coordinate value that is incremented. </param>
            <param name="rincrement"> The increment value. </param>
            <returns> Returns the new value in physical coordinates.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Marker">
            <summary>
             The Marker class implements movable lines and symbols that can be used as data cursors, and  data markers. 
            </summary>
            <see cref="T:com.quinncurtis.chart2dnet.DataCursor"/>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Marker.markerType">
            <summary>
             Specifies the shape of the current chart marker. Use one of the chart marker  constants: 
             MARKER_NULL, MARKER_VLINE, MARKER_HLINE, MARKER_CROSS,  MARKER_BOX or MARKER_HVLINE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Marker.markerSize">
            <summary>
             Specifies the size of the cross hair marker (MARKER_CROSS) and the  box marker (MARKER_BOX) 
             in window device coordinates.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.#ctor">
            <summary>
              The default Marker constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.ErrorCheck(System.Int32)">
            <summary>
              Checks the current marker object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.InitDefaults">
            <summary>
              Initializes default values for the marker.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.Copy(com.quinncurtis.chart2dnet.Marker)">
            <summary>
              Copies the source marker. 
            </summary>
            <param name="source"> The source marker object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.Clone">
            <summary>
             Returns an object that is a clone of this Marker object. 
            </summary>
            <returns> Returns a clone of this Marker object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.InitChartMarker(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
              This method initializes an Marker using the specified marker scale,  marker type, marker position and marker 
              size. 
            </summary>
            <param name="transform"> Places the marker in the coordinate system defined by transform. </param>
            <param name="nmarkertype"> Specifies the shape of the current chart marker. Use one of the chart marker  
            constants: MARKER_NULL, MARKER_VLINE, MARKER_HLINE, MARKER_CROSS,  MARKER_BOX or MARKER_HVLINE. </param>
            <param name="x"> Specifies the x-value of the marker position </param>
            <param name="y"> Specifies the y-value of the marker position </param>
            <param name="rsize"> Specifies the size of the cross hair marker (MARKER_CROSS) and the  box marker 
            (MARKER_BOX) in window device coordinates. </param>
            <param name="npostype"> Specifies the if the position of the marker is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants: DEV_POS, PHYS_POS, 
            NORM_GRAPH_POS, NORM_PLOT_POS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Int32,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
              This constructor creates a new Marker object using the specified scale,  marker type, marker position and 
              marker size. 
            </summary>
            <param name="transform"> Places the marker in the coordinate system defined by transform. </param>
            <param name="nmarkertype"> Specifies the shape of the current chart marker. Use one of the chart marker  
            constants: MARKER_NULL, MARKER_VLINE, MARKER_HLINE, MARKER_CROSS,  MARKER_BOX or MARKER_HVLINE. </param>
            <param name="x"> Specifies the x-value of the marker position </param>
            <param name="y"> Specifies the y-value of the marker position </param>
            <param name="rsize"> Specifies the size of the cross hair marker (MARKER_CROSS) and the  box marker 
            (MARKER_BOX) in window device coordinates. </param>
            <param name="npostype"> Specifies the if the position of the marker is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants: DEV_POS, PHYS_POS, 
            NORM_GRAPH_POS, NORM_PLOT_POS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new Marker object using the specified scale. 
            </summary>
            <param name="thetransform"> Places the marker in the coordinate system defined by transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.DrawMarker(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              This methods draw the marker using the specified general path. 
            </summary>
            <param name="path"> The marker is drawn using this general path object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The default CheckIntersection method. It test to see if the test point  is within the 
              intersectionTestDistance of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the marker is drawn using that path. 
              Once the path is complete it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.DrawReversibleMarker(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
              This methods draws the marker using the chartObjScale.DrawReversibleLine method, which allows XOR drawing. 
            </summary>
            <param name="chartviewcomponent"> The ChartView component the chart is in.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.SetMarkerType(System.Int32)">
            <summary>
             Sets the marker type. 
            </summary>
            <param name="nmarkertype"> Sets the marker type. Use one of the marker type constants:  MARKER_NULL, 
            MARKER_VLINE, MARKER_HLINE, MARKER_CROSS, MARKER_BOX or MARKER_HVLINE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.GetMarkerType">
            <summary>
             Returns the marker type. 
            </summary>
            <returns> Returns the marker type. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.Marker.SetMarkerType(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.SetMarkerSize(System.Double)">
            <summary>
             Sets the marker size. 
            </summary>
            <param name="rsize"> Sets the marker size in window device coordinates. The marker size applies  only to 
            MARKER_BOX and MARKER_CROSS marker types.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Marker.GetMarkerSize">
            <summary>
             Returns the marker size. 
            </summary>
            <returns> Returns the marker size in window device coordinates.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Marker.MarkerType">
            <summary>
             Set/Get the marker type. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Marker.MarkerSize">
            <summary>
             Set/Get the marker size. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.MoveData">
            <summary>
              The MoveData class extends the DataCursor class, providing additional methods  that allow the 
              user to move individual points in data based objects using the mouse.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveData.selectedPlotObj">
            <summary>
             Specifies the currently selected plot object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveData.selectedDataset">
            <summary>
             Specifies the dataset associate with the currently selected plot object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveData.moveDataActive">
            <summary>
             True if a move operation is active.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveData.endMouseLocation">
            <summary>
             Specifies the ending position of the move data cursor in window device coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveData.moveMode">
            <summary>
             Specifies whether the data point can be move in the x, y or xy direction.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveData.nearestPoint">
            <summary>
             Holds information regarding the nearest data point.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveData.hitTestThreshold">
            <summary>
             A data point must be within this distance of the test point, in DEV_POS coordinates  in order for it 
             to be considered a hit.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveData.xYDatasetSwap">
            <summary>
             If the y-values of a group dataset are  used to display on the x-axis, for example in a floating bar style
             gantt chart, you need to set xYDatasetSwap true to swap the x and y values propery when an object is moved.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.ErrorCheck(System.Int32)">
            <summary>
              Checks the MoveData object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.Copy(com.quinncurtis.chart2dnet.MoveData)">
            <summary>
              Copies the source MoveData. 
            </summary>
            <param name="source"> The source MoveData object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.#ctor">
            <summary>
              The default MoveData constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.#ctor(com.quinncurtis.chart2dnet.ChartView,com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new MoveData object using the specified  component and scale. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="transform"> The PhysicalCoordinates object associated with the MoveData object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.#ctor(com.quinncurtis.chart2dnet.ChartView,com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Windows.Forms.MouseButtons)">
            <summary>
              This constructor creates a new MoveData object using the specified  component and scale. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="transform"> The PhysicalCoordinates object associated with the MoveData object. </param>
            <param name="buttonmask"> Specifies the mouse button that is trapped to invoke a move.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.IsMoveableSimplePlotObj(com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
              This method checks and returns true if an simple plot object has movable data. 
            </summary>
            <param name="chartobj"> A chart object. </param>
            <returns> Returns true if the chart object has movable data.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.IsMoveableGroupPlotObj(com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
              This method checks and returns true if a group plot object has movable group data. 
            </summary>
            <param name="chartobj"> A chart object. </param>
            <returns> Returns true if the chart object has movable data.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.IsMoveablePolarPlotObj(com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
              This method checks and returns true if a polar plot object has movable data. 
            </summary>
            <param name="chartobj"> A chart object. </param>
            <returns> Returns true if the chart object has movable data.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mousePressed event listener for this object. When the specified mouse  button is pressed, the data 
              cursor starts tracking the mouse cursor. If  an Plot object with movable data is in the graph, the 
              rout1ine finds  the data point nearest the data cursor. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseDragged event listener for this object. It causes the current  data cursor object to track the 
              mouse cursor. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseReleased event listener for this object. Once the specified mouse  button is pressed, 
              then released, the data cursor stops tracking the mouse cursor  and disappears. If a nearest data 
              point was found when the mousePressed event  was triggered, data values in the associated ChartDataset 
              object are updated  with the physical coordinates of the ending mouse position. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.FindObj(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              This method finds the movable plot object nearest the test point. 
            </summary>
            <param name="testpoint"> The current position of the mouse in window device coordinates. </param>
            <returns> If a movable plot object is found, a reference to that object is  returned. Otherwise 
            null is returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.SetMoveMode(System.Int32)">
            <summary>
              Sets the move mode that is associated with moving points. 
            </summary>
            <param name="movemode"> The move mode that is to be associated with moving objects.  Use one of the move 
            mode constants: MOVE_X, MOVE_Y or MOVE_XY.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.GetMoveMode">
            <summary>
              Returns the move mode that is associated with moving points. 
            </summary>
            <returns> Returns the move mode that is associated with moving objects. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.MoveData.SetMoveMode(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.SetHitTestThreshold(System.Double)">
            <summary>
              A data point must be within a threshold distance of the test point, in DEV_POS coordinates  in order for 
              it to be considered a hit. This method sets that value. 
            </summary>
            <param name="nearvalue"> A data point must be within this threshold distance of the test point, in DEV_POS 
            coordinates  in order for it to be considered a hit.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveData.GetHitTestThreshold">
            <summary>
              Returns the threshold distance used to determine if the test point is close enough to at data  point 
              to be considered a hit. 
            </summary>
            <returns> Returns the nearness test value. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.MoveData.SetHitTestThreshold(System.Double)"/>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.MoveData.MoveMode">
            <summary>
              Set/Get the move mode that is associated with moving points. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.MoveData.HitTestThreshold">
            <summary>
              A data point must be within a threshold distance of the test point, in DEV_POS coordinates  in order 
              for it to be considered a hit. This method sets that value. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.MoveData.XYDatasetSwap">
            <summary>
             If the y-values of a group dataset are  used to display on the x-axis, for example in a floating bar style
             gantt chart, you need to set xYDatasetSwap true to swap the x and y values propery when an object is moved.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.MoveObj">
            <summary>
              The MoveObj class extends the MouseListener class, providing additional methods  that allow the 
              user to move chart objects using the mouse.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveObj.startMouseLocation">
            <summary>
              Specifies the starting position of the move object in window device coordinates. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveObj.endMouseLocation">
            <summary>
              Specifies the ending position of the move object in window device coordinates. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveObj.selectedObj">
            <summary>
             Specifies the currently selected chart object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveObj.moveObjMode">
            <summary>
             Specifies whether the object can be move in the x, y or xy direction.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.MoveObj.moveObjectFilter">
            <summary>
             The class name of the base class that  is used to filter the desired class objects. The string 
             "ChartText" would  cause the rout1ine to only move objects derived from the ChartText class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.ErrorCheck(System.Int32)">
            <summary>
              Checks the current object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.Copy(com.quinncurtis.chart2dnet.MoveObj)">
            <summary>
              Copies the source MoveObj. 
            </summary>
            <param name="source"> The source MoveObj object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.Clone">
            <summary>
             Returns an object that is a clone of this MoveObj object. 
            </summary>
            <returns> Returns a clone of this MoveObj object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.#ctor">
            <summary>
              The default MoveObj constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.#ctor(com.quinncurtis.chart2dnet.ChartView)">
            <summary>
              This constructor creates a new MoveObj object using the specified  component. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.#ctor(com.quinncurtis.chart2dnet.ChartView,System.Windows.Forms.MouseButtons,System.String)">
            <summary>
              This constructor creates a new MoveObj object using the specified  component. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="buttonmask"> Specifies the mouse button that is trapped to invoke a move. </param>
            <param name="object1filter"> The class name of the base class that  is used to filter the desired class 
            objects. The string "ChartText" would  cause the rout1ine to only move objects derived from the 
            ChartText class. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.#ctor(com.quinncurtis.chart2dnet.ChartView,System.Windows.Forms.MouseButtons)">
            <summary>
              This constructor creates a new MoveObj object using the specified  component. 
            </summary>
            <param name="component"> A reference to the ChartView object that the chart is placed in. </param>
            <param name="buttonmask"> Specifies the mouse button that is trapped to invoke a move.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mousePressed event listener for this object. When the specified mouse  button is pressed, the 
              nearest movable chart object is located. A bounding  box is drawn around the object and tracks the 
              mouse cursor from that point on. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.OnClick(System.EventArgs)">
            <summary>
              The OnClick event listener for this object. Once the specified mouse  button is pressed, then 
              released, the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.OnDoubleClick(System.EventArgs)">
            <summary>
              The OnDoubleClick event listener for this object. Once the specified mouse  button is pressed, 
              then released, the zoom rectangle tracking the mouse cursor  disappears. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.IsMoveableObject(com.quinncurtis.chart2dnet.GraphObj)">
            <summary>
              This method checks and returns true if a graph object is movable. 
            </summary>
            <param name="chartobj"> A chart object. </param>
            <returns> Returns true if the chart object is movable.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.DrawBoundingBox(System.Drawing.Graphics,com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              This method draws the bounding box of a chart object The bounding box of  the selected chart object 
              tracks the mouse cursor as the mouse is dragged. 
            </summary>
            <param name="g2"> Specifies a graphics context. </param>
            <param name="pstart"> Specifies the mouse position when the mouse button was pressed. </param>
            <param name="pstop"> Specifies the current position of the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseDragged event listener for this object. The bounding box of  the selected chart object tracks 
              the mouse cursor as the mouse is dragged. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
              The mouseReleased event listener for this object. When the specified mouse  button is pressed, then 
              released, the selected objects bounding box stops tracking the  mouse cursor and disappears. The 
              position of the selected object is updated  to reflect the ending position of the mouse. 
            </summary>
            <param name="mouseevent"> The mouse event contains status information about1 the mouse.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.FindObj(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              This method finds the movable chart object nearest the test point. 
            </summary>
            <param name="testpoint"> The current position of the mouse in window device coordinates. </param>
            <returns> If a movable chart object is found, a reference to that object is  returned. Otherwise 
            null is returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.SetMoveObjMode(System.Int32)">
            <summary>
              Sets the move mode that is associated with moving objects. 
            </summary>
            <param name="movemode"> The move mode that is to be associated with moving objects.  Use one of the move 
            mode constants: MOVE_X, MOVE_Y or MOVE_XY.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.GetMoveObjMode">
            <summary>
              Returns the move mode that is associated with moving objects. 
            </summary>
            <returns> Returns the move mode that is associated with moving objects.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.SetMoveObjectFilter(System.String)">
            <summary>
              Sets the object filter used to qualify the selection of objects. 
            </summary>
            <param name="objfilter"> The class name of the base class that  is used to filter the desired class 
            objects. The string "ChartText" would  cause the rout1ine to only move objects derived from the 
            ChartText class.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MoveObj.GetMoveObjectFilter">
            <summary>
              Returns the move object filter that qualifies selected objects. 
            </summary>
            <returns> Returns the move object filter that qualifies selected objects.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.MoveObj.MoveObjMode">
            <summary>
              Get/Set the move mode that is to be associated with moving objects.  Use one of the move mode 
              constants: MOVE_X, MOVE_Y or MOVE_XY.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.MoveObj.MoveObjectFilter">
            <summary>
              The class name of the base class that  is used to filter the desired class objects. The string 
              "ChartText" would  cause the rout1ine to only move objects derived from the ChartText class. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.MultiLinePlot">
            <summary>
              The MultiLinePlot class extends the GroupPlot class and  displays group data in multi-line format. 
              A group dataset with 4 groups will  display four separate line plots. The y-values for each group 
              of the dataset  are used as the y-values for each line in the plot. Each line plot share  the same 
              x-values of the group DisplayDataset.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.#ctor">
            <summary>
              The default MultiLinePlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the MultiLinePlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.InitDefaults">
            <summary>
              Initializes default values for the MultiLinePlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.Copy(com.quinncurtis.chart2dnet.MultiLinePlot)">
            <summary>
              Copies the source MultiLinePlot object. 
            </summary>
            <param name="source"> The source MultiLinePlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.Clone">
            <summary>
             Returns an object that is a clone of this MultiLinePlot object. 
            </summary>
            <returns> Returns a clone of this MultiLinePlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new MultiLinePlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new MultiLinePlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,com.quinncurtis.chart2dnet.ChartAttribute[])">
            <summary>
              This constructor creates a new MultiLinePlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new MultiLinePlot object. </param>
            <param name="dataset"> The multi-line plot will represent the values in this group data set. </param>
            <param name="attribs"> An array of ChartAttribute objects, size datasets.nNumGroups  specify the 
            attributes (line color and line style) for each group of the multi-line plot. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.InitMultiLinePlot(com.quinncurtis.chart2dnet.GroupDataset,com.quinncurtis.chart2dnet.ChartAttribute[])">
            <summary>
              Sets the properties of a multi-line plot.  A multi line plot plots the y-values for a given group 
              number as a contiguous line.  There is no cumulative summing of group values as in the case of a 
              stacked line plot. 
            </summary>
            <param name="dataset"> The multi-line plot will represent the values in this group data set. </param>
            <param name="attribs"> An array of ChartAttribute objects, size datasets.nNumGroups  specify 
            the attributes (line color and line style) for each group of the multi-line plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.DrawMultiLinePlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a multi-line plot using the current multi-line plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The multi-line plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the group plot object  is 
              drawn in the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.MultiLinePlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point is near one of the data points. 
            </summary>
            <param name="testpoint"> The test point. </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.NearestPointData">
            <summary>
             The NearestPointData class is used to organize the data returned by  the routines that search a 
             graph for data values nearest the supplied  test point.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NearestPointData.nearestPoint">
            <summary>
             The data point nearest the test point, in physical coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NearestPointData.actualPoint">
            <summary>
             The actual location of the cursor, in physical coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NearestPointData.nearestPointMinDistance">
            <summary>
             The distance between the test point and the nearest data point, units depend on the nearness test algorithm.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NearestPointData.nearestPointIndex">
            <summary>
             The index of the nearestPoint in the test dataset (group and simple datasets).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NearestPointData.nearestGroupIndex">
            <summary>
             The group number of the nearestPoint in the test dataset (group datasets only).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NearestPointData.nearestPointValid">
            <summary>
             Set to true if a nearest data point is found.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NearestPointData.#ctor">
            <summary>
             The default constructor for the NearestPointData class
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NearestPointData.Copy(com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Copies the source NearestPointData object. 
            </summary>
            <param name="source"> The source NearestPointData object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NearestPointData.Clone">
            <summary>
             Returns an object that is a clone of this NearestPointData object. 
            </summary>
            <returns> Returns a clone of this NearestPointData object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NearestPointData.GetNearestPoint">
            <summary>
             Returns the data point nearest the test point, in physical coordinates. 
            </summary>
            <returns> Returns the data point nearest the test point, in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NearestPointData.GetActualPoint">
            <summary>
             Returns the data point nearest the test point, in physical coordinates. 
            </summary>
            <returns> Returns the data point nearest the test point, in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NearestPointData.GetNearestPointMinDistance">
            <summary>
             Returns the distance between the test point and the nearest data point, in physical coordinates. 
            </summary>
            <returns> Returns the distance between the test point and the nearest data point, in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NearestPointData.GetNearestPointIndex">
            <summary>
             Returns the index of the nearestPoint in the test dataset (group and simple datasets). 
            </summary>
            <returns> Returns the index of the nearestPoint in the test dataset (group and simple datasets).</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NearestPointData.GetNearestGroupIndex">
            <summary>
             Returns the group number of the nearestPoint in the test dataset (group datasets only). 
            </summary>
            <returns> Returns the group number of the nearestPoint in the test dataset (group datasets only).</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NearestPointData.GetNearestPointValid">
            <summary>
             Returns the group number of the nearestPoint in the test dataset (group datasets only). 
            </summary>
            <returns> Returns the group number of the nearestPoint in the test dataset (group datasets only).</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NearestPointData.NearestPoint">
            <summary>
             Get nearest data point to the cursor, in physical coordinates. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NearestPointData.ActualPoint">
            <summary>
             Get the actual location of the cursor, in physical coordinates. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NearestPointData.NearestPointMinDistance">
            <summary>
             Get th distance between the test point and the nearest data point, units depend on the nearness test algorithm.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NearestPointData.NearestPointIndex">
            <summary>
             Get the index of the nearestPoint in the test dataset (group and simple datasets).
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NearestPointData.NearestGroupIndex">
            <summary>
             Get the group number of the nearestPoint in the test dataset (group datasets only).
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NearestPointData.NearestPointValid">
            <summary>
             Returns true if a nearest data point is found.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.NumericAxisLabels">
            <summary>
              The NumericAxisLabels class manages and displays the axis labels for  linear and log axes.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.NumericAxisLabels.axisLabelsDecimalPos">
            <summary>
             Specifies the number of digits to the right of the decimal point for numeric labels.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.#ctor">
            <summary>
              The default NumericAxisLabels constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.InitDefaults">
            <summary>
              Initializes default values for axis labels.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.ErrorCheck(System.Int32)">
            <summary>
              Checks the current NumericAxisLabels for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.InitAxisLabels(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              This method initializes the axis labels with the axis they are associated with. 
            </summary>
            <param name="baseaxis"> The AxisLabels object uses the tick marks  defined for this axis to locate the 
            axis labels on the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.Copy(com.quinncurtis.chart2dnet.NumericAxisLabels)">
            <summary>
              Copies the source NumericAxisLabels object. 
            </summary>
            <param name="source"> The source NumericAxisLabels object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.Clone">
            <summary>
             Returns an object that is a clone of this NumericAxisLabels object. 
            </summary>
            <returns> Returns a clone of this NumericAxisLabels object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.#ctor(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              This constructor creates a new NumericAxisLabels object based on the specified axis. 
            </summary>
            <param name="baseaxis"> The NumericAxisLabels object uses the tick marks  defined for this axis to locate 
            the axis labels on the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.SetAxisLabels(System.Drawing.Font,System.Double,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
              Initializes the attributes of an NumericAxisLabels object. 
            </summary>
            <param name="font"> The font object used to display the axis label text. </param>
            <param name="rotation"> The rotation, in degrees, of label text in the normal viewing plane. </param>
            <param name="labdir"> The justification of the axis label (AXIS_MIN or AXIS_MAX) with  respect to the 
            tick mark endpoint. </param>
            <param name="decimalpos"> Sets the number of digits to the right of the decimal point for numeric axis labels. </param>
            <param name="labelends"> Specifies whether there should be labels for the axis minimum (LABEL_MIN), maximum 
            (LABEL_MAX) or tick mark  starting point (LABEL_ORIGIN). The value of these constants can be OR'd together. 
            The value  of LABEL_MIN | LABEL_MAX | LABEL_ORIGIN is LABEL_ALL </param>
            <param name="labcolor"> The color of the label text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.CalcAutoAxisLabels">
            <summary>
             This method automatically calculates the axis label parameters axisLabelsDecimalPos,  and axisLabelsDir.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.SetAxisLabelsDecimalPos(System.Int32)">
            <summary>
             Sets the number of digits to the right of the decimal point for numeric axis labels. 
            </summary>
            <param name="decimalpos"> Sets the number of digits to the right of the decimal point for numeric axis labels.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.GetAxisLabelsDecimalPos(System.Double)">
            <summary>
             Returns the number of digits to the right of the decimal point for numeric axis labels. 
            </summary>
            <returns> Returns the number of digits to the right of the decimal point for numeric axis labels.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.GetCompatibleLabel">
            <summary>
             This method returns an ChartLabel object that is can be used to label  the tick marks of this 
             NumericAxisLabels object. 
            </summary>
            <returns> Returns an ChartLabel object that is can be used to label  the tick marks of this 
            NumericAxisLabels object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.FormatAxisLabel(com.quinncurtis.chart2dnet.NumericLabel,com.quinncurtis.chart2dnet.TickMark)">
            <summary>
              This method formats the text object used to display a numeric label at specific tick mark. 
            </summary>
            <param name="textobj"> The text object used as an axis label. </param>
            <param name="ticmark"> The tick mark that the text label is place at.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.CalcAxisLabels(System.Drawing.Graphics)">
            <summary>
             This method cycles through all of the tick marks, creating formatted  strings for each. an ChartText 
             object is used to output the string at  the appropriate tick mark position. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.GetAxisLabelsFormat(com.quinncurtis.chart2dnet.TickMark)">
            <summary>
             Returns the numeric format for the axis labels. 
            </summary>
            <param name="tickmark"> The tick mark that the text label is place at. </param>
            <returns> Returns the numeric format for the axis labels.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.NumericAxisLabels.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.NumericAxisLabels.AxisLabelsDecimalPos">
            <summary>
             Set/Get the number of digits to the right of the decimal point for numeric axis labels. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.OHLCPlot">
            <summary>
              The OHLCPlot class extends the GroupPlot class and  displays stock market data in an 
              open-high-low-close format common in financial  technical analysis.  Every item of the 
              plot is a vertical line, representing High and  Low values, with two small horizontal "flags", 
              one left and one right extending from  the vertical High-Low line and representing the  Open and 
              Close values. The group size  of the data set must be four. The Y[0] values of the group dataset  
              represent the values for Open, the Y[1] values for High, the Y[2] values for Low,  and the Y[3] values for Close. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.#ctor">
            <summary>
             The default OHLCPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the OHLCPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.InitDefaults">
            <summary>
              Initializes default values for the OHLCPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.Copy(com.quinncurtis.chart2dnet.OHLCPlot)">
            <summary>
              Copies the source OHLCPlot object. 
            </summary>
            <param name="source"> The source OHLCPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.Clone">
            <summary>
             Returns an object that is a clone of this OHLCPlot object. 
            </summary>
            <returns> Returns a clone of this OHLCPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new OHLCPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new OHLCPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new OHLCPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new OHLCPlot object. </param>
            <param name="dataset"> The OHLCPlot plot will represent the group open-high-low-close  values in this 
            group data set. The group size  of the data set must be four. The Y[0] values of the group dataset  
            represent the values for Open, the Y[1] values for High, the Y[2] values for Low,  and the Y[3] values 
            for Close. </param>
            <param name="rflagwidth"> The width of the open and close markers in units of the independent axis. </param>
            <param name="attrib"> Specifies the attributes (line color and line style) for the open-high-low-close plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.SetOHLCPlot(com.quinncurtis.chart2dnet.GroupDataset,System.Double,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of an open-high-low-close plot.  The number of groups in an open-high-low-close plot 
              is restricted to four. 
            </summary>
            <param name="dataset"> The open-high-low-close plot will represent the values in this group data set.  
            The group size of the data set must be four. The Y[0] values of the group dataset  represent the values for 
            Open, the Y[1] values for High, the Y[2] values for Low,  and the Y[3] values for Close. </param>
            <param name="rflagwidth"> The width of the open and close markers in units of the independent axis. </param>
            <param name="attrib"> Specifies the attributes (line color and line style) for the open-high-low-close plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.DrawOHLCPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a open-high-low-close plot using the current open-high-low-close plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The open-high-low-close plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the group plot object  is drawn in 
              the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.OHLCPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point is near one of the data points. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.PieChart">
            <summary>
              The PieChart class extends the Plot class and  displays pie charts. The x-values of the simple dataset
               used for data  storage specify the pie wedge values, the y-values of the dataset  specify the 
               "explode" percentage for each pie wedge.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PieChart.theDataset">
            <summary>
              This field holds a reference to the data represented by this plot object. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PieChart.pieSliceStrings">
            <summary>
             An array of strings, size theDataset.getNumberDatapoints(), used as labels for the pie slices.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PieChart.pieTextObj">
            <summary>
             An array of StringLabel objects, size theDataset.getNumberDatapoints(),  used to display the labels and 
             numeric values for the pie slices.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PieChart.pieSlices">
            <summary>
             An array of arc objects, size theDataset.getNumberDatapoints(), representing the  pie slices making up 
             the pie chart.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PieChart.labelInOut">
            <summary>
             An array of integer, size theDataset.getNumberDatapoints(), specifying  if a specific pie slice text 
             label is drawn inside  the pie slice, or outside of the pie slice. Use one of the constants:  
             PIELABEL_OUTSLICE or PIELABEL_INSLICE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PieChart.sumPieValues">
            <summary>
             The sum of all pie wedge values represented by the pie chart. This value represents the  value of the whole pie.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PieChart.startPieSliceAngle">
            <summary>
             The start angle in degrees for the first pie slice in the pie chart. All subsequent pie  slices are 
             calculated relative to this starting location. The startPieSliceAngle  value of 0.0 is at 3:00 and 
             increases counterclockwise.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PieChart.pieSliceLabelFormat">
            <summary>
             All pie slice labels share the same format. Use one of the pie slice label  format constants: 
             PIELABEL_NONE, PIELABEL_STRING, PIELABEL_NUMVALUE or PIELABEL_STRINGNUMVAL.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.#ctor">
            <summary>
              The default PieChart constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.ErrorCheck(System.Int32)">
            <summary>
              Checks the PieChart object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.InitDefaults">
            <summary>
              Initializes default values for the pie chart.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.Copy(com.quinncurtis.chart2dnet.PieChart)">
            <summary>
              Copies the source pie chart. 
            </summary>
            <param name="source"> The source pie chart object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.Clone">
            <summary>
             Returns an object that is a clone of this PieChart object. 
            </summary>
            <returns> Returns a clone of this PieChart object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.SimpleDataset,System.String[],com.quinncurtis.chart2dnet.ChartAttribute[],System.Int32,System.Int32)">
            <summary>
              This constructor creates a new PieChart object and scales it to match  the specified minimum and maximum values. 
            </summary>
            <param name="transform"> The pie chart is placed in the coordinate system defined by transform. </param>
            <param name="dataset"> The pie chart represents the values in this data set. </param>
            <param name="spiestring1s"> An array of strings, size dataset.getNumberDatapoints(),  used as labels 
            for the pie slices. </param>
            <param name="attribs"> An array of ChartAttribute objects, size dataset.getNumberDatapoints()  that 
            specify the attributes (out1line color and fill color) for each wedge of a pie chart. </param>
            <param name="labelinout1"> An array of integer, size theDataset.getNumberDatapoints(), specifying  
            if a specific pie slice text label is drawn inside the pie slice, or outside of the pie slice.  Use one of 
            the constants: PIELABEL_OUTSLICE or PIELABEL_INSLICE. </param>
            <param name="pielabelformat"> All pie slice labels share the same format. Use one of the pie slice 
            label  format constants:  PIELABEL_NONE Do not display and pie slice text  PIELABEL_STRING Display only 
            the pie text strings, no numeric values  PIELABEL_NUMVALUE Display the pie numeric value only, no pie text 
            strings.  PIELABEL_STRINGNUMVAL Display the pie text string and numeric value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.SetPieTextJust(com.quinncurtis.chart2dnet.StringLabel,System.Double)">
            <summary>
             Calculates the horizontal and vertical justification  for a pie chart text object based on each object 
             radial position  in the pie chart. 
            </summary>
            <param name="text"> A reference to the source pie chart text object. </param>
            <param name="rangle"> The radial position, in degrees, of the pie chart text object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.AdjustPieRectangle(com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Adjust the pie charts drawing rectangle, centering a square rectangle  in the view rectangle, 
             so the pie charts are drawn with an aspect  ratio of 1.0. 
            </summary>
            <param name="r"> The source rectangle. The new rectangle is returned in the  same parameter.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.DrawPieText(System.Drawing.Graphics)">
            <summary>
             This method formats the text for each pie wedge, justifies it based on  the text radial position, and draws it. 
            </summary>
            <param name="g2"> The current graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.CalcPieWedges">
            <summary>
             Calculates the drawing parameters for each pie slice  in the pie chart.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.DrawPieWedges(System.Drawing.Graphics)">
            <summary>
             Calculates the size and shape, and draws, each pie wedge in the pie chart. 
            </summary>
            <param name="g2"> The current graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.GetPieSlicePoints(System.Int32,com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             Returns the starting, ending and arc origin for a specific pie slice in the pie chart. 
            </summary>
            <param name="pieslice"> The index of the pie slice. </param>
            <param name="arcstart"> Returns the starting point of the pie slice in window device coordinates </param>
            <param name="arcstop"> Returns the ending point of the pie slice in window device coordinates. </param>
            <param name="arcorigin"> Returns the arc origin of the pie slice in window device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.DrawPieChart(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.CartesianToPolar(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts the coordinates of a point from Cartesian  coordinates to polar coordinates. 
            </summary>
            <param name="dest"> Returns the coordinates of the point using polar coordinates,  where the polar 
            magnitude is store in source.x, and the polar angle  in source.y. </param>
            <param name="source"> The coordinates of the point in Cartesian coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.CalcNearestPoint(com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against the pie wedges  in a simple pie chart and calculates which wedge  
              is nearest the test point. 
            </summary>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Ignored. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest pie wedge. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.SetDataset(com.quinncurtis.chart2dnet.SimpleDataset)">
            <summary>
             Replaces the current SimpleDataset object with a new one. 
            </summary>
            <param name="dataset"> Specifies the new SimpleDataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.GetDataset">
            <summary>
             Returns a reference to the current SimpleDataset. 
            </summary>
            <returns> Returns a reference to the current SimpleDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point is intersects one of the pie slices. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects one of the pie slices.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.GetPieSliceStrings(System.Int32)">
            <summary>
             Returns the text string associated with a specific pie slice. 
            </summary>
            <param name="index"> The index of the pie slice. </param>
            <returns> Returns the text string associated with a specific pie slice.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.SetPieSliceStrings(System.Int32,System.String)">
            <summary>
             Sets the text string associated with a specific pie slice. 
            </summary>
            <param name="index"> The index of the pie slice. </param>
            <param name="piestring1"> Sets the text string associated with a specific pie slice.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.GetLabelInOut(System.Int32)">
            <summary>
             Returns the pie slice labeling mode associated with a specific pie slice. 
            </summary>
            <param name="index"> The index of the pie slice. </param>
            <returns> Returns the pie slice labeling mode associated with a specific pie slice. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.PieChart.SetLabelInOut(System.Int32,System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.SetLabelInOut(System.Int32,System.Int32)">
            <summary>
             Sets the pie slice labeling mode associated with a specific pie slice. 
            </summary>
            <param name="index"> The index of the pie slice. </param>
            <param name="labelinout1"> Sets the pie slice labeling mode associated with a specific pie slice.  
            Use one of the constants: PIELABEL_OUTSLICE or PIELABEL_INSLICE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.GetSumPieSlices">
            <summary>
             Returns the sum of all pie slice values. 
            </summary>
            <returns> Returns the sum of all pie slice values.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.SetPieSliceLabelFormat(System.Int32)">
            <summary>
             Sets the pie slice labeling format associated with a specific pie slice. 
            </summary>
            <param name="format"> Sets the pie slice labeling format associated with a specific pie slice.  
            Use one of the pie slice label format constants:  PIELABEL_NONE, PIELABEL_STRING, PIELABEL_NUMVALUE or 
            PIELABEL_STRINGNUMVAL.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.GetPieSliceLabelFormat">
            <summary>
             Returns the pie slice labeling format associated with a specific pie slice. 
            </summary>
            <returns> Returns the pie slice labeling format associated with a specific pie slice. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.PieChart.SetPieSliceLabelFormat(System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.GetStartPieSliceAngle">
            <summary>
             Returns the start angle in degrees for the first pie slice in the pie chart. 
            </summary>
            <returns> Returns the start angle in degrees for the first pie slice in the pie chart. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.PieChart.SetStartPieSliceAngle(System.Double)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PieChart.SetStartPieSliceAngle(System.Double)">
            <summary>
             Sets the start angle in degrees for the first pie slice in the pie chart. All subsequent pie  
             slices are calculated relative to this starting location. The startPieSliceAngle  value of 0.0 
             is at 3:00 and increases counterclockwise. 
            </summary>
            <param name="angle"> The start angle of the first pie slice in the pie chart in degrees.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PieChart.PieSliceLabelFormat">
            <summary>
             Get/Set the pie slice labeling format associated with a specific pie slice. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PieChart.StartPieSliceAngle">
            <summary>
             Get/Set the start angle in degrees for the first pie slice in the pie chart. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Point2D">
            <summary>
              The  <code>Point2D</code> class defines a point representing a location  in (x,y) coordinate space.  
              This class is only the abstract superclass for all objects that  store a 2D coordinate.  
              The actual storage representation of the coordinates is left to  the subclass.  
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Point2D.x">
            <summary>
              The x-coordinate of this <code>Point2D</code>. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Point2D.y">
            <summary>
              The y-coordinate of this <code>Point2D</code>. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.#ctor">
            <summary>
              Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.#ctor(System.Double,System.Double)">
            <summary>
              Constructs and initializes a <code>Point2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinate </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.#ctor(com.quinncurtis.chart2dnet.ChartCalendar,System.Double)">
            <summary>
              Constructs and initializes a <code>Point2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinate </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.#ctor(System.DateTime,System.Double)">
            <summary>
              Constructs and initializes a <code>Point2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinate </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.#ctor(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              Constructs and initializes a <code>Point2D</code> with the  specified coordinates. 
            </summary>
            <param name="p"> the xy coordinates </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.GetX">
            <summary>
              Returns the X coordinate of this <code>Point2D</code>. 
            </summary>
            <returns> the X coordinate of this <code>Point2D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.GetCalendarX">
            <summary>
              Returns the X coordinate of this <code>Point2D</code>. 
            </summary>
            <returns> the X coordinate of this <code>Point2D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.GetDateTimeX">
            <summary>
              Returns the X coordinate of this <code>Point2D</code>. 
            </summary>
            <returns> the X coordinate of this <code>Point2D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.GetY">
            <summary>
              Returns the Y coordinate of this <code>Point2D</code>. 
            </summary>
            <returns> the Y coordinate of this <code>Point2D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.SetLocation(System.Double,System.Double)">
            <summary>
              Sets the location of this <code>Point2D</code> to the  specified  coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinate</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.SetLocation(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              Sets the location of this <code>Point2D</code> to the  specified  coordinates. 
            </summary>
            <param name="p"> the coordinate values</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.SetLocation(com.quinncurtis.chart2dnet.ChartCalendar,System.Double)">
            <summary>
              Initializes a <code>Point2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinate </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.SetLocation(System.DateTime,System.Double)">
            <summary>
              Initializes a <code>Point2D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinate </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.DistanceSq(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Returns the square of the distance between two points. 
            </summary>
            <param name="X1"> the x-coordinate of the first point </param>
            <param name="Y1"> the y-coordinate of the first point </param>
            <param name="X2"> the x-coordinate of the second point </param>
            <param name="Y2"> the y-coordinate of the second point </param>
            <returns> the square of the distance between the two  sets of specified coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Returns the distance between two points. 
            </summary>
            <param name="X1"> the x-coordinate of the first point </param>
            <param name="Y1"> the y-coordinate of the first point </param>
            <param name="X2"> the x-coordinate of the second point </param>
            <param name="Y2"> the y-coordinate of the second point </param>
            <returns> the distance between the two sets of specified  coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.DistanceSq(System.Double,System.Double)">
            <summary>
              Returns the square of the distance between the specified point and the current point. 
            </summary>
            <param name="PX"> the x-value of the specified point </param>
            <param name="PY"> the y-value of the specified point </param>
            <returns> the square of the distance between the current point and the specified point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.DistanceSq(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              Returns the square of the distance between the specified point and the current point. 
            </summary>
            <param name="pt"> the coordinates of the specified point </param>
            <returns> the square of the distance between the current point and the specified point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.Distance(System.Double,System.Double)">
            <summary>
              Returns the distance from this <code>Point2D</code> to  a specified point. 
            </summary>
            <param name="PX"> the x-value of the specified point </param>
            <param name="PY"> the y-value of the specified point </param>
            <returns> the distance between this <code>Point2D</code>  and a specified point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.Distance(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
              Returns the distance from this <code>Point2D</code> to a  specified <code>Point2D</code>. 
            </summary>
            <param name="pt"> the coordinates of the specified point </param>
            <returns> the distance between this <code>Point2D</code> and  the specified <code>Point2D</code>.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.Clone">
            <summary>
              Creates a new object of the same class and with the  same contents as this object. 
            </summary>
            <returns> a clone of this instance. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.GetPoint">
            <summary>
              Returns a Point conversion of <code>Point2D</code> . 
            </summary>
            <returns> Returns a Point conversion of <code>Point2D</code> .  </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.GetPointF">
            <summary>
              Returns a PointF conversion of <code>Point2D</code> . 
            </summary>
            <returns> Returns a PointF conversion of <code>Point2D</code> .  </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.SetPoint(System.Drawing.Point)">
            <summary>
              Set the coordinates using a Point object . 
            </summary>
            <param name="p"> Set the coordinates using a Point object .  </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point2D.SetPointF(System.Drawing.PointF)">
            <summary>
              Set the coordinates using a PointF object . 
            </summary>
            <param name="p"> Set the coordinates using a PointF object .  </param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Point2D.X">
            <summary>
             Get/Set the x-value of the point. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Point2D.CalendarX">
            <summary>
             Get/Set the x-value of the point. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Point2D.DateTimeX">
            <summary>
             Get/Set the x-value of the point. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Point2D.Y">
            <summary>
             Get/Set the y-value of the point. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Point3D">
            <summary>
              The <code>Point3D</code> class defines a point representing a location  in (x,y,z) coordinate space.  
              Extrapolated from the original Sun Point2D class.  This class is only the abstract super class for all 
              objects that  store a 3D coordinate.  The actual storage representation of the coordinates is 
              left to the subclass.  
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Point3D.x">
            <summary>
              The <code>Double</code> class defines a point specified in  <code>double</code> precision.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Point3D.y">
            <summary>
              The Y-coordinate of this <code>Point3D</code>. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Point3D.z">
            <summary>
              The Z-coordinate of this <code>Point3D</code>. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.#ctor">
            <summary>
              Constructs and initializes a <code>Point3D</code> with  coordinates (0,0). 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Constructs and initializes a <code>Point3D</code> with the  specified coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinate</param>
            <param name="pz"> the z-coordinate</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.GetX">
            <summary>
              Returns the x-coordinate of this <code>Point3D</code>. 
            </summary>
            <returns> Returns the x-coordinate of this <code>Point3D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.GetY">
            <summary>
              Returns the y-coordinate of this <code>Point3D</code>. 
            </summary>
            <returns> Returns  the y-coordinate of this <code>Point3D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.GetZ">
            <summary>
              Returns the z-coordinate of this <code>Point3D</code> in  <code>double</code> precision. 
            </summary>
            <returns> Returns the z-coordinate of this <code>Point3D</code>. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.SetLocation(System.Double,System.Double,System.Double)">
            <summary>
              Sets the location of this <code>Point3D</code> to the  specified <code>double</code> coordinates. 
            </summary>
            <param name="px"> the x-coordinate</param>
            <param name="py"> the y-coordinate</param>
            <param name="pz"> the z-coordinate</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.SetLocation(com.quinncurtis.chart2dnet.Point3D)">
            <summary>
              Sets the location of this <code>Point3D</code> to the same  coordinates as the specified <code>Point3D</code> object. 
            </summary>
            <param name="p"> the source coordinates </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.DistanceSq(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Returns the square of the distance between two points. 
            </summary>
            <param name="X1"> the x-coordinate of the first point </param>
            <param name="Y1"> the y-coordinate of the first point </param>
            <param name="Z1"> the z-coordinate of the first point </param>
            <param name="X2"> the x-coordinate of the second point </param>
            <param name="Y2"> the y-coordinate of the second point </param>	
            <param name="Z2"> the z-coordinate of the second point </param>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.Distance(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Returns the distance between two points. 
            </summary>
            <param name="X1"> the x-coordinate of the first point </param>
            <param name="Y1"> the y-coordinate of the first point </param>
            <param name="Z1"> the z-coordinate of the first point </param>
            <param name="X2"> the x-coordinate of the second point </param>
            <param name="Y2"> the y-coordinate of the second point </param>	
            <param name="Z2"> the z-coordinate of the second point </param>	
            <returns> the distance between the two sets of specified  coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.DistanceSq(System.Double,System.Double,System.Double)">
            <summary>
              Returns the square of the distance from this  <code>Point3D</code> to a specified point. 
            </summary>
            <param name="PX"> the x-coordinate of the other point </param>
            <param name="PY"> the y-coordinate of the other point </param>
            <param name="PZ"> the z-coordinate of the other point </param>
            <returns> Returns the square of the distance between this  <code>Point3D</code> and the specified point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.DistanceSq(com.quinncurtis.chart2dnet.Point3D)">
            <summary>
              Returns the square of the distance from this  <code>Point3D</code> to a specified <code>Point3D</code>. 
            </summary>
            <param name="pt"> the specified <code>Point3D</code> </param>
            <returns> Returns the square of the distance between this  <code>Point3D</code> to a specified <code>Point3D</code>.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.Distance(System.Double,System.Double,System.Double)">
            <summary>
              Returns the distance from this <code>Point3D</code> to  a specified point. 
            </summary>
            <param name="PX"> the x-coordinate of the other point </param>
            <param name="PY"> the y-coordinate of the other point </param>
            <param name="PZ"> the z-coordinate of the other point </param>
            <returns> Returns the distance between this <code>Point3D</code>  and a specified point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.Distance(com.quinncurtis.chart2dnet.Point3D)">
            <summary>
              Returns the distance from this <code>Point3D</code> to a  specified <code>Point3D</code>. 
            </summary>
            <param name="pt"> the specified <code>Point3D</code> </param>
            <returns>  Returns the distance between this <code>Point3D</code> and  the specified <code>Point3D</code>.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Point3D.Clone">
            <summary>
              Creates a new object that is a clone of the current object. 
            </summary>
            <returns> Returns  a clone of this instance. </returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Point3D.X">
            <summary>
             Get/Set the x-value of the point. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Point3D.Y">
            <summary>
             Get/Set the y-value of the point. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.Point3D.Z">
            <summary>
             Get/Set the y-value of the point. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.PolarAxes">
            <summary>
             The PolarAxes class implements a polar axis that has  evenly spaced major and minor tick marks. 
             The polar axis consists  of a linear x-axis, a linear y-axis, and a radial (circular) axis.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarAxes.polarXAxis">
            <summary>
             This object manages and displays the x-axis portion of  the polar axis.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarAxes.polarYAxis">
            <summary>
             This object manages and displays the y-axis portion of  the polar axis.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarAxes.polarAxesLabels">
            <summary>
             This object holds a reference to the PolarAxesLabels object (if any)  associated with this polar 
             axis object. Can't create default axis labels class because that creates a circular reference.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.#ctor">
            <summary>
              The default PolarAxes constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.ErrorCheck(System.Int32)">
            <summary>
              Checks the current polar axis object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.Copy(com.quinncurtis.chart2dnet.PolarAxes)">
            <summary>
              Copies the source polar axis. 
            </summary>
            <param name="source"> The source polar axis object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.Clone">
            <summary>
             Returns an object that is a clone of this PolarAxes object. 
            </summary>
            <returns> Returns a clone of this PolarAxes object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.CalcAutoAxis">
            <summary>
              This auto-axis method uses the current minimum and maximum values in the chartObjScale  object to 
              determine appropriate values for the polar axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.SetChartObjScale(com.quinncurtis.chart2dnet.PolarCoordinates)">
            <summary>
             Sets the reference to the PolarCoordinates object that the chart object is placed in.  It overrides 
             the GraphObj version because this is a compound object that  needs to update the LinearAxis objects within. 
            </summary>
            <param name="transform"> A reference to the PolarCoordinates object that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.InitPolarAxesDefaults">
            <summary>
              Initializes default values for the polar axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.Update">
            <summary>
              Updates the polar axis values if the range has changed.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.#ctor(com.quinncurtis.chart2dnet.PolarCoordinates)">
            <summary>
              This constructor creates a new PolarAxes object and  scales it to match the values of the specified 
              PolarCoordinates object. 
            </summary>
            <param name="transform"> Sets the minimum and maximum value of the axis to the associated  minimum and 
            maximum value of the coordinate system transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.SetChartObjAttributes(com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
             This methods sets the color and line attributes of the polar axis. 
            </summary>
            <param name="attr"> The polar axis attributes are set equal to a copy of  this ChartAttribute object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.SetPolarAxesTicks(System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
              This method is used to initialize the minor and major tick mark spacing and length  for the x-axis, the 
              y-axis and the radial axes. 
            </summary>
            <param name="axestickspace"> Specifies the spacing between minor tick marks for the x- and y-axes. </param>
            <param name="axesntickspermajor"> Specifies the number of minor tick marks per major tick mark for 
            the x- and y-axes. </param>
            <param name="angletickspace"> Specifies the spacing, in degrees, between minor tick marks for the 
            radial axis. </param>
            <param name="anglentickspermajor"> Specifies the number of minor tick marks per major tick mark for 
            the radial axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.SetPolarAxesTicks(System.Double,System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
              This method is used to initialize the minor and major tick mark spacing and length  for the x-axis, 
              the y-axis and the radial axes. 
            </summary>
            <param name="axestickspace"> Specifies the spacing between minor tick marks for the x- and y-axes. </param>
            <param name="axesntickspermajor"> Specifies the number of minor tick marks per major tick mark for 
            the x- and y-axes. </param>
            <param name="angletickspace"> Specifies the spacing, in degrees, between minor tick marks for the 
            radial axis. </param>
            <param name="anglentickspermajor"> Specifies the number of minor tick marks per major tick mark for 
            the radial axis. </param>
            <param name="minorticklength"> The length of minor tick marks, in window device coordinates. </param>
            <param name="majorticklength"> The length of major tick marks, in window device coordinates. </param>
            <param name="tickdir"> The direction of the tick marks. Use one of the tick mark direction  constants: 
            AXIS_MIN, AXIS_CENTER, or AXIS_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.DrawOuterCircle(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              This methods draws the radial axis portion of the polar axis using the specified general path. 
            </summary>
            <param name="path"> The radial axis is drawn using this general path object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.CalcOuterTicks">
            <summary>
              This methods calculates the tick marks for the radial axis portion of the polar axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.GetPolarAxesLabels">
            <summary>
             Returns the PolarAxesLabels object, if any, associated with this object. 
            </summary>
            <returns> Returns the PolarAxesLabels object, if any, associated with this object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.SetPolarAxesLabels(com.quinncurtis.chart2dnet.PolarAxesLabels)">
            <summary>
             Sets the PolarAxesLabels object, if any, associated with this object. 
            </summary>
            <param name="axeslabels"> Sets the PolarAxesLabels object, if any, associated with this object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.GetPolarXAxis">
            <summary>
             Returns the x-axis LinearAxis object, if any, associated with this object. 
            </summary>
            <returns> Returns the LinearAxis object, if any, associated with this object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.SetPolarXAxis(com.quinncurtis.chart2dnet.LinearAxis)">
            <summary>
             Sets the x-axis LinearAxis object, if any, associated with this object. 
            </summary>
            <param name="axis"> Sets the LinearAxis object, if any, associated with this object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.GetPolarYAxis">
            <summary>
             Returns the y-axis LinearAxis object, if any, associated with this object. 
            </summary>
            <returns> Returns the LinearAxis object, if any, associated with this object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.SetPolarYAxis(com.quinncurtis.chart2dnet.LinearAxis)">
            <summary>
             Sets the y-axis LinearAxis object, if any, associated with this object. 
            </summary>
            <param name="axis"> Sets the LinearAxis object, if any, associated with this object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the polar axis is drawn using 
              that path.  Once the path is complete it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxes.GetCompatibleAxesLabels">
            <summary>
             This method returns an AxesLabels object that is compatible  with this PolarAxes object. 
            </summary>
            <returns> Returns an AxisLabels object that is compatible  with this LinearAxis object.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.PolarAxesLabels">
            <summary>
             The PolarAxesLabels class labels the tick marks of the x-axis, y-axis,  and radial axis of the 
             associated PolarAxes object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarAxesLabels.polarAxes">
            <summary>
             Holds a reference to the underlying polar axis (PolarAxes) object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarAxesLabels.localAxis">
            <summary>
             Holds a reference to a temporary-axis used in the labeling process.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.#ctor">
            <summary>
              The default PolarAxesLabels constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.InitDefaults">
            <summary>
              Initializes default values for the polar axis labels.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.ErrorCheck(System.Int32)">
            <summary>
              Checks the current polar axis labels object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.Copy(com.quinncurtis.chart2dnet.PolarAxesLabels)">
            <summary>
              Copies the source polar axis labels. 
            </summary>
            <param name="source"> The source polar axis labels object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.Clone">
            <summary>
             Returns an object that is a clone of this PolarAxesLabels object. 
            </summary>
            <returns> Returns a clone of this PolarAxesLabels object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.SetChartObjScale(com.quinncurtis.chart2dnet.PolarCoordinates)">
            <summary>
             Sets the reference to the PolarCoordinates object that the chart object is placed in.  It overrides 
             the GraphObj version because this is a compound object that  needs to update the LinearAxis and PolarAxes 
             objects within. 
            </summary>
            <param name="transform"> A reference to the PolarCoordinates object that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.Update">
            <summary>
              Updates the polar axis labels if the range has changed.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.#ctor(com.quinncurtis.chart2dnet.PolarAxes)">
            <summary>
              This constructor creates a new PolarAxesLabels object based  on the specified PolarAxes object. 
            </summary>
            <param name="baseaxis"> The PolarAxesLabels object uses the tick marks  defined for this axis to 
            locate the axis labels on the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.SetOuterLabelsTextJust(com.quinncurtis.chart2dnet.ChartText,System.Double)">
            <summary>
              This methods sets the justification properties of the  ChartText used to label the radial axis, 
              based on the angular  position of the text. 
            </summary>
            <param name="text"> A reference to the ChartText object used to label the  radial axis tick marks. </param>
            <param name="rangle"> The angular position, in degrees, of the tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.CalcPolarAxisLabels(System.Drawing.Graphics)">
            <summary>
              This method creates and positions the text used to label the tick marks of the polar  radial axis. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.SetAxisLabels(System.Drawing.Font,System.Int32,System.Drawing.Color)">
            <summary>
              Initializes the attributes of an NumericAxisLabels object. 
            </summary>
            <param name="font"> The font object used to display the axis label text. </param>
            <param name="decimalpos"> Sets the number of digits to the right of the decimal point for numeric axis labels. </param>
            <param name="labcolor"> The color of the label text.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.GetBasePolarAxis">
            <summary>
             Returns the PolarAxes object associated with this object. 
            </summary>
            <returns> Returns the PolarAxes object associated with this object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.SetBasePolarAxis(com.quinncurtis.chart2dnet.PolarAxes)">
            <summary>
             Sets the PolarAxes object associated with this object. 
            </summary>
            <param name="axis"> Sets the PolarAxes object associated with this object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.GetBaseAxis">
            <summary>
              Gets the base axis associated with this axis labels object. 
            </summary>
            <returns> Returns the base axis associated with this axis labels object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.SetBaseAxis(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              Sets the base axis associated with this axis labels object. 
            </summary>
            <param name="baseaxis"> Sets the base axis associated with this axis labels object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarAxesLabels.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.PolarCoordinates">
            <summary>
              The CartesianCoordinates class  extends the CartesianCoordinates class to support polar scales.  
              Polar coordinates used Point2D objects to store data points. The  x-value of the Point2D object 
              is the polar magnitude  and the y-value is the polar angle. In the datasets used with  PolarCoordinates, 
              the x-values also represent polar magnitudes  and y-values represent polar angle. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarCoordinates.polarCurrentPos">
            <summary>
             Holds the current position of the polar coordinate drawing routines.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.InitDefaults">
            <summary>
              Initializes default values for the PolarCoordinates object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.ErrorCheck(System.Int32)">
            <summary>
              Checks the PolarCoordinates object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.Copy(com.quinncurtis.chart2dnet.PolarCoordinates)">
            <summary>
              Copies the source PolarCoordinates object. 
            </summary>
            <param name="source"> The source PolarCoordinates object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.Clone">
            <summary>
             Returns an object that is a clone of this PolarCoordinates object. 
            </summary>
            <returns> Returns a clone of this PolarCoordinates object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.#ctor">
            <summary>
              The default PolarCoordinates constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.SetPolarScaleRadius(System.Double)">
            <summary>
             Sets the radius of the polar scale. 
            </summary>
            <param name="radius"> Sets the radius of the polar scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.GetPolarScaleRadius">
            <summary>
             Returns the radius of the polar scale. 
            </summary>
            <returns> Returns the radius of the polar scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.#ctor(System.Double)">
            <summary>
             This constructor creates a new PolarCoordinates scaled for the radius R. 
            </summary>
            <param name="rR"> The radius of the polar scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset,System.Int32)">
            <summary>
             This method initializes an PolarCoordinates object based on the range  of x-values (polar magnitudes) 
             in a dataset. 
            </summary>
            <param name="dataset"> The dataset used as the basis for the new coordinate system. The  maximum x-value 
            in the dataset controls the polar coordinate scaling. </param>
            <param name="nroundmode"> Sets the auto-scale mode for the polar axis scaling. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset)">
            <summary>
             This method initializes an PolarCoordinates object based on the range  of x-values (polar magnitudes) 
             in a dataset. The AUTOAXES_FAR  rounding mode is assumed. 
            </summary>
            <param name="dataset"> The dataset used as the basis for the new coordinate system. The  maximum x-value 
            in the dataset controls the polar coordinate scaling.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32)">
            <summary>
             This method initializes an PolarCoordinates object based on the range  of x-values (polar magnitudes) 
             in an array of datasets. 
            </summary>
            <param name="datasets"> An array of datasets used as the basis for the new coordinate system. The  maximum 
            x-value in the datasets controls the polar coordinate scaling. </param>
            <param name="nroundmode"> Sets the auto-scale mode for the polar axis scaling. Use one of the  
            auto-scale rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset[])">
            <summary>
             This method initializes an PolarCoordinates object based on the range  of x-values (polar magnitudes) 
             in an array of datasets. The AUTOAXES_FAR  rounding mode is assumed. 
            </summary>
            <param name="datasets"> An array of datasets used as the basis for the new coordinate system. The  
            maximum x-value in the datasets controls the polar coordinate scaling. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.CalcAutoScale(com.quinncurtis.chart2dnet.ChartDataset,System.Int32)">
            <summary>
             Calculates a polar axis scale based on the range  of x-values (polar magnitudes) in a dataset. 
            </summary>
            <param name="dataset"> The dataset used as the basis for the new coordinate system. The  maximum x-value 
            in the dataset controls the polar coordinate scaling. </param>
            <param name="nroundmode"> Sets the auto-scale mode for the polar axis scaling. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.CalcAutoScale(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32)">
            <summary>
             Calculates a polar axis scale based on the range  of x-values (polar magnitudes) in an array of datasets. 
            </summary>
            <param name="datasets"> An array of datasets used as the basis for the new coordinate system. The  
            maximum x-value in the datasets controls the polar coordinate scaling. </param>
            <param name="nroundmode"> The rounding mode.  </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.GetCompatibleAxis">
            <summary>
             This method returns an PolarAxes axis object,  compatible with this coordinate system. 
            </summary>
            <returns> Returns either an PolarAxes axis object,  compatible with this coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.GetCompatibleAxes">
            <summary>
             This method returns an PolarAxes axis object,  compatible with this coordinate system. 
            </summary>
            <returns> Returns either an PolarAxes axis object,  compatible with this coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.PolarToCartesian(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts the coordinates of a point from polar  coordinates to underlying 2D Cartesian 
             coordinate system. 
            </summary>
            <param name="dest"> Returns the coordinates of the point in Cartesian coordinates. </param>
            <param name="source"> The coordinates of a point specified using polar coordinates,  where the polar 
            magnitude is store in source.x, and the polar angle  in source.y.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.CartesianToPolar(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             This method converts the coordinates of a point from Cartesian  coordinates to polar coordinates. 
            </summary>
            <param name="dest"> Returns the coordinates of the point using polar coordinates,  where the polar 
            magnitude is store in source.x, and the polar angle  in source.y. </param>
            <param name="source"> The coordinates of the point in Cartesian coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.ConvertCoord(com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
              It converts the coordinates of a point from one coordinate system to another.  This method extends 
              the overrides the PhysicalCoordinates ConvertCoord  method, adding support for polar coordinates 
              (POLAR_POS). It calls the  underlying ConvertCoord rout1ine for all conversions not associated 
              with polar  coordinates. 
            </summary>
            <param name="dest"> Returns the converted coordinate value as a Point2D object. </param>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate 
            system constants: POLAR_POS, DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> The coordinates of a the point that is to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants: POLAR_POS, DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS;</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.ConvertCoord(System.Int32,com.quinncurtis.chart2dnet.Point2D,System.Int32)">
            <summary>
              It converts the coordinates of a point from one coordinate system to another.  This method extends the 
              overrides the PhysicalCoordinates ConvertCoord  method, adding support for polar coordinates (POLAR_POS). 
              It calls the  underlying ConvertCoord rout1ine for all conversions not associated with polar  coordinates. 
            </summary>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate system 
            constants: POLAR_POS, DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> The coordinates of a the point that is to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants: POLAR_POS, DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <returns> Returns the converted coordinate value as a Point2D record.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.ConvertRadius(System.Int32,System.Double,System.Int32)">
            <summary>
             This method converts a radius value from one  coordinate system to another. 
            </summary>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate 
            system constants: DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> The radius value to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants: DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <returns> Returns the converted radius value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.ConvertCoordArray(com.quinncurtis.chart2dnet.Point2D[],System.Int32,com.quinncurtis.chart2dnet.Point2D[],System.Int32,System.Int32)">
            <summary>
             This method converts an array of points from one coordinate system to another.  This method extends the 
             overrides the PhysicalCoordinates convertCoordArray  method, adding support for polar coordinates (POLAR_POS). 
            </summary>
            <param name="dest"> An array of Point2D objects, of size n, that returns the converted coordinate  values. </param>
            <param name="ndestpostype"> Specifies the destination coordinate system. Use one  of the coordinate 
            system constants: POLAR_POS, DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="source"> An array of Point2D, of size n, that holds the points that are to be converted. </param>
            <param name="nsrcpostype"> Specifies the source coordinate system. Use one  of the coordinate system 
            constants: POLAR_POS, DEV_POS, PHYS_POS, POLAR_POS, NORM_GRAPH_POS,  or NORM_PLOT_POS; </param>
            <param name="n"> The number of points in source and destination arrays.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.PolarMoveToAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double)">
            <summary>
             This method converts the specified polar coordinates to device coordinates, and adds a corresponding 
             move segment to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x"> The polar magnitude of the point. </param>
            <param name="y"> The polar angle of the point.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.PolarLineToAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Boolean)">
            <summary>
             This method converts the specified polar coordinates to device coordinates, and adds a corresponding 
             lineto segment to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x"> The polar magnitude of the point. </param>
            <param name="y"> The polar angle of the point. </param>
            <param name="binterpolate"> Set to true for polar coordinate interpolation when  drawing to the next point.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.PolarLineAbs(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
             This method converts the specified starting and ending polar coordinates to device coordinates, 
             and adds a corresponding line segment to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="x1"> The polar magnitude of the starting point. </param>
            <param name="y1"> The polar angle of the starting point. </param>
            <param name="x2"> The polar magnitude of the ending point. </param>
            <param name="y2"> The polar angle of the ending point. </param>
            <param name="binterpolate"> Set to true for polar coordinate interpolation when</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarCoordinates.PolarLineAbs(System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Boolean)">
            <summary>
             This method converts the specified starting and ending polar coordinates to device coordinates, and 
             adds a corresponding line segment to the specified path. 
            </summary>
            <param name="path"> A general path object. </param>
            <param name="p1"> The starting point in polar coordinates. </param>
            <param name="p2"> The ending point in polar coordinates. </param>
            <param name="binterpolate"> Set to true for polar coordinate interpolation when</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.PolarGrid">
            <summary>
              The PolarGrid class manages and displays the grid lines for PolarAxes axes.  It is a concrete subclass 
              of the GraphObj class.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarGrid.gridMagnitudeType">
            <summary>
             Specifies if the polar magnitude grid aligns with the major tick marks (GRID_MAJOR), the minor 
             tick  marks (GRID_MINOR) or the major and minor tick marks (GRID_ALL) of the reference axis.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarGrid.gridAngleType">
            <summary>
             Specifies if the polar angle grid aligns with the major tick marks (GRID_MAJOR), the minor tick  
             marks (GRID_MINOR) or the major and minor tick marks (GRID_ALL) of the reference axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.#ctor">
            <summary>
              The default PolarGrid constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.ErrorCheck(System.Int32)">
            <summary>
              Checks the current polar grid object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.InitDefaults">
            <summary>
              Initializes default values for the polar grid.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.Update">
            <summary>
              Updates the polar grid values if the range has changed.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.SetChartObjScale(com.quinncurtis.chart2dnet.PolarCoordinates)">
            <summary>
             Sets the reference to the PhysicalCoordinates object that the chart object is placed in.  It 
             overrides the GraphObj version because this is a compound object that  needs to update the Axis objects within. 
            </summary>
            <param name="transform"> A reference to the PhysicalCoordinates object that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.Copy(com.quinncurtis.chart2dnet.PolarGrid)">
            <summary>
              Copies the source polar grid. 
            </summary>
            <param name="source"> The source polar grid object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.Clone">
            <summary>
             Returns an object that is a clone of this PolarGrid object. 
            </summary>
            <returns> Returns a clone of this PolarGrid object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.#ctor(com.quinncurtis.chart2dnet.PolarAxes,System.Int32)">
            <summary>
              This constructor creates a new PolarGrid object based on the specified  polar axis object. 
            </summary>
            <param name="polaraxis"> The polar axis associated with the grid. </param>
            <param name="gridtype"> Specifies if the magnitude and angular grid aligns with the major tick marks  
            (GRID_MAJOR), the minor tick marks (GRID_MINOR) or the major and minor  tick marks (GRID_ALL) of the 
            reference polar axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.#ctor(com.quinncurtis.chart2dnet.PolarAxes,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new PolarGrid object based on the specified  polar axis object. 
            </summary>
            <param name="polaraxis"> The polar axis associated with the grid. </param>
            <param name="gridmagtype"> Specifies if the magnitude grid aligns with the major tick marks  (GRID_MAJOR), 
            the minor tick marks (GRID_MINOR) or the major and minor  tick marks (GRID_ALL) of the reference polar axis. </param>
            <param name="gridangletype"> Specifies if the angular grid aligns with the major tick marks  (GRID_MAJOR), 
            the minor tick marks (GRID_MINOR) or the major and minor  tick marks (GRID_ALL) of the reference polar axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.DrawPolarGridCircles(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              This methods draws the magnitude grid as a group of concentric circles centered  on the intercept of 
              the x- and y-axis, Cartesian physical coordinate point (0,0). 
            </summary>
            <param name="path"> The magnitude circles are drawn using this general path object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.DrawGridRadians(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              This methods draws the angular grid as a group of radial lines starting at  the intercept of the x- 
              and y-axis, Cartesian physical coordinate point (0,0),  and extending to the out1er, circular axis. 
            </summary>
            <param name="path"> The radial lines are drawn using this general path object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the polar grid is drawn using 
              that path.  Once the path is complete it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.SetGridMagnitudeType(System.Int32)">
            <summary>
              Sets the grid type of the magnitude axis in an PolarAxes object. 
            </summary>
            <param name="ngrid"> Specifies the grid type: Use one of the grid type constants:  GRID_MAJOR, GRID_MINOR 
            or GRID_ALL.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.GetGridMagnitudeType">
            <summary>
              Returns the grid type of the magnitude axis in an PolarAxes object. 
            </summary>
            <returns> Returns the grid type.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.SetGridAngleType(System.Int32)">
            <summary>
              Sets the grid type of the polar angle axis in an PolarAxes object. 
            </summary>
            <param name="ngrid"> Specifies the grid type: Use one of the grid type constants:  GRID_MAJOR, GRID_MINOR 
            or GRID_ALL.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarGrid.GetGridAngleType">
            <summary>
              Returns the grid type of the polar angle axis in an PolarAxes object. 
            </summary>
            <returns> Returns the grid type.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PolarGrid.GridMagnitudeType">
            <summary>
              Set/Get the grid type of the magnitude axis in an PolarAxes object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PolarGrid.GridAngleType">
            <summary>
              Set/Get the grid type of the polar angle axis in an PolarAxes object. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.PolarLinePlot">
            <summary>
              The PolarLinePlot class extends the PolarPlot class and  displays polar plot data in a simple line plot format.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.PolarPlot">
            <summary>
              The PolarPlot is the abstract base class of the plot types that use  polar data.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarPlot.theDataset">
            <summary>
              This field holds a reference to the data represented by polar plot objects.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarPlot.InitDefaults">
            <summary>
              Initializes default values for this plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the current polar plot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarPlot.Copy(com.quinncurtis.chart2dnet.PolarPlot)">
            <summary>
              Copies the source polar plot object. 
            </summary>
            <param name="source"> The source polar plot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarPlot.#ctor">
            <summary>
              The default PolarPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the polar plot is drawn using that 
              path.  Once the path is complete it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarPlot.CalcNearestPoint(com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against all of the xy points  in a simple dataset and calculates 
              which point in the dataset  is nearest the test point. The nearness test has many  different forms:  
              Nearness Mode Constant Description  FNP_X nearest x  FNP_Y nearest y  FNP_DIST shortest distance  
              FNP_NORMX nearest normalized x  FNP_NORMY nearest normalized y  FNP_NORMDIST shortest normalized distance 
            </summary>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarPlot.CheckValidPoint(System.Double,System.Double,System.Boolean)">
            <summary>
             This method checks to see if the current data point is valid 
            </summary>
            <param name="x"> The x-value of the data point. </param>
            <param name="y"> The y-value of the data point. </param>
            <param name="valid"> The valid data flag of the data point. </param>
            <returns> Returns true if the data point is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarPlot.SetDataset(com.quinncurtis.chart2dnet.SimpleDataset)">
            <summary>
             Replaces the current SimpleDataset object with a new one. 
            </summary>
            <param name="dataset"> Specifies the new SimpleDataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarPlot.GetDataset">
            <summary>
             Returns a reference to the dataset. 
            </summary>
            <returns> Returns a reference to the current dataset.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PolarPlot.TheDataset">
            <summary>
             Set/Get the current SimpleDataset object with a new one. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarLinePlot.InitDefaults">
            <summary>
              Initializes default values for the polar plot.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarLinePlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the PolarLinePlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarLinePlot.Copy(com.quinncurtis.chart2dnet.PolarLinePlot)">
            <summary>
              Copies the source PolarLinePlot object. 
            </summary>
            <param name="source"> The source PolarLinePlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarLinePlot.Clone">
            <summary>
             Returns an object that is a clone of this PolarLinePlot object. 
            </summary>
            <returns> Returns a clone of this PolarLinePlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarLinePlot.#ctor">
            <summary>
              The default PolarLinePlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarLinePlot.#ctor(com.quinncurtis.chart2dnet.PolarCoordinates)">
            <summary>
              This constructor creates a new PolarLinePlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new PolarLinePlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarLinePlot.#ctor(com.quinncurtis.chart2dnet.PolarCoordinates,com.quinncurtis.chart2dnet.SimpleDataset,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new PolarLinePlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new PolarLinePlot object. </param>
            <param name="dataset"> The polar line plot represents the polar coordinate values in this data set. </param>
            <param name="attrib"> Specifies the attributes (line color and line style) for the line plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarLinePlot.InitPolarLinePlot(com.quinncurtis.chart2dnet.SimpleDataset,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of a polar line plot. 
            </summary>
            <param name="dataset"> The polar line plot represents the polar coordinate values in this data set. </param>
            <param name="attrib"> an ChartAttribute object that  specify the attributes (line color and line style) 
            of the polar line plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarLinePlot.DrawPolarLinePlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a polar line plot using the current polar line plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The polar line plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarLinePlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the polar plot is drawn using that path.  
              Once the path is complete it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.PolarScatterPlot">
            <summary>
              The PolarScatterPlot class extends the PolarPlot class and  displays polar plot data in a 
              simple scatter plot format.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarScatterPlot.scatterPlotSymbol">
            <summary>
             The symbol used in polar scatter plots.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.PolarScatterPlot.customScatterPlotSymbol">
            <summary>
             The symbol object used in polar scatter plots.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.InitDefaults">
            <summary>
              Initializes default values for the polar scatter plot.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the PolarScatterPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>	 
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.Copy(com.quinncurtis.chart2dnet.PolarScatterPlot)">
            <summary>
              Copies the source PolarScatterPlotobject1. 
            </summary>
            <param name="source"> The source PolarScatterPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.Clone">
            <summary>
             Returns an object that is a clone of this PolarScatterPlot object. 
            </summary>
            <returns> Returns a clone of this PolarScatterPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.#ctor">
            <summary>
              The default PolarScatterPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.#ctor(com.quinncurtis.chart2dnet.PolarCoordinates)">
            <summary>
              This constructor creates a new PolarScatterPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new PolarScatterPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.#ctor(com.quinncurtis.chart2dnet.PolarCoordinates,com.quinncurtis.chart2dnet.SimpleDataset,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new PolarScatterPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new PolarScatterPlot object. </param>
            <param name="dataset"> The polar line plot represents the polar coordinate values in this data set. </param>
            <param name="symtype"> The symbol used in the scatter plot. Use one of  the scatter plot symbol 
            constants: NOSYMBOL,  SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR, LINE, HBAR, VBAR, BAR3D, CIRCLE. </param>
            <param name="attrib"> Specifies the attributes (line and fill color ) for the scatter plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.InitPolarScatterPlot(com.quinncurtis.chart2dnet.SimpleDataset,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of a polar scatter plot. 
            </summary>
            <param name="dataset"> The polar line plot represents the polar coordinate values in this data set. </param>
            <param name="symtype"> The symbol used in the scatter plot. Use one of  the scatter plot symbol 
            constants: NOSYMBOL,  SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR, LINE, HBAR, VBAR, BAR3D, CIRCLE. </param>
            <param name="attrib"> Specifies the attributes (line and fill color ) for the scatter plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.DrawPolarScatterPlot(System.Drawing.Graphics)">
            <summary>
              Draws a polar scatter plot using the current polar scatter plot properties. 
            </summary>
            <param name="g2"> The current graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the polar plot is drawn using 
              that path.  Once the path is complete it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.SetCustomScatterPlotSymbol(com.quinncurtis.chart2dnet.ChartSymbol)">
            <summary>
             Sets a custom symbol for use in scatter plots. 
            </summary>
            <param name="symbol"> A reference to an ChartSymbol object representing a custom symbol.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.GetCustomScatterPlotSymbol">
            <summary>
             Returns the custom symbol used in scatter plots. 
            </summary>
            <returns> symbol Returns a reference to the ChartSymbol object representing a custom symbol.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.SetScatterPlotSymbol(System.Int32)">
            <summary>
              Sets the symbol for scatter plots. 
            </summary>
            <param name="nsymbol"> Sets the symbol for scatter plots.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.PolarScatterPlot.GetScatterPlotSymbol">
            <summary>
              Returns the symbol for scatter plots. 
            </summary>
            <returns> Returns the symbol for scatter plots.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PolarScatterPlot.CustomScatterPlotSymbol">
            <summary>
             Set/Get a custom symbol for use in scatter plots. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.PolarScatterPlot.ScatterPlotSymbol">
            <summary>
              Set/Get the symbol for scatter plots. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Polysurface">
            <summary>
             This class manages a polysurface, a collection of 3 and 4 sided polygons  defined using 3D coordinates.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.surfacepointlist">
            <summary>
             An instance of pointListType holding the points that define the polysurface.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.surfacepolygonlist">
            <summary>
             An instance of polygonListType that defines the edges of the polygons in  the polysurface.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.adjpolygonlist">
            <summary>
             An array, size numpolygons  3, that holds a list of polygons adjacent  to a given polygon.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.bEvenGrid">
            <summary>
             Specifies that the polysurface is based on an even grid.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.nGridType">
            <summary>
             Specifies the grid type: either POLYSURFACE_SQUAREGRID or POLYSURFACE_TRIANGLEGRID
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.RGRows">
            <summary>
             the number of rows and columns in a regular grid polysurface.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.RGColumns">
            <summary>
             the number of rows and columns in a regular grid polysurface.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.RGMinX">
            <summary>
             The regular grid minimum, maximum and range values for x, y and z
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.RGMaxX">
            <summary>
             The regular grid minimum, maximum and range values for x, y and z
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.RGMinY">
            <summary>
             The regular grid minimum, maximum and range values for x, y and z
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.RGMaxY">
            <summary>
             The regular grid minimum, maximum and range values for x, y and z
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.surfaceFunction">
            <summary>
             A reference to an Surface function if a 3D function is used as the basis  of a polysurface.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.bWireFrame">
            <summary>
             A wire frame status variable
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.BI">
            <summary>
             Specfies that the base index for the delaunay calculations is 1.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.#ctor">
            <summary>
             The default contructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.#ctor(System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
             This constructor creates a surface based on a collection of 3D points defined by the values
             in the x, y and x arrays. The Delaunay surface algorithm will define polygons surfaces based on the
             3D points.
            </summary>
            <param name="x"> An array, size numpoints, of the x-values of the 3D points defining the surface. </param>
            <param name="y"> An array, size numpoints, of the y-values of the 3D points defining the surface. </param>
            <param name="z"> An array, size numpoints, of the z-values of the 3D points defining the surface. </param>
            <param name="numpoints"> The number of 3D points defined by the x, y and z arrays. </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.#ctor(com.quinncurtis.chart2dnet.Point3D[],System.Int32)">
            <summary>
             This constructor creates a surface based on a collection of 3D points defined by the values
             in the points array. The Delaunay surface algorithm will define polygons surfaces based on the
             3D points.
            </summary>
            <param name="points"> An array, size numpoints, of the  3D points defining the surface. </param>
            <param name="numpoints"> The number of 3D points defined by the points arrays. </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
             This constructor creates an empty polysurface of the specified size. 3D points need to be added to the polysurface.
            </summary>
            <param name="numpoints"> The number of 3D points making up the polysurface. </param>
            <param name="numpolygons"> The number of polygons defining the polysurface. </param>
            <param name="pntsperpoly"> The number points per polygon in the polysurface. </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.#ctor(com.quinncurtis.chart2dnet.Point3D[],System.Int32,System.Int32,System.Int32)">
            <summary>
             This constructor creates a surface based on a collection of 3D points, forming a grid in the xy plane, 
             defined by the values
             in the grid arrays 
            </summary>
            <param name="grid"> An array, size rows * columns, of the  3D points defining the surface. </param>
            <param name="rows"> The number of rows in the gridded surface. </param>
            <param name="columns"> The number of columns in the gridded surface. </param>
            <param name="gridtype"> The grid type, either ChartObj.POLYSURFACE_SQUAREGRID, or
            ChartObj.POLYSURFACE_TRIANGLEGRID. </param>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,com.quinncurtis.chart2dnet.SurfaceFunction)">
            <summary>
             This constructor creates a surface based on a user specified function, evaluated on an evenly
             spaced xy grid.
            </summary>
            <param name="rows"> The number of rows in the gridded surface. </param>
            <param name="columns"> The number of columns in the gridded surface. </param>
            <param name="x1"> The starting x-value for the surface function evaluation. </param>
            <param name="y1"> The starting y-value for the surface function evaluation. </param>
            <param name="x2"> The ending x-value for the surface function evaluation. </param>
            <param name="y2"> The ending y-value for the surface function evaluation. </param>
            <param name="sf"> A user function, derived from the SurfaceFunction class, that define the 3D surface. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Int32)">
            <summary>
             This constructor creates a surface based on a collection of z-values, evaluated on an evenly
             spaced xy grid.
            </summary>
            <param name="rows"> The number of rows in the gridded surface. </param>
            <param name="columns"> The number of columns in the gridded surface. </param>
            <param name="x1"> The starting x-value for the surface function evaluation. </param>
            <param name="y1"> The starting y-value for the surface function evaluation. </param>
            <param name="x2"> The ending x-value for the surface function evaluation. </param>
            <param name="y2"> The ending y-value for the surface function evaluation. </param>
            <param name="zvalues"> An array of z-values, size rows * columns, that define the 3D surface. </param>
            <param name="gridtype"> The grid type, either ChartObj.POLYSURFACE_SQUAREGRID, or
            ChartObj.POLYSURFACE_TRIANGLEGRID. </param>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.#ctor(com.quinncurtis.chart2dnet.Polysurface)">
            <summary>
             This constructor creates a surface as a copy of another Polysurface object.
            </summary>
            <param name="ps"> The source polysurface object. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.#ctor(com.quinncurtis.chart2dnet.Polysurface,System.Int32)">
            <summary>
             This constructor creates a compressed version of another Polysurface object.
            </summary>
            <param name="ps"> The source polysurface object. </param>	
            <param name="reduction"> The compression factor for the constructor. The compression is a simple average 
            across reduction points. </param>	
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.OpenPolysurface(System.Int32,System.Int32,System.Int32)">
            <summary>
             This method initializes an empty polysurface of the specified size. 3D points need to be added to 
             the polysurface.
            </summary>
            <param name="numpnts"> The number of 3D points making up the polysurface. </param>
            <param name="numpolygons"> The number of polygons defining the polysurface. </param>
            <param name="pntsperpoly"> The number points per polygon in the polysurface. </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.ReducePolysurface(com.quinncurtis.chart2dnet.Polysurface,System.Int32)">
            <summary>
             This method creates a compressed version of another Polysurface object.
            </summary>
            <param name="ps"> The source polysurface object. </param>	
            <param name="reduction"> The compression factor for the constructor. The compression is a simple average 
            across reduction points. </param>	
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.ErrorCheck(System.Int32)">
            <summary>
              Checks the current object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>	 
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.Clone">
            <summary>
             Returns an object that is a clone of this ContourDataset object. 
            </summary>
            <returns> Returns a clone of this ContourDataset object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.Copy(com.quinncurtis.chart2dnet.Polysurface)">
            <summary>
              Copies the source Polysurface object. 
            </summary>
            <param name="ps"> The source Polysurface object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.AllocAdjacentPolygonList">
            <summary>
             Allocates the array space for the delaunay list of adjacent polygons
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.FreeAdjacentPolygonList">
            <summary>
             Frees the array space for the delaunay list of adjacent polygons
            </summary>		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetAdjacentPolygonPntr">
            <summary>
             Returns the array of adjacent polygons
            </summary>	
            <returns> Returns the array of adjacent polygons.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.AddAdjacentPolyList(System.Int32,System.Int32[])">
            <summary>
              Sets the 3 entries of the adjacent polygon list for the specified polygon. 
            </summary>
            <param name="tri"> The specified triangle.</param>
            <param name="adjlist"> An array, size 3, specifying the triangles adjacent to the specified rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetAdjacentPolyList(System.Int32,System.Int32[])">
            <summary>
              Returns the triangles adjacent to the specified triangle. 
            </summary>
            <param name="tri"> The specified triangle.</param>
            <param name="adjlist"> An array, size 3, specfiying the triangles adjacent to the specified rectangle.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.ClosePolysurface">
            <summary>
              Frees all of the memory associated with Polysurface object. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.CloseDelaunay">
            <summary>
              Frees all of the memory associated with processing the polysurface points using delaunay triangularization. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.SetPolysurfacePoints(com.quinncurtis.chart2dnet.Point3D[],System.Int32,System.Int32)">
            <summary>
              Set the points associated with a polysurface.
            </summary>
            <param name="points"> An array, size numpoints, of the  3D points defining the surface. </param>
            <param name="startindex"> Adds points to the internal 3D array, starting at the startindex point. </param>
            <param name="numpnts"> The number of 3D points defined by the points array. </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.SetOnePolysurfacePoint(System.Int32,com.quinncurtis.chart2dnet.Point3D)">
            <summary>
              Set a single point associated with a polysurface.
            </summary>
            <param name="point"> The 3D point. </param>
            <param name="index"> The index of the 3D point in the internal 3D point array. </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetOnePolysurfacePoint(System.Int32,com.quinncurtis.chart2dnet.Point3D)">
            <summary>
              Return the value of a single point associated with a polysurface.
            </summary>
            <param name="point"> Returns the 3D point. </param>
            <param name="index"> The index of the 3D point in the internal 3D point array. </param>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetPolysurfacePointList">
            <summary>
              Return the internal 3D point array of the polysurface.
            </summary>
            <return> Returns the 3D point array. </return>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.AddPolysurfacePolygon(System.Int32,System.Int32[],System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
              Adds a polygon to the polysurface. A polygon is defined by specifying the indices, in order,
              of the 3D points in the polysurface 3D point array.
            </summary>
            <param name="polyindex"> The index of the polygon that is added. </param>
            <param name="pointindices"> An array, size numedges, of the indices of the points forming the polygon. </param>
            <param name="numedges"> The number of points, or edges, forming the polygon. </param>
            <param name="outsidecolor"> The surface color of the polygon. </param>
            <param name="bordercolor"> The border color of the polygon. </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.SetPolysurfaceColors(System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
              Sets the polysurface colors for a given polygon.
            </summary>
            <param name="polyindex"> The index of the polygon in the internal polygon array. </param>
            <param name="outsidecolor"> The surface color of the polygon. </param>
            <param name="bordercolor"> The border color of the polygon. </param>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GPSPolygon(System.Int32,com.quinncurtis.chart2dnet.Point3D[])">
            <summary>
              Returns the 3D points forming the specified 3D polygon.
            </summary>
            <param name="polyindex"> The index of the polygon in the internal polygon array. </param>
            <param name="points"> Returns the 3D points forming the polygon. </param>
              <returns> Returns the number of edges, or points forming the polygon.</returns>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetPolysurfacePolygon(System.Int32,com.quinncurtis.chart2dnet.Point3D[],System.Drawing.Color,System.Drawing.Color)">
            <summary>
              Returns the 3D points forming the specified 3D polygon.
            </summary>
            <param name="polyindex"> The index of the polygon in the internal polygon array. </param>
            <param name="points"> Returns the 3D points forming the polygon. </param>
            <param name="outsidecolor"> Returns the surface color of the polygon. </param>
            <param name="bordercolor"> Returns the border color of the polygon. </param>
              <returns> Returns the number of edges, or points forming the polygon.</returns>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetPSPolygonIndices(System.Int32,System.Int32[],System.Drawing.Color,System.Drawing.Color)">
            <summary>
              Returns the 3D points forming the specified 3D polygon.
            </summary>
            <param name="polyindex"> The index of the polygon in the internal polygon array. </param>
            <param name="indices"> Returns the indicies of the 3D points forming the polygon. </param>
            <param name="outsidecolor"> Returns the surface color of the polygon. </param>
            <param name="bordercolor"> Returns the border color of the polygon. </param>
              <returns> Returns the number of edges, or points forming the polygon.</returns>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.CreatePolysurfaceFunction(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,com.quinncurtis.chart2dnet.SurfaceFunction)">
            <summary>
             This nethod creates a surface based on a user specified function, evaluated on an evenly
             spaced xy grid.
            </summary>
            <param name="rows"> The number of rows in the gridded surface. </param>
            <param name="columns"> The number of columns in the gridded surface. </param>
            <param name="x1"> The starting x-value for the surface function evaluation. </param>
            <param name="y1"> The starting y-value for the surface function evaluation. </param>
            <param name="x2"> The ending x-value for the surface function evaluation. </param>
            <param name="y2"> The ending y-value for the surface function evaluation. </param>
            <param name="sf"> A user function, derived from the SurfaceFunction class, that define the 3D surface. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.CreatePolysurfaceEvenGrid(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Int32)">
            <summary>
             This method creates a surface based on a collection of z-values, evaluated on an evenly
             spaced xy grid.
            </summary>
            <param name="rows"> The number of rows in the gridded surface. </param>
            <param name="columns"> The number of columns in the gridded surface. </param>
            <param name="x1"> The starting x-value for the surface function evaluation. </param>
            <param name="y1"> The starting y-value for the surface function evaluation. </param>
            <param name="x2"> The ending x-value for the surface function evaluation. </param>
            <param name="y2"> The ending y-value for the surface function evaluation. </param>
            <param name="rdata"> An array of z-values, size rows * columns, that define the 3D surface. </param>
            <param name="gridtype"> The grid type, either ChartObj.POLYSURFACE_SQUAREGRID, or
            ChartObj.POLYSURFACE_TRIANGLEGRID. </param>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.CreateRGAdjacentPolygonList">
            <summary>
             Allocates the adjacent polygon list.
            </summary>	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.ConvertRG2PS(com.quinncurtis.chart2dnet.Point3D[],System.Int32,System.Int32,System.Int32)">
            <summary>
             This method creates a surface based on a collection of 3D points, forming a grid in the xy plane, 
             defined by the values
             in the grid arrays 
            </summary>
            <param name="grid"> An array, size rows * columns, of the  3D points defining the surface. </param>
            <param name="rows"> The number of rows in the gridded surface. </param>
            <param name="columns"> The number of columns in the gridded surface. </param>
            <param name="gridtype"> The grid type, either ChartObj.POLYSURFACE_SQUAREGRID, or
            ChartObj.POLYSURFACE_TRIANGLEGRID. </param>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.NormalizePolysurfacePoint(System.Int32,com.quinncurtis.chart2dnet.Point3D,com.quinncurtis.chart2dnet.Point3D)">
            <summary>
             This method normalizes a polysurface point using the specified mx + b normalization values.
            </summary>
            <param name="polyindex"> The index of the polysurface point. </param>
            <param name="mx"> A 3D point containing the 3 scaling factors for the normalization. </param>
            <param name="b"> A 3D point containing the 3 offset factors for the normalization. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.UnNormalizePolysurfacePoint(System.Int32,com.quinncurtis.chart2dnet.Point3D,com.quinncurtis.chart2dnet.Point3D)">
            <summary>
             This method un-normalizes a polysurface point using the specified mx + b normalization values.
            </summary>
            <param name="polyindex"> The index of the polysurface point. </param>
            <param name="mx"> A 3D point containing the 3 scaling factors for the un-normalization. </param>
            <param name="b"> A 3D point containing the 3 offset factors for the un-normalization. </param>		
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetPSPMean(System.Int32,System.Int32)">
            <summary>
             Returns the mean value of the specified coordinate of a polygon.
            </summary>
            <param name="polyindex"> The index of the polygon. </param>
            <param name="coord"> The coordinate to average. Use one of the coordinate constants:
            ChartObj.X_AXIS, ChartObj.Y_AXIS, ChartObj.Z_AXIS.</param>
            <returns> Returns the mean value of the specified coordinate.</returns>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetPSNumPolygons">
            <summary>
             Returns the number of polygons currently in the polysurface.
            </summary>
            <returns> Returns the number of polygons currently in the polysurface.</returns>
            		
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetPSMaxPolygons">
            <summary>
             Returns the maximum number of polygons allocated for this polysurface.
            </summary>
            <returns> Returns the maximum number of polygons allocated for this polysurface.</returns>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetPSPointsPerPolygon">
            <summary>
             Returns the number of points per polygon for this polysurface.
            </summary>
            <returns> Returns the number of points per polygon for this polysurface.</returns>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.GetPSNumPoints">
            <summary>
             Returns the number of points defining the polysurface.
            </summary>
            <returns> Returns the number of points defining the polysurface.</returns>
            	
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.ResetPolysurfacePolygons">
            <summary>
             Resets the number of polysurface polygons n the polygon list to 0.
            </summary>
            			
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.InitDelaunay">
            <summary>
             Initialize the Delaunay routine.
            </summary>
            			
        </member>
        <member name="M:com.quinncurtis.chart2dnet.Polysurface.DelaunaySurface(System.Boolean)">
            <summary>
             Calculates a DelaunaySurface for the 3D points currently in the 3D point list.
            </summary>
            <param name="keepadjtrilist"> Keeps the adjacent triangle list in memory so that it can be used by the
             the contour plotting routines. </param>
            		
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Polysurface.pointListType">
            <summary>
             A class that will hold the 3D points used to define the polygons of the polysurface
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.pointListType.polynumpoints">
            <summary>
             The number of points in the polypointlist
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.pointListType.polypointlist">
            <summary>
             The list of 3D points used to define the polygons of a polysurface.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Polysurface.polygonEntryType">
            <summary>
             Each polygon is defined by a class that specifies its starting position in the 
             surfacePolygonList.polygonedgelist array, the number of  edges in the list, and associated colors.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonEntryType.surfacecolors">
            <summary>
             The surface color of the polygon
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonEntryType.insidecolors">
            <summary>
             The inside color of the polygon
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonEntryType.bordercolor">
            <summary>
             The border color of the polygon
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonEntryType.numedges">
            <summary>
             The number of edges in the polygon
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonEntryType.edgestart">
            <summary>
             The starting index in the surfacePolygonList.polygonedgelist array.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Polysurface.polygonListType">
            <summary>
             This class holds a list of the polygons making up the polysurface.  The polygons are defined using the 
             indices of the 3D points in  the surfacepointlist.polypointlist array.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonListType.numpolygons">
            <summary>
             The number of polygons in the polysurface.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonListType.usedpolygons">
            <summary>
             The number of polygons actually used in the polysurface. It is possible  that a polysurface 
             has unused polygons.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonListType.tablelength">
            <summary>
             The size of the surfacepolygonlist.polygonedgelist array.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonListType.pointsperpolygon">
            <summary>
             The number of points per polygon used for this polysurface
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonListType.tableindex">
            <summary>
             The starting index of the next polygon added to the polygon edgelist.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonListType.polygonentrys">
            <summary>
             An array of polygonEntryType objects, size numpolygons, that defines the  edges and colors of 
             each polygon in the polysurface.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.Polysurface.polygonListType.polygonedgelist">
            <summary>
             An array, size numpolygons  pointsperpolygon, that holds the indices  of points forming the polygons.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.Polysurface.bintclass">
            <summary>
             This is a sort class that implements the IComparable interface  so that the data points in a dataset 
             can be sorted as part of the Delaunay algorithm.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.QBrush">
            <summary>
            The QBrush object is a shell around the standard Brush type. It was added because retrieving Brush characteristics
            took and incredibly long time (GDI+ problem) .
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.QBrush.thebrush">
            <summary>
            The underlying brush object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.QBrush.brushcolor">
            <summary>
            The characteristic color of the underlying brush object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.QBrush.#ctor(System.Drawing.SolidBrush)">
            <summary>
             This constructor initializes a QBrush object with a Brush object. 
            </summary>	
            <param name="brush"> The source Brush object.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.QBrush.TheBrush">
            <summary>
              Set/Get the underying brush object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.QBrush.BrushColor">
            <summary>
              Set/Get the underying brush characteristic color. 
            </summary>		
        </member>
        <member name="T:com.quinncurtis.chart2dnet.QPen">
            <summary>
            The QPen object is a shell around the standard Pen type. It was added because retrieving Pen characteristics
            took and incredibly long time (GDI+ problem) .
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.QPen.thepen">
            <summary>
            The underlying pen object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.QPen.pencolor">
            <summary>
            The characteristic color of the underlying pen object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.QPen.dashstyle">
            <summary>
            The characteristic DashStyle of the underlying pen object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.QPen.width">
            <summary>
            The characteristic line width of the underlying pen object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.QPen.#ctor(System.Drawing.Pen)">
            <summary>
             This constructor initializes a QPen object with a Pen object. 
            </summary>	
            <param name="pen"> The source Pen object.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.QPen.ThePen">
            <summary>
              Set/Get the underying brush object. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.QPen.PenColor">
            <summary>
              Set/Get the underying pen characteristic color. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.QPen.Width">
            <summary>
              Set/Get the underying pen characteristic line width. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.QPen.DashStyle">
            <summary>
              Set/Get the underying pen characteristic DashStyle. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.RelativeText">
            <summary>
             The RelativeText class is used to place text in a chart, relative to other text. It allows for more flexible text
             postioning than explictly placing text using one of the ChartText positioning methods. 
             any of the coordinate systems, rotated, and justified  vertically and horizontally. It also supports 
             multi-line text by inserting  a CR (carriage return) character in the string.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.ErrorCheck(System.Int32)">
            <summary>
              Checks the current chart text object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new RelativeText object using the specified scale. 
            </summary>
            <param name="transform"> The text object is placed in the coordinate system defined by transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.Copy(com.quinncurtis.chart2dnet.RelativeText)">
            <summary>
              Copies the source text object. 
            </summary>
            <param name="source"> The source text object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.Clone">
            <summary>
             Returns an object that is a clone of this RelativeText object. 
            </summary>
            <returns> Returns a clone of this RelativeText object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.#ctor">
            <summary>
             Default constructor for relative text class
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String,com.quinncurtis.chart2dnet.ChartText,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new RelativeText using the specified scale,  font, string, position, 
              justification and rotation. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object. </param>
            <param name="graphobj"> A reference to the ChartText derived object that the text is placed relative to. </param>
            <param name="relpostypeX"> Specifies the if the position of the text is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants:DEV_POS,PHYS_POS, 
            NORM_GRAPH_POS,NORM_PLOT_POS.</param>
            <param name="relpostypeY"> Specifies the if the position of the text is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants:DEV_POS,PHYS_POS, 
            NORM_GRAPH_POS,NORM_PLOT_POS.</param>	
            <param name="xjust"> Specifies the horizontal justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER orJUSTIFY_MAX. </param>
            <param name="yjust"> Specifies the vertical justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN,JUSTIFY_CENTER orJUSTIFY_MAX. </param>
            <param name="rotation"> The rotation (-360 to 360 degrees) of the text in the normal viewing plane.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String,com.quinncurtis.chart2dnet.ChartText,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new RelativeText using the specified scale,  font, string, position and justification. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object. </param>
            <param name="graphobj"> A reference to the ChartText derived object that the text is placed relative to. </param>
            <param name="relpostypeX"> Specifies the if the position of the text is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants:DEV_POS,PHYS_POS, 
            NORM_GRAPH_POS,NORM_PLOT_POS.</param>
            <param name="relpostypeY"> Specifies the if the position of the text is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants:DEV_POS,PHYS_POS, 
            NORM_GRAPH_POS,NORM_PLOT_POS.</param>	 
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String)">
            <summary>
              This constructor creates a new RelativeText using the specified scale,  font, and string. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.#ctor(System.Drawing.Font,System.String)">
            <summary>
              This constructor creates a new RelativeText using the specified  font, and string. It cannot be used for 
              display because it does not reference  a coordinate system. 
            </summary>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.RelativeText.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. It creates a rotated font transform, calculates  the starting 
              position of the justified text string, sets foreground and  background colors, then draws the string 
              to the specified graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.RelativeText.RelativePositionJustX">
            <summary>
             Set/Get the 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.RelativeText.RelativePositionJustY">
            <summary>
             Set/Get the 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.RelativeText.PositionReference">
            <summary>
             Set/Get the 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.SimpleBarPlot">
            <summary>
              The SimpleBarPlot class extends the SimplePlot class and  displays data in a bar format. Individual bars, 
              the maximum value of which corresponds to the  y-values of the dataset, are displayed justified with 
              respect to the x-values.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.SimplePlot">
            <summary>
              The SimplePlot manages and displays all of the plot types that use simple (one y-value  for each 
              x-value) data. It is a concrete subclass of the Plot class.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimplePlot.theDataset">
            <summary>
              This field holds a reference to the data represented by this plot object.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimplePlot.displayDataset">
            <summary>
             This field holds a reference to the fast clip, truncated version, data represented by this plot object. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimplePlot.fastClipOffset">
            <summary>
             This field the starting offset of the displayDataset, with respect to the original dataset. This value is
             used by the get nearest point methods.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimplePlot.InitDefaults">
            <summary>
              Initializes default values for the simple plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimplePlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the current plot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimplePlot.Copy(com.quinncurtis.chart2dnet.SimplePlot)">
            <summary>
              Copies the source plot object. 
            </summary>
            <param name="source"> The source plot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimplePlot.#ctor">
            <summary>
              The default SimplePlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimplePlot.CheckValidPoint(System.Double,System.Double,System.Boolean)">
            <summary>
             This method checks the validity of the x- and y-values of a datapoint. 
            </summary>
            <param name="x"> The x-value of the datapoint that is checked. </param>
            <param name="y"> The y-value of the datapoint that is checked. </param>
            <param name="valid"> The valid flag of the datapoint that is checked. </param>///
            <returns> Returns true if the x- and y-values represent a valid datapoint.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimplePlot.SetDataset(com.quinncurtis.chart2dnet.SimpleDataset)">
            <summary>
             Replaces the current SimpleDataset object with a new one. 
            </summary>
            <param name="dataset"> Specifies the new SimpleDataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimplePlot.GetDataset">
            <summary>
             Returns a reference to the current SimpleDataset. 
            </summary>
            <returns> Returns a reference to the current SimpleDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimplePlot.CalcNearestPoint(com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against all of the xy points  in a simple dataset and calculates 
              which point in the dataset  is nearest the test point. The nearness test has many  different forms:  
              Nearness Mode Constant Description  FNP_X nearest x  FNP_Y nearest y  FNP_DIST shortest distance  
              FNP_NORMX nearest normalized x  FNP_NORMY nearest normalized y  FNP_NORMDIST shortest normalized distance 
            </summary>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimplePlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point is near one of the data points. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.SimplePlot.TheDataset">
            <summary>
             Set/Get the current SimpleDataset object with a new one. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.SimplePlot.DisplayDataset">
            <summary>
             Set/Get the current displayDataset object. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.InitDefaults">
            <summary>
              Initializes default values for the SimpleBarPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the SimpleBarPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.Copy(com.quinncurtis.chart2dnet.SimpleBarPlot)">
            <summary>
              Copies the SimpleBarPlot object. 
            </summary>
            <param name="source"> The source plot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.Clone">
            <summary>
             Returns an object that is a clone of this SimpleBarPlot object. 
            </summary>
            <returns> Returns a clone of this SimpleBarPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.#ctor">
            <summary>
              The default SimpleBarPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new SimpleBarPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new SimpleBarPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.SimpleDataset,System.Double,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,System.Int32)">
            <summary>
              This constructor creates a new SimpleBarPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new SimpleBarPlot object. </param>
            <param name="dataset"> The bar plot will represent the values in this data set. </param>
            <param name="barwidth"> The width of the bars in physical coordinates. </param>
            <param name="barbase"> The base value for bars in physical coordinates. </param>
            <param name="attrib"> Specifies the attributes (line color and fill color) of the bars. </param>
            <param name="barjust"> Specifies the justification with respect to the independent data value.  
            Use one of the justification constants: JUSTIFY_MIN, JUSTIFY_CENTER, JUSTIFY_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.InitBarPlot(com.quinncurtis.chart2dnet.SimpleDataset,System.Double,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,System.Int32)">
            <summary>
              Sets the properties of a bar plot. 
            </summary>
            <param name="dataset"> The bar plot will represent the values in this data set. </param>
            <param name="barwidth"> The width of the bars in physical coordinates. </param>
            <param name="barbase"> The base value for bars in physical coordinates. </param>
            <param name="attrib"> Specifies the attributes (line color and fill color) of the bars. </param>
            <param name="barjust"> Specifies the justification with respect to the independent data value.  
            Use one of the justification constants: JUSTIFY_MIN, JUSTIFY_CENTER, JUSTIFY_MAX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.CalcBarRect(System.Double,System.Double,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Calculates the Rectangle2D shape used to draw a single bar. 
            </summary>
            <param name="x"> The position of the bar in units of the independent axis. </param>
            <param name="y"> The maximum value of the bar in units of dependent axis. </param>
            <param name="rect"> Returns the shape of the bar as a Rectangle2D object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.DrawBarPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a bar plot in the specified path. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The bar plot is drawn in the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the plot object  is drawn in the path. 
              Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.CalcNearestPoint(com.quinncurtis.chart2dnet.Point2D,System.Int32,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              This method compares a test point against all of the xy points  in a simple dataset and calculates which 
              point in the dataset  is nearest the test point. The nearness test has many  different forms:  
              Nearness Mode Constant Description  FNP_X nearest x  FNP_Y nearest y  FNP_DIST shortest distance  
              FNP_NORMX nearest normalized x  FNP_NORMY nearest normalized y  FNP_NORMDIST shortest normalized distance 
            </summary>
            <param name="testpoint"> The test point for the nearness calculation. </param>
            <param name="nmode"> Specifies the algorithm used in the nearness calculation. </param>
            <param name="nearestpoint"> Returns the parameters of the nearest point. </param>
            <returns> Returns true if a valid data point is found and returned.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleBarPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects one of the bar plot bars. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects one of the bar plot bars.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot">
            <summary>
              The SimpleLineMarkerPlot class extends the SimplePlot class and  displays simple datasets in a 
              line plot format where individual data points can be  highlighted with scatter plot symbols.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.lineMarkerSymbol">
            <summary>
             The symbol value of the plot objects scatter plot symbol, if any. Use one of  the scatter plot symbol 
             constants: NOSYMBOL,  SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR, LINE, HBAR, VBAR, BAR3D, CIRCLE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.symbolStart">
            <summary>
             Specifies the starting index for the first symbol in line marker plots.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.symbolSkip">
            <summary>
             A symbol is placed every nth data point in line marker plots. The value of  this skip factor symbolSkip.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.symbolAttributes">
            <summary>
             Line marker plots require an extra attributes object
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.customChartSymbol">
            <summary>
             A custom scatter plot symbol can be used in scatter plots and line marker plots.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.InitDefaults">
            <summary>
              Initializes default values for the SimpleLineMarkerPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the SimpleLineMarkerPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state. </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.Copy(com.quinncurtis.chart2dnet.SimpleLineMarkerPlot)">
            <summary>
              Copies the source SimpleLineMarkerPlot object. 
            </summary>
            <param name="source"> The source SimpleLineMarkerPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.Clone">
            <summary>
             Returns an object that is a clone of this SimpleLineMarkerPlot object. 
            </summary>
            <returns> Returns a clone of this SimpleLineMarkerPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.#ctor">
            <summary>
              The default SimpleLineMarkerPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new SimpleLineMarkerPlot object that will reside in  the specified 
              coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new SimpleLineMarkerPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.SimpleDataset,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute,com.quinncurtis.chart2dnet.ChartAttribute,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new SimpleLineMarkerPlot object that will reside in  the specified 
              coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new SimpleLineMarkerPlot object. </param>
            <param name="dataset"> The line marker plot will represent the values in this data set. </param>
            <param name="symtype"> The symbol used in the line marker plot. Use one of  the scatter plot symbol 
            constants: NOSYMBOL,  SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR, LINE, HBAR, VBAR, BAR3D, CIRCLE. </param>
            <param name="lineattrib"> Specifies the attributes (line color and line style) for the line part  
            of the line marker plot. </param>
            <param name="symbolattrib"> Specifies the attributes (line and fill color ) for the symbol part  of 
            the line marker plot. </param>
            <param name="nsymbolstart"> Specifies the starting index for symbols in the line marker plot. </param>
            <param name="nsymbolskip"> Specifies the skip factor for placing symbols in the line marker plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.SetLineMarkerPlot(com.quinncurtis.chart2dnet.SimpleDataset,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute,com.quinncurtis.chart2dnet.ChartAttribute,System.Int32,System.Int32)">
            <summary>
              Sets the properties of a line marker plot. 
            </summary>
            <param name="dataset"> The line marker plot will represent the values in this data set. </param>
            <param name="symtype"> The symbol used in the line marker plot. Use one of  the scatter plot symbol 
            constants: NOSYMBOL,  SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR, LINE, HBAR, VBAR, BAR3D, CIRCLE. </param>
            <param name="lineattrib"> Specifies the attributes (line color and line style) for the line part  of 
            the line marker plot. </param>
            <param name="symbolattrib"> Specifies the attributes (line and fill color ) for the symbol part  of 
            the line marker plot. </param>
            <param name="nsymbolstart"> Specifies the starting index for symbols in the line marker plot. </param>
            <param name="nsymbolskip"> Specifies the skip factor for placing symbols in the line marker plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.SetCustomScatterPlotSymbol(com.quinncurtis.chart2dnet.ChartSymbol)">
            <summary>
             Sets a custom symbol for use in the line marker plots 
            </summary>
            <param name="symbol"> A reference to an ChartSymbol object representing a custom symbol.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.DrawLineMarkerPlot(System.Drawing.Graphics)">
            <summary>
              Draws a line marker plot using the current plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the group plot object  is drawn in 
              the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.SetSymbolStart(System.Int32)">
            <summary>
              Sets the symbol start value for line marker plots. 
            </summary>
            <param name="nstart"> Sets the symbol start value for line marker for plots.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.GetSymbolStart">
            <summary>
              Returns the symbol start value for line marker plots. 
            </summary>
            <returns> Returns the symbol start value for line marker for plots.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.SetSymbolSkip(System.Int32)">
            <summary>
              Sets the symbol skip value for line marker plots. 
            </summary>
            <param name="nskip"> Sets the symbol skip value for line marker for plots.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.GetSymbolSkip">
            <summary>
              Returns the symbol skip value for line marker plots. 
            </summary>
            <returns> Returns the symbol skip value for line marker for plots.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.SetLineMarkerSymbol(System.Int32)">
            <summary>
              Sets the symbol for line marker plots. 
            </summary>
            <param name="nsymbol"> Sets the symbol for line marker for plots.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.GetLineMarkerSymbol">
            <summary>
              Returns the symbol for line marker plots. 
            </summary>
            <returns> Returns the symbol for line marker for plots.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.SetSymbolAttributes(com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
             Sets the attributes for the filling the scatter plot symbols. 
            </summary>
            <param name="attrib"> Sets the attributes for the filling the scatter plot symbols.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.GetSymbolAttributes">
            <summary>
             Returns a copy of the attributes for the filling the scatter plot symbols. 
            </summary>
            <returns> Returns a copy of the attributes for the filling the scatter plot symbols.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.SymbolStart">
            <summary>
              Set/Get the symbol start value for line marker plots. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.SymbolSkip">
            <summary>
              Sets the symbol skip value for line marker plots. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.LineMarkerSymbol">
            <summary>
              Sets the symbol for line marker plots. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.SimpleLineMarkerPlot.SymbolAttributes">
            <summary>
             Sets the attributes for the filling the scatter plot symbols. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.SimpleLinePlot">
            <summary>
              The SimpleLinePlot class extends the SimplePlot class and  displays simple datasets in line plot format. 
              Data points can be connected with  a straight line, or with a step line. Individual line segments within  
              the line plot can be assigned unique attributes (color, line thickness, line style).
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLinePlot.InitDefaults">
            <summary>
              Initializes default values for the line plot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLinePlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the SimpleLinePlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLinePlot.Copy(com.quinncurtis.chart2dnet.SimpleLinePlot)">
            <summary>
              Copies the SimpleLinePlot object. 
            </summary>
            <param name="source"> The source SimpleLinePlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLinePlot.Clone">
            <summary>
             Returns an object that is a clone of this SimplePlot object. 
            </summary>
            <returns> Returns a clone of this SimplePlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLinePlot.#ctor">
            <summary>
              The default SimplePlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLinePlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new SimpleLinePlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new SimpleLinePlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLinePlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.SimpleDataset,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new SimpleLinePlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new SimpleLinePlot object. </param>
            <param name="dataset"> The line plot will represent the values in this data set. </param>
            <param name="attrib"> Specifies the attributes (line color and style, fill color and fill mode) 
            for the line plot. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLinePlot.SetLinePlot(com.quinncurtis.chart2dnet.SimpleDataset,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of a line plot. 
            </summary>
            <param name="dataset"> The line plot will represent the values in this data set. </param>
            <param name="attrib"> Specifies the attributes (line color and style, fill color and fill mode) for 
            the line plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLinePlot.DrawLinePlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a line plot using the current line plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The line plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleLinePlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class.  
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.SimpleScatterPlot">
            <summary>
              The SimpleScatterPlot class extends the SimplePlot class and  displays simple datasets in scatter plot 
              format where each data point is represented  using a symbol.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimpleScatterPlot.scatterPlotSymbol">
            <summary>
             The symbol value of the plot objects scatter plot symbol, if any. Use one of  the scatter plot symbol 
             constants: NOSYMBOL,  SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR, LINE, HBAR, VBAR, BAR3D, CIRCLE.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.SimpleScatterPlot.customScatterPlotSymbol">
            <summary>
             A custom scatter plot symbol can be used in the scatter plot.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.InitDefaults">
            <summary>
              Initializes default values for the SimpleScatterPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the SimpleScatterPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.Copy(com.quinncurtis.chart2dnet.SimpleScatterPlot)">
            <summary>
              Copies the source SimpleScatterPlot object. 
            </summary>
            <param name="source"> The source SimpleScatterPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.Clone">
            <summary>
             Returns an object that is a clone of this SimplePlot object. 
            </summary>
            <returns> Returns a clone of this SimplePlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.#ctor">
            <summary>
              This default constructor for SimpleScatterPlot.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new SimpleScatterPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new SimpleScatterPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.SimpleDataset,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              This constructor creates a new SimpleScatterPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new SimpleScatterPlot object. </param>
            <param name="dataset"> The scatter plot will represent the values in this data set. </param>
            <param name="symtype"> The symbol used in the scatter plot. Use one of  the scatter plot symbol 
            constants: NOSYMBOL,  SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR, LINE, HBAR, VBAR, BAR3D, CIRCLE. </param>
            <param name="attrib"> Specifies the attributes (size, line and fill color ) for the scatter plot. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.SetCustomScatterPlotSymbol(com.quinncurtis.chart2dnet.ChartSymbol)">
            <summary>
             Sets a custom symbol for use in scatter plots. 
            </summary>
            <param name="symbol"> A reference to a shape object representing a custom symbol.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.GetCustomScatterPlotSymbol">
            <summary>
             Returns the custom symbol used in a scatter plot. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.SetScatterPlot(com.quinncurtis.chart2dnet.SimpleDataset,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute)">
            <summary>
              Sets the properties of a scatter plot. 
            </summary>
            <param name="dataset"> The scatter plot will represent the values in this data set. </param>
            <param name="symtype"> The symbol used in the scatter plot. Use one of  the scatter plot symbol 
            constants: NOSYMBOL,  SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR, LINE, HBAR, VBAR, BAR3D, CIRCLE. </param>
            <param name="attrib"> Specifies the attributes (size, line and fill color ) for the scatter plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.DrawScatterPlot(System.Drawing.Graphics)">
            <summary>
              Draws a scatter plot using the current scatter plot properties. 
            </summary>
            <param name="g2"> The current graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the group plot object  
              is drawn in the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.SetScatterPlotSymbol(System.Int32)">
            <summary>
              Sets the symbol used in the scatter plot. Use one of  the scatter plot symbol constants: NOSYMBOL,  
              SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR, LINE, HBAR, VBAR, BAR3D, CIRCLE. 
            </summary>
            <param name="nsymbol"> Sets the symbol used in the scatter plot.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.GetScatterPlotSymbol">
            <summary>
              Returns the symbol used in the scatter plot. 
            </summary>
            <returns> Returns the symbol used in the scatter plot. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.SimpleScatterPlot.SetScatterPlotSymbol(System.Int32)"/>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.SimpleScatterPlot.CustomScatterPlotSymbol">
            <summary>
             Set/Get a custom symbol for use in scatter plots. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.SimpleScatterPlot.ScatterPlotSymbol">
            <summary>
              Set/Get the symbol for scatter plots. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.StackedBarPlot">
            <summary>
              The StackedBarPlot class extends the GroupPlot class and  displays data in stacked bar format. 
              In a stacked bar plot each group is  stacked on top of one another, each group bar a cumulative 
              sum of the related group  items before it.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.#ctor">
            <summary>
              The default StackedBarPlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the StackedBarPlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.InitDefaults">
            <summary>
              Initializes default values for the StackedBarPlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.Copy(com.quinncurtis.chart2dnet.StackedBarPlot)">
            <summary>
              Copies the source StackedBarPlot object. 
            </summary>
            <param name="source"> The source StackedBarPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.Clone">
            <summary>
             Returns an object that is a clone of this StackedBarPlot object. 
            </summary>
            <returns> Returns a clone of this StackedBarPlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new StackedBarPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new StackedBarPlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,System.Double,System.Double,com.quinncurtis.chart2dnet.ChartAttribute[],System.Int32)">
            <summary>
              This constructor creates a new StackedBarPlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new StackedBarPlot object. </param>
            <param name="dataset"> The stacked bar graph represents the values in this group data set. </param>
            <param name="rbarwidth"> The width of the stacked bars in units of the independent axis. </param>
            <param name="rbarbase"> The stacked bars start at the value rbarbase, and extend to the  the group bar 
            values represented by the data set. </param>
            <param name="attribs"> An array of ChartAttribute objects, size datasets.nNumGroups, that  specify the 
            attributes (out1line color and fill color) for each group of a stacked bar graph. </param>
            <param name="nbarjust"> The stacked bars are justified with respect to the x-values in the  dataset 
            using the rbarjust justification value (JUSTIFY_MIN, JUSTIFY_CENTER,  or JUSTIFY_MAX).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.InitStackedBarPlot(com.quinncurtis.chart2dnet.GroupDataset,System.Double,System.Double,com.quinncurtis.chart2dnet.ChartAttribute[],System.Int32)">
            <summary>
              Sets the properties of a stacked bar plot.  A stacked bar plot has the group bars stacked on top of one another. 
            </summary>
            <param name="dataset"> The stacked bar graph represents the values in this group data set. </param>
            <param name="rbarwidth"> The width of the stacked bars in units of the independent axis. </param>
            <param name="rbarbase"> The stacked bars start at the value rbarbase, and extend to the  group bar 
            values represented by the data set. </param>
            <param name="attribs"> An array of ChartAttribute objects, size datasets.nNumGroups, that  specify 
            the attributes (out1line color and fill color) for each group of a stacked bar graph. </param>
            <param name="nbarjust"> The stacked bars are justified with respect to the x-values in the  dataset 
            using the rbarjust justification value (JUSTIFY_MIN, JUSTIFY_CENTER,  or JUSTIFY_MAX).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.CalcStackedBarRect(System.Double,System.Double,System.Double,System.Int32,com.quinncurtis.chart2dnet.Rectangle2D)">
            <summary>
             Calculates the Rectangle2D shape used to draw a single stacked bar. 
            </summary>
            <param name="x"> The position of the bar in units of the independent axis. </param>
            <param name="sumy"> The running sum of the current y-value for the bar in units of dependent axis. </param>
            <param name="yprev"> The previous value of the y-value running sum. </param>
            <param name="ngroup"> The group number of the bar. </param>
            <param name="rect"> Returns the shape of the bar as a Rectangle2D object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.DrawStackedBarPlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a stacked bar plot using the current stacked bar plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The stacked bar plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the group plot object  is drawn in 
              the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedBarPlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point intersects one of the stacked bars. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.StackedLinePlot">
            <summary>
              The StackedLinePlot class extends the GroupPlot class and displays data in stacked line format. 
              In a stacked line plot each group is  stacked on top of one another, each group line a cumulative 
              sum of the groups  before it.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.#ctor">
            <summary>
              The default StackedLinePlot constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.ErrorCheck(System.Int32)">
            <summary>
              Checks the StackedLinePlot object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.InitDefaults">
            <summary>
              Initializes default values for the StackedLinePlot object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.Copy(com.quinncurtis.chart2dnet.StackedLinePlot)">
            <summary>
              Copies the source StackedLinePlot object. 
            </summary>
            <param name="source"> The source StackedLinePlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.Clone">
            <summary>
             Returns an object that is a clone of this StackedLinePlot object. 
            </summary>
            <returns> Returns a clone of this StackedLinePlot object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new StackedLinePlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new StackedLinePlot object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.GroupDataset,com.quinncurtis.chart2dnet.ChartAttribute[])">
            <summary>
              This constructor creates a new StackedLinePlot object that will reside in  the specified coordinate system. 
            </summary>
            <param name="transform"> The coordinate system for the new StackedLinePlot object. </param>
            <param name="dataset"> The stacked line plot represents the values in this group data set. </param>
            <param name="attribs"> An array of ChartAttribute objects, size datasets.nNumGroups  specify the 
            attributes (line color and line style) for each group of the stacked line graph. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.InitStackedLinePlot(com.quinncurtis.chart2dnet.GroupDataset,com.quinncurtis.chart2dnet.ChartAttribute[])">
            <summary>
              Sets the properties of a stacked line plot.  A stacked line plot stacks the values of a group on 
              top of one another. 
            </summary>
            <param name="dataset"> The stacked line plot represents the values in this group data set. </param>
            <param name="attribs"> An array of ChartAttribute objects, size datasets.nNumGroups  specify the 
            attributes (line color and line style) for each group of the stacked line graph.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.CalcStackedLine(System.Double,System.Double,System.Int32,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             Calculates the xy coordinates used to draw the next stacked line segment. 
            </summary>
            <param name="x"> The position of the bar in units of the independent axis. </param>
            <param name="sumy"> The running sum of the current y-value for the bar in units of dependent axis. </param>
            <param name="ngroup"> The group number of the bar. </param>
            <param name="rpoint"> Returns the xy coordinates of next stacked line plot point.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.DrawStackedLinePlot(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              Draws a stacked line plot using the current stacked line plot properties. 
            </summary>
            <param name="g2"> The current graphics context. </param>
            <param name="path"> The stacked line plot is drawn into the current general path.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the group plot object  is drawn in 
              the path. Once the path is complete  the it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StackedLinePlot.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              Returns true if the test point is near one of the data points. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.StandardLegend">
            <summary>
              The StandardLegend class manages a collection LegendItem objects that represent  legend items.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.StandardLegend.legendItems">
            <summary>
             Holds a list of LegendItem objects, each object represents a legend symbol and  descriptive text.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.StandardLegend.layoutMode">
            <summary>
             The legend items are laid out in a row major orientation, or a column  major orientation. 
             Use one of the orientation constants: HORIZ_DIR (row major) or  VERT_DIR (column major).
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.StandardLegend.symbolOffsetFactor">
            <summary>
             Offsets a legend symbol from text baseline, centering it vertically with text.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.#ctor">
            <summary>
              The default Legend constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.ErrorCheck(System.Int32)">
            <summary>
              Checks the legend object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.InitDefaults">
            <summary>
              Initializes default values for the legend.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.SetChartObjScale(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
             Sets the reference to the PhysicalCoordinates object that the chart object is placed in.  
             It overrides the GraphObj version because this is a compound object that  needs to update the 
             ChartText and LegendItem objects within. 
            </summary>
            <param name="transform"> A reference to the PhysicalCoordinates object that the chart object is placed in</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.Copy(com.quinncurtis.chart2dnet.StandardLegend)">
            <summary>
              Copies the source legend object. 
            </summary>
            <param name="source"> The source legend object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.Clone">
            <summary>
             Returns an object that is a clone of this StandardLegend object. 
            </summary>
            <returns> Returns a clone of this StandardLegend object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.#ctor(System.Double,System.Double,System.Double,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,System.Int32)">
            <summary>
              A StandardLegend constructor that initializes the position,  size, color attributes, and layout 
              mode of the legend. 
            </summary>
            <param name="rx"> The x-position, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="ry"> The y-position, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="rwidth"> The width, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="rheight"> The height, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="attrib"> Specifies the out1line color, out1line line style, and fill color for  the 
            legend rectangle. </param>
            <param name="nlayout1mode"> Specifies if the legend has a horizontal, or vertical layout. Use  one 
            of the orientation constants: HORIZ_DIR (row major) or VERT_DIR (column major).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.#ctor(System.Double,System.Double,com.quinncurtis.chart2dnet.ChartAttribute,System.Int32)">
            <summary>
              an StandardLegend constructor that initializes the position,  size, color attributes, and layout mode of the legend. 
            </summary>
            <param name="rx"> The x-position, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="ry"> The y-position, in chart normalized coordinates, of the legend rectangle. </param>
            <param name="attrib"> Specifies the out1line color, out1line line style, and fill color for  
            the legend rectangle. </param>
            <param name="nlayout1mode"> Specifies if the legend has a horizontal, or vertical layout. Use  
            one of the orientation constants: HORIZ_DIR (row major) or VERT_DIR (column major).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.AddLegendItem(System.String,System.Int32,com.quinncurtis.chart2dnet.ChartAttribute,System.Drawing.Font)">
            <summary>
              Add a legend item to the current legend, specifying the legend item text,  symbol, attributes and font. 
            </summary>
            <param name="stext"> Specifies the text string for the legend item. </param>
            <param name="nsymbol"> Specifies the symbol for the legend item. Use one of the  chart symbol 
            constants: NOSYMBOL, SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR,  LINE, HBAR , VBAR, BAR3D, or CIRCLE. </param>
            <param name="attrib"> Specifies the ChartAttribute object to get the color and fill attributes 
            of the legend item. </param>
            <param name="thefont"> Specifies the text font for the legend item. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.AddLegendItem(System.String,System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.ChartAttribute,System.Drawing.Font)">
            <summary>
              Add a legend item to the current legend, specifying the legend item text,  symbol, attributes and font. 
            </summary>
            <param name="stext"> Specifies the text string for the legend item. </param>
            <param name="symbolshape"> Specifies a user defined shape to use as the legend item symbol. </param>
            <param name="attrib"> Specifies the ChartAttribute object to get the color and fill attributes of 
            the legend item. </param>
            <param name="thefont"> Specifies the text font for the legend item. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.AddLegendItem(com.quinncurtis.chart2dnet.LegendItem)">
            <summary>
              Add a legend item to the current legend, using another legend item as the source. 
            </summary>
            <param name="legenditem"> Specifies the legend item that is the source. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.AddLegendItem(System.String,System.Int32,com.quinncurtis.chart2dnet.GraphObj,System.Drawing.Font)">
            <summary>
              Add a legend item to the current legend, specifying the legend item text,  symbol, the associated GraphObj 
              object, and font. 
            </summary>
            <param name="stext"> Specifies the text string for the legend item. </param>
            <param name="nsymbol"> Specifies the symbol for the legend item. Use one of the  chart symbol constants: 
            NOSYMBOL, SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR,  LINE, HBAR , VBAR, BAR3D, or CIRCLE. </param>
            <param name="chartobj"> The color and fill attributes for the legend item are copied from  the attributes 
            of this chart object. </param>
            <param name="thefont"> Specifies the text font for the legend item. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.AddLegendItem(System.String,com.quinncurtis.chart2dnet.GraphObj,System.Drawing.Font)">
            <summary>
              Add a legend item to the current legend, specifying the legend item text,  symbol, the associated 
              GraphObj object, and font. 
            </summary>
            <param name="stext"> Specifies the text string for the legend item. </param>
            <param name="chartobj"> The color and fill attributes for the legend item are copied from  the attributes 
            of this chart object. </param>
            <param name="thefont"> Specifies the text font for the legend item. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.AddLegendItem(System.String,System.Drawing.Drawing2D.GraphicsPath,com.quinncurtis.chart2dnet.GraphObj,System.Drawing.Font)">
            <summary>
              Add a legend item to the current legend, specifying the legend item text,  symbol, attributes and font. 
            </summary>
            <param name="stext"> Specifies the text string for the legend item. </param>
            <param name="symbolshape"> Specifies a user defined shape to use as the legend item symbol. </param>
            <param name="chartobj"> The color and fill attributes for the legend item are copied from  
            the attributes of this chart object. </param>
            <param name="thefont"> Specifies the text font for the legend item. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.AddLegendItem(System.String,System.Int32,com.quinncurtis.chart2dnet.ChartPlot,System.Int32,System.Drawing.Font)">
            <summary>
              Add a legend item to the current legend, specifying the legend item text,  symbol, the associated 
              PlotObj object, the group number of the attributes  to copy in the PlotObject, and font. 
            </summary>
            <param name="stext"> Specifies the text string for the legend item. </param>
            <param name="nsymbol"> Specifies the symbol for the legend item. Use one of the  chart symbol constants: 
            NOSYMBOL, SQUARE, TRIANGLE, DIAMOND, CROSS, PLUS, STAR,  LINE, HBAR , VBAR, BAR3D, or CIRCLE. </param>
            <param name="chartobj"> The color and fill attributes for the legend item are copied from  the attributes 
            of this Plot object. </param>
            <param name="ngroup"> The group number of the attributes to copy in the associated Plot object. </param>
            <param name="thefont"> Specifies the text font for the legend item. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.AddLegendItem(System.String,com.quinncurtis.chart2dnet.ChartPlot,System.Int32,System.Drawing.Font)">
            <summary>
              Add a legend item to the current legend, specifying the legend item text,  symbol, the associated 
              PlotObj object, the group number of the attributes  to copy in the PlotObject, and font. 
            </summary>
            <param name="stext"> Specifies the text string for the legend item. </param>
            <param name="chartobj"> The color and fill attributes for the legend item are copied from  the 
            attributes of this Plot object. </param>
            <param name="ngroup"> The group number of the attributes to copy in the associated Plot object. </param>
            <param name="thefont"> Specifies the text font for the legend item. </param>
            <returns> Returns the current number of legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.SetLegendItemUniformTextColor(System.Drawing.Color)">
            <summary>
             Sets a uniform color for legend item text. If null the text assumes  the color of the associated 
             legend item symbol.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.UpdateLegendItemUniformTextColor">
            <summary>
             Updates the color ChartText objects for all legend items with the  new legendItemUniformTextColor
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.DrawLegendRect(System.Drawing.Graphics)">
            <summary>
              Draws the legend rectangle for the current legend object. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.GetLongestStringX(System.Drawing.Graphics)">
            <summary>
              Returns the length, in chart normalized coordinates, of the longest string  in the list of legend items. 
              This is used to align and evenly space the  legend items in the legend rectangle 
            </summary>
            <param name="g2"> The graphics context. </param>
            <returns> Returns the length, in chart normalized coordinates, of the longest string  in the list of legend 
            items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.GetLongestStringY(System.Drawing.Graphics)">
            <summary>
              Returns the height, in chart normalized coordinates, of the tallest string  in the list of legend items. 
              This is used to align and evenly space the  legend items in the legend rectangle 
            </summary>
            <param name="g2"> The graphics context. </param>
            <returns> Returns the height, in chart normalized coordinates, of the tallest string  in the list of legend 
            items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.GetItemSumStringY(System.Drawing.Graphics)">
            <summary>
              Returns the height, in chart normalized coordinates, of the sum of all strings string  in the list of 
              legend items. This is used to align and evenly space the  legend items in the legend rectangle 
            </summary>
            <param name="g2"> The graphics context. </param>
            <returns> Returns the height, in chart normalized coordinates, of the tallest string  in the list of 
            legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.GetHeaderSumStringY(System.Drawing.Graphics)">
            <summary>
              Returns the height, in chart normalized coordinates, of the sum of all strings string  in headers and 
              footers. This is used to align and evenly space the  legend items in the legend rectangle 
            </summary>
            <param name="g2"> The graphics context. </param>
            <returns> Returns the height, in chart normalized coordinates, of the header items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.GetSumStringY(System.Drawing.Graphics)">
            <summary>
              Returns the height, in chart normalized coordinates, of the sum of all strings string  in the list of 
              legend items. This is used to align and evenly space the  legend items in the legend rectangle 
            </summary>
            <param name="g2"> The graphics context. </param>
            <returns> Returns the height, in chart normalized coordinates, of the tallest string  in the list of 
            legend items.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.DrawVerticalLegend(System.Drawing.Graphics)">
            <summary>
              Draws a legend that has the layoutMode equal to VERT_DIR. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.DrawHorizontalLegend(System.Drawing.Graphics)">
            <summary>
              Draws a legend that has the layoutMode equal to HORIZ_DIR. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. The legend rectangle is drawn first, then  the legend headers. 
              The legend items are drawn next. Last, the legend  footer is drawn. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.GetLegendItem(System.Int32)">
            <summary>
             Returns the LegendItem object at the specified index. 
            </summary>
            <param name="itemnum"> The index of the LegendItem in the legendItems list. </param>
            <returns> Returns the LegendItem object at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.SetLegendItem(com.quinncurtis.chart2dnet.LegendItem,System.Int32)">
            <summary>
             Set an LegendItem object in the legendItems list. 
            </summary>
            <param name="legenditem"> The LegendItem that will override an existing  LegendItem in the legendItems list. </param>
            <param name="itemnum"> The index in the legendItems list where the LegendItem  will be placed.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.GetLayoutMode">
            <summary>
             Returns the legend item layout mode. The legend items are laid out in a row major  orientation, or a 
             column major orientation. 
            </summary>
            <returns> Returns the legend layout mode. Use one of the orientation constants:  HORIZ_DIR (row major) or 
            VERT_DIR (column major).</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.GetNumLegendItems">
            <summary>
             Returns the number of legend items in the current legend. 
            </summary>
            <returns> Returns the number of legend items in the current legend.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.SetLayoutMode(System.Int32)">
            <summary>
             Sets the legend item layout mode. The legend items are laid out in a row major  orientation, or a column 
             major orientation. 
            </summary>
            <param name="layout1mode"> Sets the legend layout mode. Use one of the orientation constants:  HORIZ_DIR 
            (row major) or VERT_DIR (column major).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StandardLegend.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance 
              of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.StandardLegend.LayoutMode">
            <summary>
             Set/Get the legend item layout mode. The legend items are laid out in a row major  orientation, or 
             a column major orientation. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.StandardLegend.Item(System.Int32)">
            <summary>
              This accessor is the indexer for the class and get/sets the value of an individual xy datapoint, 
              represented using a Point3D object, in the dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.StandardLegend.NumberLegendItems">
            <summary>
             Get the number of legend items in the LegendItem list. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.StringArray">
            <summary>
            Summary description for StringArray. It is a improved version of the standard Array
            type because it allows automatic and dynamic resizing of the array. The array has a Length 
            property that specifies the number of elements in the array, and a MaxCapacity property that 
            specifies the size of the internal Array buffer. The internal buffer can be sized much larger than
            the Length property, allowing the array to grow in length without forcing a time consuming
            reallocation and the subsequent copying of all of the data values. Not really important if you are dealing 
            with 10 or 20 element arrays, but very important if you have 1,000,000 element arrays.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.StringArray.minimumMaxCapacity">
            <summary>
             The minimum allowable size of the dataBuffer.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.StringArray.dataBuffer">
            <summary>
             The data buffer holding the array of data values.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.StringArray.maxCapacity">
            <summary>
             The current allocated size of the dataBuffer. It is greater than or equal to the length property.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.StringArray.length">
            <summary>
             The current number of used elements in the dataBuffer. It is less than or equal to maxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.CopyArray(com.quinncurtis.chart2dnet.StringArray,System.Int32,com.quinncurtis.chart2dnet.StringArray,System.Int32,System.Int32)">
            <summary>
              Static routine copies all or part of one array to another. 
            </summary>
            <param name="source"> The source array.</param>
            <param name="sourceoffset"> The index to start copying from in the source array.</param>
            <param name="dest"> The destination array.</param>
            <param name="destoffset"> The index to start copying to in the destination array.</param>
            <param name="count"> The number of array elements to copy.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.#ctor">
            <summary>
              Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.#ctor(System.Int32)">
            <summary>
              Constructor creates an array of Length n, initialized to zero. 
            </summary>
            <param name="n"> The array is sized to n elements.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.#ctor(System.String[],System.Int32)">
            <summary>
              Constructor initializes the array using the specified data values. 
              The number of elements of the array is set to the Length of the initializing array,
              while the internal buffer used to hold the data is sized to maxcap.
            </summary>
            <param name="x"> The initializing data values.</param>
            <param name="maxcap"> The internal buffer holding the data values is sized to the value of maxcap.
                If the number of data values exceeds the maxcap limit, the size of maxcap is automatically doubled.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.#ctor(System.String[])">
            <summary>
              Constructor initializes the array using the specified data values. 
              The number of elements of the array is set to the Length of the source array,
              and the internal buffer used to hold the data is set to the same size.
            </summary>
            <param name="x"> The initializing data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.Copy(com.quinncurtis.chart2dnet.StringArray)">
            <summary>
              Copies the source array to the current instance. 
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.NDCopy(com.quinncurtis.chart2dnet.StringArray)">
            <summary>
              Non-Destructive copy does not reallocate buffers, limits copy to the number of elements in the smaller of 
              two arrays, the source or the current instance.
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the current instance to the destination array. 
            </summary>
            <param name="dest"> The destination array object.</param>
            <param name="index"> The index to start copying to in the destination array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.Clone">
            <summary>
             Returns an object that is a clone of this array object. 
            </summary>
            <returns> Returns a clone of this array object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.ResizeCapacity(System.Int32)">
            <summary>
              This method reallocates the internal data buffer to the new capacity value.
              The data is preserved. If the new buffer size is less than the number of data values
              in the old array, the array is truncated. If the new buffer size is greater than the number
              of data values, the Length property remains the same, but the MaxCapacity property is changed
              and the internal buffer reallocated to the new maxcapcity size.
            </summary>
            <param name="newcapacity"> The internal buffer holding the data values is sized to the new value of new capacity.
             The Length property remains unchanged if the new buffer size is larger than the old buffer size, only the 
             buffer size is changed, not the current number of elements in the array.   </param>param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.Reset">
            <summary>
             Resets the Length property to 0, the MaxCapacity property to 16 and reallocates
             the internal buffer to MaxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.Clear">
            <summary>
             Resets (same as Clear) the Length property to 0, the MaxCapacity property to 16 and reallocates
             the internal buffer to MaxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.ShiftLeft(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the left. If you have a 10 element array and
              shift the array 2 elements to the left, element 7 ends up with the value originally in element
              9, element 6 ends up with the value originally in element 8, etc.
            </summary>
            <param name="shiftcount"> The elements are shifted to left by shiftcount elements.</param>
            <param name="fillzero"> Set to true if elements to the right of the final shift point are to be set to zero. 
            In the example above this would apply to elements 8 and 9 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.ShiftRight(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the right. If you have a 10 element array and
              shift the array 2 elements to the right, element 2 ends up with the value originally in element
              0, element 3 ends up with the value originally in element 1, etc.
            </summary>
            <param name="shiftcount"> The elements are shifted to right by shiftcount elements.</param>
            <param name="fillzero"> Set to true if elements to the left of the final shift point are to be set to zero. 
            In the example above this would apply to elements 0 and 1 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.ShiftLeftThenResize(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the left. If you have a 10 element array and
              shift the array 2 elements to the left, element 7 ends up with the value originally in element
              9, element 6 ends up with the value originally in element 8, etc. The array is resized to a size
              equal to the original array size minus the shift count (Length - shiftcount).
            </summary>
            <param name="shiftcount"> The elements are shifted to left by shiftcount elements.</param>
            <param name="trim"> Set to true if the MaxCapacity property is to be set equal to Length property,
             sizing the internal data buffers to the exact array size.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.Insert(System.Int32,System.String)">
            <summary>
             Inserts an element in the array at the specified index, increasing the length of the array by one. If
             the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled and the internal buffer
             resized accordingly.
            </summary>
            <param name="index"> The array element where the new value is inserted.</param>
            <param name="r"> The new value to insert.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.RemoveAt(System.Int32)">
            <summary>
             Removes an element at the specified index, decreasing the length of the array by one. The size
             of the internal buffer remains unchanged.
            </summary>
            <param name="index"> The array element that is deleted.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.Delete(System.Int32)">
            <summary>
             Removes an element at the specified index, decreasing the length of the array by one. The size
             of the internal buffer remains unchanged.
            </summary>
            <param name="index"> The array element that is deleted.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.SetLength(System.Int32)">
            <summary>
             Resizes the array to the specified length. The MaxCapacity property is iteratively doubled until
             it exceeds the new length, then internal buffer are resized to the new MaxCapacity value.
            </summary>
            <param name="newlength"> The array is resized to the new length.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.TrimToSize">
            <summary>
             The MaxCapacity property is set equal to the Length property of the array
             and the internal buffer are resized to the new MaxCapacity value. This leaves no "slack"
             in the internal buffer that allows the array length to grow without forcing a reallocation
             and copy of all data elements should the length of the array be increased.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.Resize(System.Int32)">
            <summary>
             The length of the arrays is set to the specified value. If the new length is greater than the current 
             Length property value, but less or equal to the MaxCapacity property value, the Length property is increased to
             reflect the new value. If the new length is greater than MaxCapacity, the MaxCapacity value is
             doubled until it is greater than the new length, and the internal buffer increased accordingly.
             New, uninitialized array elements are set to zero.
            </summary>
            <param name="newlength"> The array is resized to the new length.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.Add(System.String)">
            <summary>
             Adds a new element at the end of the array, increasing the length of the array by one. If
             the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled and the internal buffer
             resized accordingly.
            </summary>
            <param name="r"> The new value to add at the end of the array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.AddRange(System.String[])">
            <summary>
             Adds a array of new values at the end of the array, increasing the length of the array by the length of the 
             source array. If the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled 
             and the internal buffer resized accordingly.
            </summary>
            <param name="x"> An array of new values that are added to the end of the array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.SetElements(System.String[])">
            <summary>
             Initializes the elements of the array, starting at element 0. The size of the array is set
             equal to the length of the source array. If the source array is
             larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.SetElements(System.String[],System.Int32)">
            <summary>
             Initializes the elements of the array, starting at element 0 and continuing for count elements.
              The size of the array is set equal to the length of the source array, or the count, whichever is smaller. 
              If the new length larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array, or the count value, whichever is smaller.</param>
            <param name="count"> Specifies the number of elements to initialize.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.SetElements(com.quinncurtis.chart2dnet.StringArray,System.Int32)">
            <summary>
             Initializes the elements of the array, starting at element 0 and continuing for count elements.
              The size of the array is set equal to the length of the source array, or the count, whichever is smaller. 
              If the new length larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array, or the count value, whichever is smaller.</param>
            <param name="count"> Specifies the number of elements to initialize.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.SetElements(com.quinncurtis.chart2dnet.StringArray)">
            <summary>
             Initializes the elements of the array, starting at element 0. The size of the array is set
             equal to the length of the source array. If the source array is
             larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.SetElement(System.Int32,System.String)">
            <summary>
             Set the value of a single element in the array.
            </summary>
            <param name="index"> The index to set in the array.</param>
            <param name="r"> The array element at index is set to the value r.</param>///
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.GetElement(System.Int32)">
            <summary>
             Get the value of a single element in the array.
            </summary>
            <param name="index"> The array index.</param>
             <returns> Returns the value of the array at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.GetDataBuffer">
            <summary>
             Returns a reference to the Array object that represents internal data buffer. It may be sized to the
             maxCapacity value, instead of the number of items in the buffer. This reference will remain valid only as long as
             the array is not forced to resize, forcing a reallocation of the internal buffer.
            </summary>
             <returns> Returns a reference to the Array object that represents the internal data buffer.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringArray.GetElements">
            <summary>
             Returns a copy of the data values in the array sized to the number of elements.
            </summary>
             <returns> Returns a copy of the data values in the array sized to the number of elements.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.StringArray.Length">
            <summary>
              This method returns the value of the length field which is number of  data points in a simple dataset, 
              or the number of x-values in a group dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.StringArray.MaxCapacity">
            <summary>
              This method returns the value of the maxCapacity field. The MaxCapacity property represents the allocated size
              of the internal Array object used as the data buffer for the array. It is always greater than or equal to the
              Length property.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.StringArray.DataBuffer">
            <summary>
             Returns a reference to the Array object that represents internal data buffer. This reference will remain 
             valid only as long as the array is not forced to resize, forcing a reallocation of the internal buffer.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.StringArray.Item(System.Int32)">
            <summary>
              This method get/sets the value of an individual element in the array. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.StringAxisLabels">
            <summary>
              The LinearAxisLabels class manages and displays the axis labels for  linear and log axes.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.StringAxisLabels.numTickStrings">
            <summary>
             Specifies the number of string labels in the userTickStrings array.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.StringAxisLabels.userTickStrings">
            <summary>
             This field is an array, size numTickStrings, of strings that can be used to  label the axis tick marks, 
             rather than using one of the standard numeric formats.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.#ctor">
            <summary>
             The default StringAxisLabels constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.InitDefaults">
            <summary>
              Initializes default values for StringAxisLabels labels.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.ErrorCheck(System.Int32)">
            <summary>
              Checks the current StringAxisLabels object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.InitAxisLabels(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              This method initializes the base axis field, baseAxis, and initializes  other default values. 
            </summary>
            <param name="baseaxis"> The StringAxisLabels object uses the tick marks  defined for this axis to 
            locate the axis labels on the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.Copy(com.quinncurtis.chart2dnet.StringAxisLabels)">
            <summary>
              Copies the source StringAxisLabels object. 
            </summary>
            <param name="source"> The source StringAxisLabels object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.Clone">
            <summary>
             Returns an object that is a clone of this StringAxisLabels object. 
            </summary>
            <returns> Returns a clone of this StringAxisLabels object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.#ctor(com.quinncurtis.chart2dnet.Axis)">
            <summary>
              This constructor creates a new StringAxisLabels object based on the specified axis. 
            </summary>
            <param name="baseaxis"> The StringAxisLabels object uses the tick marks  defined for this axis to 
            locate the axis labels on the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.SetAxisLabels(System.Drawing.Font,System.Double,System.Int32,System.Int32,System.Drawing.Color,System.String[],System.Int32)">
            <summary>
              Initializes the attributes of an StringAxisLabels object. 
            </summary>
            <param name="font"> The font object used to display the axis label text. </param>
            <param name="rotation"> The rotation, in degrees, of label text in the normal viewing plane. </param>
            <param name="labdir"> The justification of the axis label (AXIS_MIN or AXIS_MAX) with  respect to the tick 
            mark endpoint. </param>
            <param name="labelends"> Specifies whether there should be labels for the axis minimum (LABEL_MIN), 
            maximum (LABEL_MAX) or tick mark  starting point (LABEL_ORIGIN). The value of these constants can be OR'd together. The value  of LABEL_MIN | LABEL_MAX | LABEL_ORIGIN is LABEL_ALL </param>
            <param name="labcolor"> The color of the label text. </param>
            <param name="tickstring1s"> An array of strings, one for each major tick mark  that you want labeled. </param>
            <param name="numtickstring1s"> The number of strings in the tickstring1s array. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.CalcAutoAxisLabels">
            <summary>
             This method automatically calculates axis label parameters, assuming  that the labels are black in color.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.SetAxisLabelsStrings(System.String[],System.Int32)">
            <summary>
             Sets the string array used to hold user defined axis label strings.  Setting the string array does not 
             automatically turn on the use of  string labels. Use enableAxisLabelsStrings to enable axis strings. 
            </summary>
            <param name="tstring1s"> An array, size n, of strings, one for each major tick mark  that you want labeled. </param>
            <param name="n"> The number of strings in the tstring1s array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.GetAxisLabelsStrings">
            <summary>
             Returns the string array, size numTickStrings, holding the axis label strings. 
            </summary>
            <returns> An array, size numTickStrings, of strings holding the axis label strings.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.GetNumAxisLabelsStrings">
            <summary>
            	  Returns the number of axis label strings stored in the userTickStrings///
            </summary>
            <returns> Returns the number of axis label strings stored in the userTickStrings
             array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.GetCompatibleLabel">
            <summary>
             This method returns an ChartLabel object that is can be used to label  the tick marks of this 
             StringAxisLabels object. 
            </summary>
            <returns> Returns an ChartLabel object that is can be used to label  the tick marks of this 
            StringAxisLabels object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.GetAxisLabelsFormat(com.quinncurtis.chart2dnet.TickMark)">
            <summary>
             Returns the label format for the axis labels. The axisLabelsFormat  property is not used by the 
             StringAxisLabels class. 
            </summary>
            <param name="tickmark"> The tick mark that the text label is place at. </param>
            <returns> Returns the numeric format for the axis labels.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.FormatAxisLabel(com.quinncurtis.chart2dnet.StringLabel,System.Int32)">
            <summary>
              This method formats the text object used to display a string label at specific tick mark. 
            </summary>
            <param name="textobj"> The text object used as an axis label. </param>
            <param name="strcntr"> The index into the string array to get the string label.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.CalcAxisLabels(System.Drawing.Graphics)">
            <summary>
             This method cycles through all of the tick marks, creating formatted  strings for each. an 
             ChartText object is used to output the string at  the appropriate tick mark position. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.SetAxisLabelsDecimalPos(System.Int32)">
            <summary>
             Sets the number of digits to the right of the decimal point for numeric axis labels.  The 
             axisLabelsDecimalPos is not used in the StringAxisLabels class. 
            </summary>
            <param name="decimalpos"> Sets the number of digits to the right of the decimal point for numeric axis labels.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringAxisLabels.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.StringLabel">
            <summary>
             The StringLabel class is used to format strings  and position them in a chart.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringLabel.#ctor">
            <summary>
             The default StringLabel constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringLabel.ErrorCheck(System.Int32)">
            <summary>
              Checks the current StringLabel object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringLabel.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new StringLabel object using the specified scale. 
            </summary>
            <param name="transform"> The text object is placed in the coordinate system defined by transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringLabel.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
              This method initializes an StringLabel using the specified scale,  font, string, position, 
              justification and rotation. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object. </param>
            <param name="x"> Specifies the x-value of the text position </param>
            <param name="y"> Specifies the y-value of the text position </param>
            <param name="npostype"> Specifies the if the position of the text is specified in  physical 
            coordinates, normalized coordinates or window device coordinates.  Use one of the position 
            constants: DEV_POS, PHYS_POS, NORM_GRAPH_POS, NORM_PLOT_POS. </param>
            <param name="xjust"> Specifies the horizontal justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN, JUSTIFY_CENTER or JUSTIFY_MAX. </param>
            <param name="yjust"> Specifies the vertical justification of the text. Use one of the text  
            justification constants: JUSTIFY_MIN, JUSTIFY_CENTER or JUSTIFY_MAX.  </param>
            <param name="rotation"> The rotation (-360 to 360 degrees) of the text in the normal viewing plane.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringLabel.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,System.String,System.Double,System.Double,System.Int32)">
            <summary>
              This method initializes an StringLabel using the specified scale,  font, string position and position type. 
            </summary>
            <param name="transform"> Places the text in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object. </param>
            <param name="x"> Specifies the x-value of the text position </param>
            <param name="y"> Specifies the y-value of the text position </param>
            <param name="npostype"> Specifies the if the position of the text is specified in  physical 
            coordinates, normalized coordinates or window device coordinates.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringLabel.#ctor(System.Drawing.Font,System.String)">
            <summary>
              This method initializes an StringLabel using the specified  font and string. Since no coordinate 
              system is specified it cannot be used  for display. 
            </summary>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="tstring"> A reference to a string object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringLabel.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringLabel.Copy(com.quinncurtis.chart2dnet.StringLabel)">
            <summary>
              Copies the source StringLabel object. 
            </summary>
            <param name="source"> The source StringLabel object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringLabel.Clone">
            <summary>
             Returns an object that is a clone of this StringLabel object. 
            </summary>
            <returns> Returns a clone of this StringLabel object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.StringLabel.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. It creates a rotated font transform, calculates  the starting 
              position of the justified text string, sets foreground and  background colors, then draws the string 
              to the specified graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.SurfaceFunction">
            <summary>
             The abstract base class for creating 3D functions where z = fn(x,y).  The SurfaceFunction is used by 
             classes that need to  reference a user defined function.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SurfaceFunction.#ctor">
            <summary>
             The default SurfaceFunction constructor
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.SurfaceFunction.CalcZValue(System.Double,System.Double)">
            <summary>
             Calculates the z-value of a 3D function given x and y. 
            </summary>
            <param name="x"> The x-value. </param>
            <param name="y"> The y-value. </param>
            <returns> Returns z = fn(x,y);</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.TickMark">
            <summary>
             The TickMark class manages the position attributes of  an axis tick mark.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TickMark.tickStart">
            <summary>
             The starting position, in window device coordinates, of the axis tick mark.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TickMark.tickStop">
            <summary>
             The ending position, in window device coordinates, of the axis tick mark
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TickMark.tickLocation">
            <summary>
             The numeric value in physical coordinates associated with the tick mark
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TickMark.tickDate">
            <summary>
             The date, if any, associated with the axis tick mark.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TickMark.tickType">
            <summary>
             The axis tick mark type, either TICK_MINOR or TICK_MAJOR.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TickMark.tickLabelFormat">
            <summary>
             The default format for the tick label
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TickMark.labelFlag">
            <summary>
             True designates that this tick marks should have a label.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.ErrorCheck(System.Int32)">
            <summary>
              Checks the current tick mark object for common errors. 
            </summary>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.#ctor">
            <summary>
             The default TickMark constructor
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.#ctor(System.Double,System.Int32)">
            <summary>
             This constructor creates a new TickMark object using the specified  type and location. 
            </summary>
            <param name="rticklocation"> The numeric value associated with the tick mark. </param>
            <param name="nticktype"> The axis tick mark type, either TICK_MINOR or TICK_MAJOR.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.#ctor(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Double,System.Int32)">
            <summary>
             This constructor creates a new TickMark object using the specified  type and location. 
            </summary>
            <param name="pstart"> The starting position, in window device coordinates, of the axis tick mark. </param>
            <param name="pstop"> The ending position, in window device coordinates, of the axis tick mark. </param>
            <param name="rticklocation"> The numeric value associated with the tick mark. </param>
            <param name="nticktype"> The axis tick mark type, either TICK_MINOR or TICK_MAJOR.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.#ctor(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Double,System.Int32,System.Boolean)">
            <summary>
             This constructor creates a new TickMark object using the specified  type, location, and label flag. 
            </summary>
            <param name="pstart"> The starting position, in window device coordinates, of the axis tick mark. </param>
            <param name="pstop"> The ending position, in window device coordinates, of the axis tick mark. </param>
            <param name="rticklocation"> The numeric value associated with the tick mark. </param>
            <param name="nticktype"> The axis tick mark type, either TICK_MINOR or TICK_MAJOR. </param>
            <param name="blabelf"> True designates that the tick mark should have a label.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.#ctor(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32)">
            <summary>
             This constructor creates a new TickMark object for a time/date axis using the specified  type and location. 
            </summary>
            <param name="pstart"> The starting position, in window device coordinates, of the axis tick mark. </param>
            <param name="pstop"> The ending position, in window device coordinates, of the axis tick mark. </param>
            <param name="rticklocation"> The numeric value associated with the tick mark. </param>
            <param name="dtickdate"> The ChartCalendar date associated with the tick mark. </param>
            <param name="nticktype"> The axis tick mark type, either TICK_MINOR or TICK_MAJOR.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.#ctor(System.Int32)">
            <summary>
             This constructor creates a new TickMark object using the specified  type. 
            </summary>
            <param name="nticktype"> The axis tick mark type, either TICK_MINOR or TICK_MAJOR.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.Copy(com.quinncurtis.chart2dnet.TickMark)">
            <summary>
              Copies the source tick mark object. 
            </summary>
            <param name="source"> The source tick mark object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.Clone">
            <summary>
             Returns an object that is a clone of this TickMark object. 
            </summary>
            <returns> Returns a clone of this TickMark object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickMark(System.Double,System.Int32)">
            <summary>
             Sets tick mark type and location. 
            </summary>
            <param name="rticklocation"> The numeric value associated with the tick mark. </param>
            <param name="nticktype"> The axis tick mark type, either TICK_MINOR or TICK_MAJOR.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickMark(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32)">
            <summary>
             Sets tick mark parameters for a time/date axis. 
            </summary>
            <param name="pstart"> The starting position, in window device coordinates, of the axis tick mark. </param>
            <param name="pstop"> The ending position, in window device coordinates, of the axis tick mark. </param>
            <param name="rticklocation"> The numeric value associated with the tick mark. </param>
            <param name="dtickdate"> The ChartCalendar date associated with the tick mark. </param>
            <param name="nticktype"> The axis tick mark type, either TICK_MINOR or TICK_MAJOR.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickLocation(System.Double)">
            <summary>
             Sets the location value for a tick mark. 
            </summary>
            <param name="rticklocation"> The numeric value associated with the tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickLocation(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D,System.Double,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets tick mark location parameters for a time/date axis. 
            </summary>
            <param name="pstart"> The starting position, in window device coordinates, of the axis tick mark. </param>
            <param name="pstop"> The ending position, in window device coordinates, of the axis tick mark. </param>
            <param name="rticklocation"> The numeric value associated with the tick mark. </param>
            <param name="dtickdate"> The ChartCalendar date associated with the tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickLocation(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             Sets starting and ending position values for a tick mark. 
            </summary>
            <param name="pstart"> The starting position, in window device coordinates, of the axis tick mark. </param>
            <param name="pstop"> The ending position, in window device coordinates, of the axis tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickType(System.Int32)">
            <summary>
             Sets the tick mark type. 
            </summary>
            <param name="nticktype"> The axis tick mark type, either TICK_MINOR or TICK_MAJOR.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickLabelFlag(System.Boolean)">
            <summary>
             Sets the tick mark label flag. 
            </summary>
            <param name="blabelf"> True designates that the tick mark should have a label.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.GetTickLabelFlag">
            <summary>
             This method returns the state of the tick mark label flag. 
            </summary>
            <returns> Returns the state of the tick mark label flag.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.GetTickLocation">
            <summary>
             This method returns the tick mark location. 
            </summary>
            <returns> Returns the stick mark location.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.GetTickStart">
            <summary>
             This method returns the starting position of the tick mark. 
            </summary>
            <returns> Returns the starting position of the tick mark.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.GetTickStop">
            <summary>
             This method returns the ending position of the tick mark. 
            </summary>
            <returns> Returns the ending position of the tick mark.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickStart(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             Sets the starting position of the tick mark. 
            </summary>
            <param name="pstart"> Sets the starting position of the tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickStop(com.quinncurtis.chart2dnet.Point2D)">
            <summary>
             Sets the ending position of the tick mark. 
            </summary>
            <param name="pstop"> Sets the ending position of the tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.GetTickType">
            <summary>
             This method returns the tick mark type. 
            </summary>
            <returns> Returns the axis tick mark type, either TICK_MINOR or TICK_MAJOR.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickDate(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the date associated with the tick mark location. 
            </summary>
            <param name="dtickdate"> Sets the date associated with the tick mark location.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.GetTickDate">
            <summary>
             This method returns the date associated with the tick mark location. 
            </summary>
            <returns> Returns the date associated with the tick mark location.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.GetTickLabelFormat">
            <summary>
             This method returns the tick label format of the tick mark. 
            </summary>
            <returns> Returns the tick label format of the tick mark.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.SetTickLabelFormat(System.Int32)">
            <summary>
             Sets the tick label format of the tick mark. 
            </summary>
            <param name="ticklabelformat"> Sets the ticklabelformat of the tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TickMark.IsDateTick">
            <summary>
             This method returns True if the tick mark is associated with a time/date axis. 
            </summary>
            <returns> Returns True if the tick mark is associated with a time/date axis.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TickMark.TickType">
            <summary>
             Sets the tick mark type. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TickMark.LabelFlag">
            <summary>
             Sets the tick mark label flag. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TickMark.TickLocation">
            <summary>
             This method returns the tick mark location. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TickMark.TickStart">
            <summary>
             This method returns the starting position of the tick mark. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TickMark.TickStop">
            <summary>
             This method returns the ending position of the tick mark. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TickMark.TickDate">
            <summary>
             Set/Get the date associated with the tick mark location. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TickMark.TickLabelFormat">
            <summary>
             Set/Get the tick label format of the tick mark. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.TimeArray">
            <summary>
            Summary description for TimeArray. It is a improved version of the standard Array
            type because it allows automatic and dynamic resizing of the array. The array has a Length 
            property that specifies the number of elements in the array, and a MaxCapacity property that 
            specifies the size of the internal Array buffer. The internal buffer can be sized much larger than
            the Length property, allowing the array to grow in length without forcing a time consuming
            reallocation and the subsequent copying of all of the data values. Not really important if you are dealing 
            with 10 or 20 element arrays, but very important if you have 1,000,000 element arrays.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeArray.minimumMaxCapacity">
            <summary>
             The minimum allowable size of the dataBuffer.
            </summary>	
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeArray.dataBuffer">
            <summary>
             The data buffer holding the array of data values.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeArray.maxCapacity">
            <summary>
             The current allocated size of the dataBuffer. It is greater than or equal to the length property.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeArray.length">
            <summary>
             The current number of used elements in the dataBuffer. It is less than or equal to maxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.CopyArray(com.quinncurtis.chart2dnet.TimeArray,System.Int32,com.quinncurtis.chart2dnet.TimeArray,System.Int32,System.Int32)">
            <summary>
              Static routine copies all or part of one array to another. 
            </summary>
            <param name="source"> The source array.</param>
            <param name="sourceoffset"> The index to start copying from in the source array.</param>
            <param name="dest"> The destination array.</param>
            <param name="destoffset"> The index to start copying to in the destination array.</param>
            <param name="count"> The number of array elements to copy.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.#ctor">
            <summary>
              Default constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.#ctor(System.Int32)">
            <summary>
              Constructor creates an array of Length n, initialized to zero. 
            </summary>
            <param name="n"> The array is sized to n elements.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.#ctor(com.quinncurtis.chart2dnet.ChartCalendar[],System.Int32)">
            <summary>
              Constructor initializes the array using the specified data values. 
              The number of elements of the array is set to the Length of the initializing array,
              while the internal buffer used to hold the data is sized to maxcap.
            </summary>
            <param name="x"> The initializing data values.</param>
            <param name="maxcap"> The internal buffer holding the data values is sized to the value of maxcap.
                If the number of data values exceeds the maxcap limit, the size of maxcap is automatically doubled.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.#ctor(com.quinncurtis.chart2dnet.ChartCalendar[])">
            <summary>
              Constructor initializes the array using the specified data values. 
              The number of elements of the array is set to the Length of the source array,
              and the internal buffer used to hold the data is set to the same size.
            </summary>
            <param name="x"> The initializing data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.Copy(com.quinncurtis.chart2dnet.TimeArray)">
            <summary>
              Copies the source array to the current instance. 
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.NDCopy(com.quinncurtis.chart2dnet.TimeArray)">
            <summary>
              Non-Destructive copy does not reallocate buffers, limits copy to the number of elements in the smaller of 
              two arrays, the source or the current instance.
            </summary>
            <param name="source"> The source array object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the current instance to the destination array. 
            </summary>
            <param name="dest"> The destination array object.</param>
            <param name="index"> The index to start copying to in the destination array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.Clone">
            <summary>
             Returns an object that is a clone of this array object. 
            </summary>
            <returns> Returns a clone of this array object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.ResizeCapacity(System.Int32)">
            <summary>
              This method reallocates the internal data buffer to the new capacity value.
              The data is preserved. If the new buffer size is less than the number of data values
              in the old array, the array is truncated. If the new buffer size is greater than the number
              of data values, the Length property remains the same, but the MaxCapacity property is changed
              and the internal buffer reallocated to the new maxcapcity size.
            </summary>
            <param name="newcapacity"> The internal buffer holding the data values is sized to the new value of new capacity.
             The Length property remains unchanged if the new buffer size is larger than the old buffer size, only the 
             buffer size is changed, not the current number of elements in the array.   </param>param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.Reset">
            <summary>
             Resets the Length property to 0, the MaxCapacity property to 16 and reallocates
             the internal buffer to MaxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.Clear">
            <summary>
             Resets (same as Clear) the Length property to 0, the MaxCapacity property to 16 and reallocates
             the internal buffer to MaxCapacity.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.ShiftLeft(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the left. If you have a 10 element array and
              shift the array 2 elements to the left, element 7 ends up with the value originally in element
              9, element 6 ends up with the value originally in element 8, etc.
            </summary>
            <param name="shiftcount"> The elements are shifted to left by shiftcount elements.</param>
            <param name="fillzero"> Set to true if elements to the right of the final shift point are to be set to zero. 
            In the example above this would apply to elements 8 and 9 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.ShiftRight(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the right. If you have a 10 element array and
              shift the array 2 elements to the right, element 2 ends up with the value originally in element
              0, element 3 ends up with the value originally in element 1, etc.
            </summary>
            <param name="shiftcount"> The elements are shifted to right by shiftcount elements.</param>
            <param name="fillzero"> Set to true if elements to the left of the final shift point are to be set to zero. 
            In the example above this would apply to elements 0 and 1 in the final, shifted array.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.ShiftLeftThenResize(System.Int32,System.Boolean)">
            <summary>
              Shifts the elements of the array to the left. If you have a 10 element array and
              shift the array 2 elements to the left, element 7 ends up with the value originally in element
              9, element 6 ends up with the value originally in element 8, etc. The array is resized to a size
              equal to the original array size minus the shift count (Length - shiftcount).
            </summary>
            <param name="shiftcount"> The elements are shifted to left by shiftcount elements.</param>
            <param name="trim"> Set to true if the MaxCapacity property is to be set equal to Length property,
             sizing the internal data buffers to the exact array size.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.Insert(System.Int32,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Inserts an element in the array at the specified index, increasing the length of the array by one. If
             the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled and the internal buffer
             resized accordingly.
            </summary>
            <param name="index"> The array element where the new value is inserted.</param>
            <param name="r"> The new value to insert.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.RemoveAt(System.Int32)">
            <summary>
             Removes an element at the specified index, decreasing the length of the array by one. The size
             of the internal buffer remains unchanged.
            </summary>
            <param name="index"> The array element that is deleted.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.Delete(System.Int32)">
            <summary>
             Removes an element at the specified index, decreasing the length of the array by one. The size
             of the internal buffer remains unchanged.
            </summary>
            <param name="index"> The array element that is deleted.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.SetLength(System.Int32)">
            <summary>
             Resizes the array to the specified length. The MaxCapacity property is iteratively doubled until
             it exceeds the new length, then internal buffer are resized to the new MaxCapacity value.
            </summary>
            <param name="newlength"> The array is resized to the new length.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.TrimToSize">
            <summary>
             The MaxCapacity property is set equal to the Length property of the array
             and the internal buffer are resized to the new MaxCapacity value. This leaves no "slack"
             in the internal buffer that allows the array length to grow without forcing a reallocation
             and copy of all data elements should the length of the array be increased.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.Resize(System.Int32)">
            <summary>
             The length of the arrays is set to the specified value. If the new length is greater than the current 
             Length property value, but less or equal to the MaxCapacity property value, the Length property is increased to
             reflect the new value. If the new length is greater than MaxCapacity, the MaxCapacity value is
             doubled until it is greater than the new length, and the internal buffer increased accordingly.
             New, uninitialized array elements are set to zero.
            </summary>
            <param name="newlength"> The array is resized to the new length.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.Add(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Adds a new element at the end of the array, increasing the length of the array by one. If
             the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled and the internal buffer
             resized accordingly.
            </summary>
            <param name="r"> The new value to add at the end of the array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.AddRange(com.quinncurtis.chart2dnet.ChartCalendar[])">
            <summary>
             Adds a array of new values at the end of the array, increasing the length of the array by the length of the 
             source array. If the MaxCapacity property is exceeded the MaxCapacity property is automatically doubled 
             and the internal buffer resized accordingly.
            </summary>
            <param name="x"> An array of new values that are added to the end of the array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.SetElements(com.quinncurtis.chart2dnet.ChartCalendar[])">
            <summary>
             Initializes the elements of the array, starting at element 0. The size of the array is set
             equal to the length of the source array. If the source array is
             larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.SetElements(com.quinncurtis.chart2dnet.ChartCalendar[],System.Int32)">
            <summary>
             Initializes the elements of the array, starting at element 0 and continuing for count elements.
              The size of the array is set equal to the length of the source array, or the count, whichever is smaller. 
              If the new length larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array, or the count value, whichever is smaller.</param>
            <param name="count"> Specifies the number of elements to initialize.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.SetElements(com.quinncurtis.chart2dnet.TimeArray,System.Int32)">
            <summary>
             Initializes the elements of the array, starting at element 0 and continuing for count elements.
              The size of the array is set equal to the length of the source array, or the count, whichever is smaller. 
              If the new length larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array, or the count value, whichever is smaller.</param>
            <param name="count"> Specifies the number of elements to initialize.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.SetElements(com.quinncurtis.chart2dnet.TimeArray)">
            <summary>
             Initializes the elements of the array, starting at element 0. The size of the array is set
             equal to the length of the source array. If the source array is
             larger than the current length of the array, the array is resized accordingly.
            </summary>
            <param name="source"> An array of new values used to initialize the array. The
             array will end up the same size as the source array.</param>
             <returns> Returns the new value of the Length property.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.SetElement(System.Int32,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Set the value of a single element in the array.
            </summary>
            <param name="index"> The index to set in the array.</param>
            <param name="r"> The array element at index is set to the value r.</param>///
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.GetElement(System.Int32)">
            <summary>
             Get the value of a single element in the array.
            </summary>
            <param name="index"> The array index.</param>
             <returns> Returns the value of the array at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.GetDataBuffer">
            <summary>
             Returns a reference to the Array object that represents internal data buffer. It may be sized to the
             maxCapacity value, instead of the number of items in the buffer. This reference will remain valid only as long as
             the array is not forced to resize, forcing a reallocation of the internal buffer.
            </summary>
             <returns> Returns a reference to the Array object that represents the internal data buffer.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeArray.GetElements">
            <summary>
             Returns a copy of the data values in the array sized to the number of elements.
            </summary>
             <returns> Returns a copy of the data values in the array sized to the number of elements.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeArray.Length">
            <summary>
              This method returns the value of the length field which is number of  data points in a simple dataset, 
              or the number of x-values in a group dataset. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeArray.MaxCapacity">
            <summary>
              This method returns the value of the maxCapacity field. The MaxCapacity property represents the allocated size
              of the internal Array object used as the data buffer for the array. It is always greater than or equal to the
              Length property.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeArray.DataBuffer">
            <summary>
             Returns a reference to the Array object that represents internal data buffer. This reference will remain 
             valid only as long as the array is not forced to resize, forcing a reallocation of the internal buffer.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeArray.Item(System.Int32)">
            <summary>
              This method get/sets the value of an individual element in the array. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.TimeAutoScale">
            <summary>
              The TimeAutoScale is designed for use with  time coordinates and is  used to scale the plotting 
              area of graphs and to set the minimum  and maximum values of the axes displayed in the graphs.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAutoScale.tickInterval">
            <summary>
             Holds the calculated Auto-scale tick mark interval.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAutoScale.timeMinorNthTick">
            <summary>
             Specifies that only ever timeMinorNthTick tick marks should be displayed.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAutoScale.timeBase">
            <summary>
             The time axis time base.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAutoScale.dateStart">
            <summary>
             The starting calendar value for the time scale.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAutoScale.dateStop">
            <summary>
             The ending calendar value for the time scale.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAutoScale.timeLabelsOrigin">
            <summary>
             Holds the calculated Auto-scale label and tick mark starting position.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAutoScale.theTimeScale">
            <summary>
             Holds a reference to the associated time scale.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.InitDefaults">
            <summary>
              Initializes default values for the autoscale object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.ErrorCheck(System.Int32)">
            <summary>
              Checks the TimeAutoScale object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.#ctor">
            <summary>
             The default TimeAutoScale constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.SetTimeScale(com.quinncurtis.chart2dnet.TimeScale)">
            <summary>
             Sets the time scale for the object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.#ctor(com.quinncurtis.chart2dnet.TimeScale)">
            <summary>
             This constructor creates a new TimeAutoScale object based on the initial scaling values of  an TimeScale object. 
            </summary>
            <param name="timescale"> The auto-scale values are calculated based on the minimum  and maximum scaling 
            values of this TimeScale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates,com.quinncurtis.chart2dnet.TimeSimpleDataset,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new TimeAutoScale object based on the data  values in a dataset. 
            </summary>
            <param name="transform"> an TimeAutoScale object. </param>
            <param name="dataset"> The auto-scale values are calculated based on the minimum  and maximum values 
            derived from this simple dataset. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTO_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates,com.quinncurtis.chart2dnet.TimeSimpleDataset[],System.Int32,System.Int32)">
            <summary>
             This constructor creates a new TimeAutoScale object based on the data  values in an array of datasets. 
            </summary>
            <param name="transform"> an TimeAutoScale object. </param>
            <param name="datasets"> An array of datasets. The auto-scale values are calculated based on the minimum  
            and maximum values derived from these simple datasets. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTO_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates,com.quinncurtis.chart2dnet.TimeGroupDataset,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new TimeAutoScale object based on the data  values in a dataset. 
            </summary>
            <param name="transform"> an TimeAutoScale object. </param>
            <param name="dataset"> The auto-scale values are calculated based on the minimum  and maximum values 
            derived from this group dataset. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTO_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates,com.quinncurtis.chart2dnet.TimeGroupDataset[],System.Int32,System.Int32)">
            <summary>
             This constructor creates a new TimeAutoScale object based on the data  values in an array of datasets. 
            </summary>
            <param name="transform"> an TimeAutoScale object. </param>
            <param name="datasets"> An array of datasets. The auto-scale values are calculated based on the minimum  
            and maximum values derived from these group datasets. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTO_EXACT).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new TimeAutoScale object based on the initial scaling values of  an 
             TimeAutoScale object. 
            </summary>
            <param name="transform"> The auto-scale values are calculated based on the minimum  and maximum 
            scaling values of this CartesianCoordinates object. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT). </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates,com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new TimeAutoScale object based on starting and ending calendar values. 
            </summary>
            <param name="transform"> The auto-scale values are calculated based on the minimum  and maximum 
            scaling values of this CartesianCoordinates object. </param>
            <param name="dstart"> The start date. </param>
            <param name="dstop"> The stop date. </param>
            <param name="naxis"> The auto-scale values are calculated for this axis (X_AXIS or Y_AXIS). </param>
            <param name="nmode"> The auto-scale values are calculated using this rounding mode  (AUTOAXES_FAR, 
            AUTOAXES_NEAR, AUTOAXES_EXACT). </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.Copy(com.quinncurtis.chart2dnet.TimeAutoScale)">
            <summary>
              Copies the source TimeAutoScale object. 
            </summary>
            <param name="source"> The source TimeAutoScale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.Clone">
            <summary>
             Returns an object that is a clone of this TimeAutoScale object. 
            </summary>
            <returns> Returns a clone of this TimeAutoScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.CalcChartAutoScaleDataset">
            <summary>
             Calculate new auto-scale values based on the values in the data set  referenced by theDataset field.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.CalcChartAutoScaleDatasets">
            <summary>
             Calculate new auto-scale values based on the values in the data sets  referenced by the theDatasetsArray field.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.CalcChartAutoScaleTransform">
            <summary>
             Calculate new auto-scale values based on the values in the chart scale  referenced by theChartCoordinates field.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.CalcChartAutoScaleInitialValues">
            <summary>
             Calculate new auto-scale values based on the values in the chart scale  referenced by theChartCoordinates field.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.CalcTimeBaseValues">
            <summary>
             Calculates auto-scale parameters based on the starting and ending  calendar dates.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.CalcTimeBaseValues(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Calculates auto-scale parameters based on the starting and ending  calendar dates. 
            </summary>
            <param name="dmin"> The starting date for the scale. </param>
            <param name="dmax"> The ending date for the scale. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.GetTimeScaleBase">
            <summary>
             Calculates and returns the tick mark time base for a time axis based on the current auto-axis setup. 
            </summary>
            <returns> Returns the tick mark time base for a time axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.GetTimeMinorNthTick">
            <summary>
             Calculates and returns the timeMinorNthTick field value for a time axis based  on the current auto-axis setup. 
            </summary>
            <returns> Returns the timeMinorNthTick field value for a time axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.GetTimeMajorNthTick">
            <summary>
             Calculates and returns the majorNthTick field value for a time axis based  on the current auto-axis setup. 
             Always has the value 1 for a time axis. 
            </summary>
            <returns> Returns the majorNthTick field value for a time axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.AdjustTimeEndpoints(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             Round the endpoints of a time scale based on the time base of the tick marks. 
            </summary>
            <param name="dstart"> The current auto-scale minimum. </param>
            <param name="dstop"> The current auto-scale maximum. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR). </param>
            <param name="nroundfar"> The time base for major tick marks. </param>
            <param name="nroundnear"> The time base for minor tick marks.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.AdjustMillisecondTimeEndpoints(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             Round the endpoints of a milliseconds time scale based on the time base of the tick marks. 
            </summary>
            <param name="dstart"> The current auto-scale minimum. </param>
            <param name="dstop"> The current auto-scale maximum. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR). </param>
            <param name="nroundfar"> The time base for major tick marks. </param>
            <param name="nroundnear"> The time base for minor tick marks.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.AdjustTimeLabelsOrigin(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32)">
            <summary>
             Round the label starting point of a time axis. 
            </summary>
            <param name="dstart"> The current auto-scale minimum. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR). </param>
            <param name="nround"> The time base for major tick marks. </param>
            <returns> result Returns the label starting point.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.AdjustTimeAxisRange">
            <summary>
             Round the endpoints of a time scale based on the current rounding mode and time base. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.AdjustTimeAxisRange(System.Int32,System.Int32)">
            <summary>
             Round the endpoints of a time scale based on the rounding mode. 
            </summary>
            <param name="ntimebase"> The time base of the current time scale. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.CalcRoundAxisValues(System.Double,System.Double,System.Int32)">
            <summary>
             Round the endpoints of a time scale based on the rounding mode. 
            </summary>
            <param name="raxmin"> The current auto-scale minimum. </param>
            <param name="raxmax"> The current auto-scale maximum. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.CalcRoundTimeAxisValues(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32)">
            <summary>
             Round the endpoints of a time scale based on the rounding mode. 
            </summary>
            <param name="dmin"> The current auto-scale minimum. </param>
            <param name="dmax"> The current auto-scale maximum. </param>
            <param name="nroundmode"> The auto-scale rounding mode (AUTOAXES_EXACT, AUTOAXES_NEAR, AUTOAXES_FAR).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.GetTimeLabelsOrigin">
            <summary>
             Returns the starting value of labels and tick marks for a time axis in the auto-scale setup. 
            </summary>
            <returns> Returns the starting value of labels and tick marks for a time axis in the auto-scale setup.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.GetDateStart">
            <summary>
             Returns the starting date value for a time axis in the auto-scale setup. 
            </summary>
            <returns> Returns the starting date value time axis in the auto-scale setup.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.GetDateStop">
            <summary>
             Returns the ending date value for a time axis in the auto-scale setup. 
            </summary>
            <returns> Returns the ending date value time axis in the auto-scale setup.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAutoScale.GetTickInterval">
            <summary>
             Returns the calculated minor tick interval value of the auto-scale setup. 
            </summary>
            <returns> Returns the calculated tick interval value of the auto-scale setup.</returns>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.TimeAxis">
            <summary>
              The TimeAxis class implements a linear axis that has  major and minor tick marks at time and date 
              intervals. It is a  concrete subclass of the abstract Axis class.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxis.axisTickMarkTimeBase">
            <summary>
             The tick mark time base. This field defines the major and minor tick mark spacing  for a time axis. 
             Use one of the Time/Date axis tick mark mode constants, TIMEAXIS_XXX, in  the file 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxis.axisTickSpace">
            <summary>
             The minor tick mark spacing used at the millisecond level.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxis.timeLabelsOrigin">
            <summary>
             Holds the calculated Auto-scale label and tick mark starting position for time axis labels.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxis.quarterOffset">
            <summary>
             The offset for placing the quarter tick mark on a month :
              0 means Jan 1 is Q1, 1 means Feb 1 is Q1, 2 means Mar 1, is Q1 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.#ctor">
            <summary>
              The default TimeAxis constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.InitDefaults">
            <summary>
              Initializes default values for the axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.CalcAxisLabelsDecimalPos">
            <summary>
              Returns an integer value that is the number  of digits that should be displayed to the right of the 
              decimal point  when labeling the major axis tick marks.  Time axes always return 0 for this value. 
            </summary>
            <returns> Returns the number of digits that should be displayed to the right  of the decimal point, 0 
            for time axes.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.ErrorCheck(System.Int32)">
            <summary>
              Checks the current axis object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates)">
            <summary>
              This constructor creates a new TimeAxis object and  scales it to match the minimum and maximum values 
              of the specified TimeCoordinates object. 
            </summary>
            <param name="transform"> Sets the minimum and maximum value of the axis to the associated  minimum and 
            maximum value of the coordinate system transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates,com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              This constructor creates a new TimeAxis object and  scales it to match the specified calendar values. 
            </summary>
            <param name="transform"> Sets the minimum and maximum value of the axis to the associated  minimum and 
            maximum value of the coordinate system transform.</param>
            <param name="dstart"> Specifies the starting calendar value.</param>
            <param name="dstop"> Specifies the ending calendar value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates,System.Int32,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new TimeAxis object using the specified tick mark time base  and minor tick 
              mark interval and scales it to match the minimum and maximum values of the  specified TimeCoordinates object. 
            </summary>
            <param name="transform"> Sets the minimum and maximum value of the axis to the associated  minimum and 
            maximum value of the coordinate system transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS). </param>
            <param name="ntickmarkbase"> This field defines the major and minor tick mark spacing  for a time axis. 
            Use one of the Time/Date axis tick mark mode constants :  TIMEAXIS_SECOND ... TIMEAXIS_50YEAR10YEAR. </param>
            <param name="nminornthtick"> Draws every nminornthtick when drawing the tick marks for time  axes (TimeAxis) 
            where the number of minor tick marks between major  tick marks is larger than what is wanted.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new TimeAxis object using the specified tick mark time base  and minor tick 
              mark interval and scales it to match the minimum and maximum values of the  specified TimeCoordinates object. 
            </summary>
            <param name="transform"> Sets the minimum and maximum value of the axis to the associated  minimum and 
            maximum value of the coordinate system transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS). </param>
            <param name="ntickmarkbase"> This field defines the major and minor tick mark spacing  for a time axis. 
            Use one of the Time/Date axis tick mark mode constants :  TIMEAXIS_SECOND ... TIMEAXIS_50YEAR10YEAR.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.#ctor(com.quinncurtis.chart2dnet.TimeCoordinates,System.Int32)">
            <summary>
              This constructor creates a new TimeAxis object using the specified tick mark time base  and minor tick
               mark interval and scales it to match the minimum and maximum values of the  specified TimeCoordinates object. 
            </summary>
            <param name="transform"> Sets the minimum and maximum value of the axis to the associated  minimum and 
            maximum value of the coordinate system transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS). </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.InitTimeAxis(com.quinncurtis.chart2dnet.TimeCoordinates,System.Int32)">
            <summary>
              This method initializes a new TimeAxis object and  scales it to match the minimum and maximum values of 
              the specified TimeCoordinates object. 
            </summary>
            <param name="transform"> Sets the minimum and maximum value of the axis to the associated  minimum and 
            maximum value of the coordinate system transform. </param>
            <param name="axtype"> Specifies if the axis is an x-axis (X_AXIS), or a y-axis (Y_AXIS).</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.Copy(com.quinncurtis.chart2dnet.TimeAxis)">
            <summary>
              Copies the source axis. 
            </summary>
            <param name="source"> The source axis object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.Clone">
            <summary>
             Returns an object that is a clone of this TimeAxis object. 
            </summary>
            <returns> Returns a clone of this TimeAxis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.CalcAutoAxisWork(com.quinncurtis.chart2dnet.TimeAutoScale)">
            <summary>
             This method sets time axis properties based on the values in an TimeAutoScale  object
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.CalcAutoAxis(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This auto-axis method uses the current minimum and maximum values in the theTimeCoords.theTimeScale
             object to determine the minimum and maximum value for the axis, and the
             appropriate minor and major tick mark spacing.
            <param name="dstart"> Sets the time axis starting date value. </param>
            <param name="dstop"> Sets the time axis ending date value.</param>
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.CalcAutoAxis">
            <summary>
             This auto-axis method uses the current minimum and maximum values in the theTimeCoords.theTimeScale
             object to determine the minimum and maximum value for the axis, and the
             appropriate minor and major tick mark spacing.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.CalcTickMark(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a tick mark based on specified information 
            </summary>
            <param name="startdate"> The starting date value of the axis. </param>
            <param name="currentdate"> The date value for the current tick mark. </param>
            <param name="nticktype"> Specifies the tick mark type, TICK_MAJOR or TICK_MINOR. </param>
            <param name="ncalbase"> The tick mark time base. This field defines the major and minor tick mark spacing  
            for a time axis. Use one of the Time/Date axis tick mark mode constants :  
            TIMEAXIS_SECOND ... TIMEAXIS_50YEAR10YEAR. </param>
            <param name="nbaseincr"> The increment time/date value is the value between adjacent  tick marks. </param>
            <param name="increment"> Adds this increment, using the time base nbaseincr, to the current  date 
            after the tick mark is calculated.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.StartNewDay(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Int32,com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method rounds a date value forward to the nearest day, taking into account  the 5/7 day week mode, 
             and the non-24 hour day mode. 
            </summary>
            <param name="currentdate"> The date value to be rounded. </param>
            <param name="ncount"> The current tick mark count value. </param>
            <param name="nbase"> Date values are rounded to this base time/date value. </param>
            <param name="startofday"> The starting time value for non-24 hour days. </param>
            <param name="endofday"> The starting time value for non-24 hour days.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.InitNewDay(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method rounds a date value forward to the nearest day, taking into account  the 5/7 day week mode, 
             and the non-24 hour day mode. 
            </summary>
            <param name="currentdate"> The date value to be rounded. </param>
            <param name="startofday"> The starting time value for non-24 hour days. </param>
            <param name="endofday"> The starting time value for non-24 hour days.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.InitCurrentTODRange(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method initializes the startofday and endofday dates with  the date stored in currentdate, and sets 
             the TOD of startofday  to the TOD starting time, and sets the TOD of endofday to  the TOD ending time. 
            </summary>
            <param name="currentdate"> The current date to use for startofday and endofday. </param>
            <param name="startofday"> Returns the current date, set to the TOD starting time. </param>
            <param name="endofday"> Returns the current date, set to the TOD ending time.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.GetTickType(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32)">
            <summary>
             This method returns if a time/date value should be a minor tick mark, or  a major tick mark. 
            </summary>
            <param name="currentdate"> The date value to check. </param>
            <param name="nbase"> The time base value. </param>
            <param name="modulus"> Not used, set to 1000. </param>
            <returns> Returns TICK_MINOR for a minor tick mark and TICK_MAJOR for a major tick mark.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.InValidTODRange(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method checks to see if the currentdate is valid, by checking  to see if it is within the current 
             TOD range, and checking to  see if it is in the range defined by time coordinates scale. 
            </summary>
            <param name="currentdate"> The date to check. </param>
            <param name="startofday"> The starting TOD of the current date. </param>
            <param name="endofday"> The ending TOD of the current date. </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.InValidTODRange2(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method checks to see if the currentdate is valid, by checking  to see if it is within the current 
             TOD range, and checking to  see if it is in the range defined by time coordinates scale. 
            </summary>
            <param name="currentdate"> The date to check. </param>
            <param name="startofday"> The starting TOD of the current date. </param>
            <param name="endofday"> The ending TOD of the current date. </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.InValidTimeScaleRange(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method checks to see if the currentdate is valid, by checking to  see if it is in the range 
             defined by time coordinates scale. 
            </summary>
            <param name="currentdate"> The date to check. </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.RoundDateUp(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32)">
            <summary>
             This method rounds a date value forward, taking into account the time base,  and the 5/7 day week mode. 
            </summary>
            <param name="currentdate"> The date value to be rounded. </param>
            <param name="nbase"> The time base for the current axis. </param>
            <param name="nroundbase"> The date is rounded to the minimum value of this time base.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.ProcessLastTick(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32)">
            <summary>
             This method processes that last tick in the current axis. 
            </summary>
            <param name="currentdate"> The date to check. </param>
            <param name="startdate"> The starting value of the axis. </param>
            <param name="stopdate"> The ending value of the axis. </param>
            <param name="nbase"> The time base value. </param>
            <param name="modulus"> Not used, set to 1000.  </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineDayHourAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Day/Hour time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineHourHourAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Hour/Hour time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis.  Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="majorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineHourMinuteAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Hour/Minute time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineMinuteMinuteAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Minute/Minute time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineMinuteSecondAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Minute/Second time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineSecondSecondAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Second/Second time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineMillisecondAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Second/Second time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis . Use one of  the ChartCalendar time field constants: 
            hartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineSecondMillisecondAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Second/Second time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis . Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineYearYearAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineYearQuarterAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis . Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineYearMonthAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineQuarterAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineQuarterMonthAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineMonthAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineMonthWeekAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineMonthDayAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineWeekAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineWeekDayAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineDayAxisTicks(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32,System.Int32)">
            <summary>
             This method defines a time axis that uses the Year/Year time base tick mark spacing. 
            </summary>
            <param name="currentdate"> The starting value for the time axis. </param>
            <param name="timebase"> The time base of the axis. Use one of  the ChartCalendar time field constants: 
            ChartObj.HOUR, ChartObj.MINUTE, ChartObj.SECOND, etc. </param>
            <param name="minortickspermajor"> Specifies the number of minor units per major unit. </param>
            <param name="minorincrement"> Specifies the number of units of the time base making a minor tick mark.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DefineTimeAxisTics">
            <summary>
              This method defines the tick marks for a time/date axis using the  axis minimum and maximum values and 
              the tick mark time base value.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.SetAxisTickMarkTimeBase(System.Int32)">
            <summary>
             Sets the time axis tick mark time base. 
            </summary>
            <param name="ntickmarkbase"> Sets the time axis tick mark time base.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.GetAxisTickMarkTimeBase">
            <summary>
             Returns the time axis tick mark time base. 
            </summary>
            <returns> Returns the time axis tick mark time base.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.SetTimeLabelsOrigin(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the time axis tick mark origin. 
            </summary>
            <param name="origin"> Sets the time axis tick mark origin.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.GetTimeLabelsOrigin">
            <summary>
             Returns the time axis tick mark origin. 
            </summary>
            <returns> Returns the time axis tick mark origin.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.SetTimeAxisMin(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the time axis starting date value. 
            </summary>
            <param name="start"> Sets the time axis starting date value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.SetTimeAxisMax(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the time axis ending date value. 
            </summary>
            <param name="stop"> Sets the time axis ending date value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.GetTimeAxisMin">
            <summary>
             Returns the time axis starting date value. 
            </summary>
            <returns> Returns the time axis starting date value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.GetTimeAxisMax">
            <summary>
             Returns the time axis ending date value. 
            </summary>
            <returns> Returns the time axis ending date value.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.DrawTimeAxis(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
              This methods draw the axis using the specified general path.  The drawTimeAxis method defines the axis 
              tick marks for a time/date axis and the drawAxis  method (from the underlying Axis class) draws the axis 
              lines and  the axis tick marks using the specified general path. 
            </summary>
            <param name="path"> The axis is drawn using this general path object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.GetTimeCoordinates">
            <summary>
              Returns the current coordinate system as TimeCoordinates object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. A GraphicsPath  object is created and the axis is drawn using that path.  
              Once the path is complete it is drawn to the graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.GetCompatibleAxisLabels">
            <summary>
             This method returns an AxisLabels object that is compatible  with this TimeAxis object. 
            </summary>
            <returns> Returns an AxisLabels object that is compatible  with this TimeAxis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.CheckIntersection(com.quinncurtis.chart2dnet.Point2D,com.quinncurtis.chart2dnet.NearestPointData)">
            <summary>
              The CheckIntersection method. It test to see if the test point  is within the intersectionTestDistance 
              of the object location.  Returns true if the test point intersects the object. 
            </summary>
            <param name="testpoint"> The test point </param>
            <param name="np"> Nearest point information for data based objects. </param>
            <returns> Returns true if the test point intersects the object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.SetAxisTickSpace(System.Double)">
            <summary>
              Sets the minor tick mark spacing, used only in millisecond mode. 
            </summary>
            <param name="tickspace"> Sets the minor tick mark spacing.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxis.GetAxisTickSpace">
            <summary>
              Returns the minor tick mark spacing. 
            </summary>
            <returns> Returns the minor tick mark spacing.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxis.AxisTickMarkTimeBase">
            <summary>
             Set/Get the time axis tick mark time base. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxis.TimeLabelsOrigin">
            <summary>
             Set/Get the time axis tick mark origin. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxis.TimeAxisMin">
            <summary>
             Set/Get the time axis starting date value. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxis.TimeAxisMax">
            <summary>
             Set/Get the time axis ending date value. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxis.QuarterOffset">
            <summary>
            <summary>
             Get/Set the offset for placing the quarter tick mark on a month :
              0 means Jan 1 is Q1, 1 means Dec 1 is Q1, 2 means Nov 1, is Q1 
            </summary>
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.TimeAxisLabels">
            <summary>
              The LinearAxisLabels class manages and displays the axis labels for  linear and log axes. It is a 
              concrete subclass of the AxisLabels class.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxisLabels.dateCrossoverMode">
            <summary>
             Specifies if a special label format is used for the cross over from one  day to the next, for example 
             the label for 12 Midnight is the date for that  day (10,13,2001) rather than the time.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxisLabels.dateCrossoverCondition">
            <summary>
             Specifies the crossover condition for a crossover label. Use one of the  crossover label constants: 
             CROSSOVER_NONE, CROSSOVER_DAY, CROSSOVER_WEEK, CROSSOVER_MONTH, CROSSOVER_YEAR = 4.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxisLabels.crossoverLabelFormat">
            <summary>
             Specifies the format of the day crossover label
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxisLabels.customTimeFormatString">
            <summary>
             The programmer uses this string to custom format time axis labels.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxisLabels.axisLabelsDecimalPos">
            <summary>
             Used when a time axis label requires a decimal. Not supported at this time.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxisLabels.euroAutoFormatMonthDay">
            <summary>
             Sets the auto-format month day format for time axis labels. Set to false for standard US month-day
             format, true for Euro day-month format.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxisLabels.autoFormatCrossoverLabels">
            <summary>
             Set to true for  cross-over labels in auto-formatted time axis labels.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeAxisLabels.timeBaseLabelFormats">
            <summary>
             An array of time label formats constants, specifying a time/date format  for each possible time base.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.#ctor">
            <summary>
              The default TimeAxisLabels constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.InitDefaults">
            <summary>
              Initializes default values for time axis labels.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.ErrorCheck(System.Int32)">
            <summary>
              Checks the TimeAxisLabels object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.Copy(com.quinncurtis.chart2dnet.TimeAxisLabels)">
            <summary>
              Copies the source TimeAxisLabels labels object. 
            </summary>
            <param name="source"> The source TimeAxisLabels labels object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.Clone">
            <summary>
             Returns an object that is a clone of this TimeAxisLabels object. 
            </summary>
            <returns> Returns a clone of this TimeAxisLabels object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.InitTimeBaseLabelFormats">
            <summary>
             Initializes the time/date label formats for each possible time axis  time base.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.CalcTimeLabelFormats(System.Int32)">
            <summary>
             Calculates the time axis labels format based on the value of the axis tick mark base.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.#ctor(com.quinncurtis.chart2dnet.TimeAxis)">
            <summary>
              This constructor creates a new TimeAxisLabels object based on the specified time axis. 
            </summary>
            <param name="baseaxis"> The TimeAxisLabels object uses the tick marks  defined for this axis to locate 
            the axis labels on the axis.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.CalcAutoAxisLabels">
            <summary>
             This method automatically calculates axis label parameters, assuming  that the labels are black in color.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.CheckCrossover(com.quinncurtis.chart2dnet.TickMark)">
            <summary>
             This method checks the tick mark to see if it qualifies as a crossover tick mark,  where in addition to the 
             regular label it also gets a crossover label underneath.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.CalcLabelFormat(com.quinncurtis.chart2dnet.TickMark)">
            <summary>
             Calculates the tick mark label format based on the current tick mark. 
            </summary>
            <param name="tickmark"> The current tick mark object. </param>
            <returns> Returns the format constant for the specified tick mark. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.SetAxisLabelsDecimalPos(System.Int32)">
            <summary>
             Sets the number of digits to the right of the decimal point for numeric axis labels. 
            </summary>
            <param name="decimalpos"> Sets the number of digits to the right of the decimal point for numeric axis labels.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.GetAxisLabelsDecimalPos(System.Double)">
            <summary>
             Returns the number of digits to the right of the decimal point for numeric axis labels. 
            </summary>
            <returns> Returns the number of digits to the right of the decimal point for numeric axis labels.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.GetAxisLabelsFormat(com.quinncurtis.chart2dnet.TickMark)">
            <summary>
              Returns the time format constant for a given tick mark. 
            </summary>
            <returns> Returns the time format constant for a given tick mark.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.GetCompatibleLabel">
            <summary>
             Returns an ChartLabel object compatible with the current TimeAxisLabels  axis object. 
            </summary>
            <returns> Returns an ChartLabel object compatible with the current TimeAxisLabels  axis object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.FormatAxisLabel(com.quinncurtis.chart2dnet.TimeLabel,com.quinncurtis.chart2dnet.TickMark)">
            <summary>
              This method formats the text object used to display a time axis label at specific tick mark. 
            </summary>
            <param name="textobj"> The text object used as an axis label. </param>
            <param name="ticmark"> The tick mark that the text label is place at.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.CalcAxisLabels(System.Drawing.Graphics)">
            <summary>
             This method cycles through all of the tick marks, creating formatted  strings for each. an ChartText 
             object is used to output the string at  the appropriate tick mark position. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.SetTimeBaseLabelFormats(System.Int32,System.Int32)">
            <summary>
             This method allows the programmer to override the default time  label formats used for specific time axis 
             base values. 
            </summary>
            <param name="index"> The index into the timeBaseLabelFormats array that  holds the time label formats. Use 
            one of the axis time base constants:  TIMEAXIS_XXX. </param>
            <param name="format"> Specifies the new time label format value. Use  one of the time/date format constants: 
            TIMEDATEFORMAT_XXX </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.GetTimeBaseLabelFormats(System.Int32)">
            <summary>
             Returns the time axis label format at a specific index in the  timeBaseLabelFormat array. 
            </summary>
            <param name="index"> The index into the timeBaseLabelFormats array that  holds the time label formats. 
            Use one of the axis time base constants:  TIMEAXIS_XXX. </param>
            <returns> Returns the time label format value. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.TimeAxisLabels.SetTimeBaseLabelFormats(System.Int32,System.Int32)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.SetDateCrossoverCondition(System.Int32)">
            <summary>
             Sets the crossover label condition for time axis labels.
            </summary>
            <param name="crossover"> Sets the crossover label condition for time axis labels. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.GetDateCrossoverCondition">
            <summary>
             Returns the crossover label condition for time axis labels.
            </summary>
            <returns> Returns the crossover label condition for time axis labels. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.SetDateCrossoverMode(System.Int32)">
            <summary>
             Sets the crossover label mode for time axis labels.
            </summary>
            <param name="crossover"> Sets the crossover label mode for time axis labels. </param>
            
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.GetDateCrossoverMode">
            <summary>
             Returns the crossover label mode for time axis labels.
            </summary>
            <returns> Returns the crossover label mode for time axis labels. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.SetCrossoverLabelFormat(System.Int32)">
            <summary>
             Sets the crossover label format for time axis labels.
            </summary>
            <param name="labelformat"> Sets the crossover label format for time axis labels. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.GetCrossoverLabelFormat">
            <summary>
             Returns the crossover label format for time axis labels.
            </summary>
            <returns> Returns the crossover label format for time axis labels. </returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.SetCustomTimeFormatString(System.String)">
            <summary>
             Sets the time format string when custom labels are used for time values.
            </summary>
            <param name="timeformatstring"> Sets the time format string when custom labels are used for time values. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeAxisLabels.GetCustomTimeFormatString">
            <summary>
             Returns the time format string when custom labels are used for time values.
            </summary>
            <returns> Returns the time format string when custom labels are used for time values. </returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxisLabels.DateCrossoverCondition">
            <summary>
              Set/Get the crossover label condition for time axis labels. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxisLabels.DateCrossoverMode">
            <summary>
              Set/Get the crossover label mode for time axis labels. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxisLabels.CrossoverLabelFormat">
            <summary>
              Set/Get the crossover label format for time axis labels. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxisLabels.CustomTimeFormatString">
            <summary>
              Set/Get the time format string when custom labels are used for time values. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxisLabels.EuroAutoFormatMonthDay">
            <summary>
             Set/Get  the auto-format month day format for time axis labels. Set to false for standard US month-day
             format, true for Euro day-month format.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeAxisLabels.AutoFormatCrossoverLabels">
            <summary>
             Set/Get the auto-format crossover label mode. Set to true for  cross-over labels in auto-formatted time 
             axis labels.
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.TimeCoordinates">
            <summary>
              The TimeCoordinates class  extends the PhysicalCoordinates class to support time-linear and time-log,  
              coordinate systems in an xy coordinate plane. 
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeCoordinates.weekType">
            <summary>
             The week mode for the time axis
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeCoordinates.scaleStartTOD">
            <summary>
             The starting time-of-day value for non-24 hour days.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeCoordinates.scaleStopTOD">
            <summary>
             The ending time-of-day value for non-24 hour days.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeCoordinates.timeAxis">
            <summary>
             Specifies which axis is the time axis.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.InitDefaults">
            <summary>
             Initializes default values for the TimeCoordinates object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.ErrorCheck(System.Int32)">
            <summary>
              Checks the current TimeCoordinates object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.Copy(com.quinncurtis.chart2dnet.TimeCoordinates)">
            <summary>
              Copies the source scale. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.Copy(System.Object)">
            <summary>
              Copies the source scale. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.Clone">
            <summary>
             Returns an object that is a clone of this TimeCoordinates object. 
            </summary>
            <returns> Returns a clone of this TimeCoordinates object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.#ctor">
            <summary>
             The default constructor for TimeCoordinates.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset,System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in the supplied 
             TimeSimpleDataset object. 
            </summary>
            <param name="dataset"> The TimeSimpleDataset dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in the supplied 
             TimeSimpleDataset object. AUTOAXES_FAR rounding is  assumed for both x- and y-coordindates. 
            </summary>
            <param name="dataset"> The TimeSimpleDataset dataset used as the basis for the new coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset[])">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in an array of 
             TimeSimpleDataset datasets. AUTOAXES_FAR rounding is  assumed for both x- and y-coordindates. 
            </summary>
            <param name="datasets"> The array of dataset used as the basis for the new coordinate system. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in an array of 
             TimeSimpleDataset datasets. 
            </summary>
            <param name="datasets"> The array of dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.TimeSimpleDataset,System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in the supplied 
             TimeSimpleDataset object. 
            </summary>
            <param name="dataset"> The TimeSimpleDataset dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.TimeSimpleDataset)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in the supplied 
             TimeSimpleDataset object. AUTOAXES_FAR rounding is  assumed for both x- and y-coordindates. 
            </summary>
            <param name="dataset"> The TimeSimpleDataset dataset used as the basis for the new coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.TimeSimpleDataset[],System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in an array of 
             TimeSimpleDataset datasets. 
            </summary>
            <param name="datasets"> The array of dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale
             rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.TimeSimpleDataset[])">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in an array of 
             TimeSimpleDataset datasets. AUTOAXES_FAR rounding is  assumed for both x- and y-coordindates. 
            </summary>
            <param name="datasets"> The array of dataset used as the basis for the new coordinate system. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.TimeGroupDataset,System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in the supplied 
             TimeGroupDataset object. 
            </summary>
            <param name="dataset"> The TimeGroupDataset dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.TimeGroupDataset,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in the supplied 
             TimeGroupDataset object. 
            </summary>
            <param name="dataset"> The TimeGroupDataset dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmode"> Sets the auto-scale mode for the x- and y-coordinates. Use one of the  
            auto-scale rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.TimeGroupDataset)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in the 
             supplied TimeGroupDataset object. AUTOAXES_FAR  rounding is assumed for both axes. 
            </summary>
            <param name="dataset"> The TimeGroupDataset dataset used as the basis for the new coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.TimeGroupDataset[],System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in an array of 
             TimeGroupDataset datasets. 
            </summary>
            <param name="datasets"> The array of dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-coordinate. Use one of the  auto-scale 
            rounding mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(com.quinncurtis.chart2dnet.TimeGroupDataset[])">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in an array of 
             TimeGroupDataset datasets. 
            </summary>
            <param name="datasets"> The array of datasets used as the basis for the new coordinate system. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.CalcTimeAutoScale(com.quinncurtis.chart2dnet.ChartDataset,System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in the supplied T
             imeSimpleDataset dataset. 
            </summary>
            <param name="dataset"> The dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-axis. Use one of the  auto-scale rounding 
            mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-axis. Use one of the  auto-scale rounding
             mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.CalcTimeAutoScale(com.quinncurtis.chart2dnet.ChartDataset[],System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object based on the range  of x- and y-values in an array of 
             TimeSimpleDataset datasets. 
            </summary>
            <param name="datasets"> The array of dataset used as the basis for the new coordinate system. </param>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-axis. Use one of the  auto-scale rounding 
            mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-axis. Use one of the  auto-scale rounding
             mode constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetCompatibleAxis(System.Int32)">
            <summary>
             Returns an TimeAxis axis compatible with the time axis of this object. 
            </summary>
            <param name="axis"> Specify the coordinate direction, either x or y,  using one of the axis constants: 
            X_AXIS or Y_AXIS. Current this value is ignored  and the axis returned is always an x-axis. </param>
            <returns> Returns an TimeAxis axis compatible with the time axis of this object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.#ctor(com.quinncurtis.chart2dnet.ChartCalendar,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Double)">
            <summary>
             This constructor creates a new TimeCoordinates object using the specified  starting and ending dates, 
             and the minimum and maximum values for x- and y-axis. A  7 day week and a linear y-axis, time x-axis is assumed. 
            </summary>
            <param name="dstart"> Sets the starting date value for the x-axis of the plotting area physical 
            coordinate system. </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="dstop"> Sets the ending date value for the x-axis of the plotting area physical 
            coordinate system. </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.#ctor(com.quinncurtis.chart2dnet.ChartCalendar,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Double,System.Int32)">
            <summary>
             This constructor creates a new TimeCoordinates object using the specified  starting and ending dates, 
             and the minimum and maximum values for x- and y-axis. Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting date value for the x-axis of the plotting area physical 
            coordinate system. </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="dstop"> Sets the ending date value for the x-axis of the plotting area physical 
            coordinate system. </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system. </param>
            <param name="nweektype"> Specifies the current week mode for calendar calculations. Use one  of the 
            time/date week constants: WEEK_7D or WEEK_5D.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.#ctor(com.quinncurtis.chart2dnet.ChartCalendar,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Double,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new TimeCoordinates object using the specified  starting and ending dates, and 
             the minimum and maximum values for x- and y-axis. Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting date value for the x-axis of the plotting area physical 
            coordinate system. </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="dstop"> Sets the ending date value for the x-axis of the plotting area physical 
            coordinate system. </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system. </param>
            <param name="ntimeaxis"> Specifies whether the time axis is the x-axis or the y-axis. </param>
            <param name="nweektype"> Specifies the current week mode for calendar calculations. Use one  of the 
            time/date week constants: WEEK_7D or WEEK_5D.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.#ctor(System.Int32,System.Int32)">
            <summary>
             This constructor creates a new TimeCoordinates, specifying the  x- and y-coordinate systems, using 
             default values for each. 
            </summary>
            <param name="xscale"> Sets the x-coordinate system to either time, linear or logarithmic scaling. Use one  
            of the scaling constants: TIME_SCALE, LINEAR_SCALE or LOG_SCALE. </param>
            <param name="yscale"> Sets the y-coordinate system to either linear or logarithmic scaling. Use one  of the 
            scaling constants: TIME_SCALE, LINEAR_SCALE or LOG_SCALE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetTimeScaleTransforms(System.Int32,System.Int32)">
            <summary>
             This method specifies the  x- and y-coordinate systems, using default values for each. 
            </summary>
            <param name="xscale"> Sets the x-coordinate system to either time, linear or logarithmic scaling. Use one  
            of the scaling constants: TIME_SCALE, LINEAR_SCALE or LOG_SCALE. </param>
            <param name="yscale"> Sets the y-coordinate system to either linear or logarithmic scaling. Use one  of the 
            scaling constants: TIME_SCALE, LINEAR_SCALE or LOG_SCALE.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.#ctor(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Double,System.Int32,System.Int32)">
            <summary>
             This constructor creates a new TimeCoordinates object using the specified  starting and ending dates, and the 
             minimum and maximum values for x- and y-axis.  A non-24 hour day can be used: 8:30 to 16:30. Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting time of day and date value for the x-axis of the plotting area physical 
            coordinate system. </param>
            <param name="starttime"> Sets the start time used for all days in the plotting area. </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="dstop"> Sets the ending date value for the x-axis of the plotting area physical coordinate system. </param>
            <param name="stoptime"> Sets the stop time used for all days in the plotting area. </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system. </param>
            <param name="ntimeaxis"> Specifies if the x- or y-coordinate is the time axis. Use the X_AXIS or Y_AXIS constant. </param>
            <param name="nweektype"> Specifies the current week mode for calendar calculations. Use one  of the time/date week 
            constants: WEEK_7D or WEEK_5D.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.#ctor(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Double,System.Int32)">
            <summary>
             This constructor creates a new TimeCoordinates object using the specified  starting and ending dates, and the
              minimum and maximum values for x- and y-axis.  A non-24 hour day can be used: for example 8:30 to 16:30. 
              Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting time of day and date value for the x-axis of the plotting area physical 
            coordinate system. </param>
            <param name="starttime"> Sets the start time used for all days in the plotting area. </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="dstop"> Sets the ending date value for the x-axis of the plotting area physical coordinate system. </param>
            <param name="stoptime"> Sets the stop time used for all days in the plotting area. </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system. </param>
            <param name="nweektype"> Specifies the current week mode for calendar calculations. Use one  of the time/date 
            week constants: WEEK_7D or WEEK_5D.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.InitTimeScale(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Double,System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object using the specified  starting and ending dates, and the 
             minimum and maximum values for x- and y-axis.  A non-24 hour day can be used: for example 8:30 to 16:30. 
             Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting time of day and date value for the x-axis of the plotting area 
            physical coordinate system. </param>
            <param name="starttime"> Sets the start time used for all days in the plotting area. </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="dstop"> Sets the ending date value for the x-axis of the plotting area physical coordinate system. </param>
            <param name="stoptime"> Sets the stop time used for all days in the plotting area. </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system. </param>
            <param name="ntimeaxis"> Specifies if the x- or y-coordinate is the time axis. Use the X_AXIS or Y_AXIS constant. </param>
            <param name="nweektype"> Specifies the current week mode for calendar calculations. Use one  of the time/date 
            week constants: WEEK_7D or WEEK_5D.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.InitTimeScale(System.Double,System.Int64,System.Double,System.Double,System.Int64,System.Double,System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object using the specified  starting and ending dates, and the 
             minimum and maximum values for x- and y-axis.  A non-24 hour day can be used: for example 8:30 to 16:30. 
             Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting time of day and date value for the x-axis of the plotting area 
            physical coordinate system. </param>
            <param name="starttime"> Sets the start time used for all days in the plotting area. </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="dstop"> Sets the ending date value for the x-axis of the plotting area physical 
            coordinate system. </param>
            <param name="stoptime"> Sets the stop time used for all days in the plotting area. </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system. </param>
            <param name="ntimeaxis"> Specifies if the x- or y-coordinate is the time axis. Use the X_AXIS or 
            Y_AXIS constant. </param>
            <param name="nweektype"> Specifies the current week mode for calendar calculations. Use one  of the time/date 
            week constants: WEEK_7D or WEEK_5D.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.InitTimeScale(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object using the specified  starting and ending dates, and the 
             minimum and maximum values for x- and y-axis.  A non-24 hour day can be used: for example 8:30 to 16:30. 
             Linear scaling is assumed. 
            </summary>
            <param name="rstart"> Sets the start time used for all days in the plotting area. </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="rstop"> Sets the ending date value for the x-axis of the plotting area physical coordinate system. </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system. </param>
            <param name="ntimeaxis"> Specifies if the x- or y-coordinate is the time axis. Use the X_AXIS or Y_AXIS constant.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetTimeCoordinateBounds(com.quinncurtis.chart2dnet.ChartCalendar,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Double)">
            <summary>
             This method initializes an TimeCoordinates object using the specified  starting and ending dates, and the 
             minimum and maximum values for x- and y-axis.  A non-24 hour day can be used: for example 8:30 to 16:30. 
             Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting time of day and date value for the x-axis of the plotting area 
            physical coordinate system. </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="dstop"> Sets the ending date value for the x-axis of the plotting area physical coordinate system. </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetTimeCoordinateBounds(com.quinncurtis.chart2dnet.ChartCalendar,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Double,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object using the specified  starting and ending dates, and the 
             minimum and maximum values for x- and y-axis.  A non-24 hour day can be used: for example 8:30 to 16:30. 
             Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting time of day and date value for the x-axis of the plotting area 
            physical coordinate system. </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="dstop"> Sets the ending date value for the x-axis of the plotting area physical coordinate system. </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system. </param>
            <param name="nweektype"> Specifies the current week mode for calendar calculations. Use one  of the time/date 
            week constants: WEEK_7D or WEEK_5D. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetTimeCoordinateBounds(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Double,com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Double,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object using the specified  starting and ending dates, and 
             the minimum and maximum values for x- and y-axis.  A non-24 hour day can be used: for example 8:30 to 16:30. 
             Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting time-of-day and date value for the x-axis of the plotting area 
            physical coordinate system. </param>
            <param name="starttod"> Sets the starting time (in msecs) for the range of hours to use for a day </param>
            <param name="y1"> Sets the lower left y-value for the plotting area physical coordinate system. </param>
            <param name="dstop"> Sets the ending date value for the x-axis of the plotting area physical coordinate system. </param>
            <param name="stoptod"> Sets the ending time-of-day (in msecs) for the range of hours to use for a day </param>
            <param name="y2"> Sets the upper right y-value for the plotting area physical coordinate system. </param>
            <param name="nweektype"> Specifies the current week mode for calendar calculations. Use one  of the 
            time/date week constants: WEEK_7D or WEEK_5D. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetScaleX(System.Double,System.Double)">
            <summary>
             Sets the x-coordinate bounds of the TimeCoordinates scale.  Time values are specified using milliseconds. 
            </summary>
            <param name="rX1"> Sets the lower left x-value for the TimeCoordinates scale. </param>
            <param name="rX2"> Sets the upper right x-value for the TimeCoordinates scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetScaleY(System.Double,System.Double)">
            <summary>
             Sets the y-coordinate bounds of the TimeCoordinates scale.  Time values are specified using milliseconds. 
            </summary>
            <param name="rY1"> Sets the lower left y-value for the TimeCoordinates scale. </param>
            <param name="rY2"> Sets the upper right y-value for the TimeCoordinates scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetScaleStartX(System.Double)">
            <summary>
             Sets the lower left x-coordinate of the TimeCoordinates scale.  Time values are specified using milliseconds. 
            </summary>
            <param name="rX1"> Sets the lower left x-value for the TimeCoordinates scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetScaleStopX(System.Double)">
            <summary>
             Sets the upper right x-coordinate of the TimeCoordinates scale.  Time values are specified using milliseconds. 
            </summary>
            <param name="rX2"> Sets the upper right x-value for the TimeCoordinates scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetTimeScaleStart(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the starting value of the TimeCoordinates time scale. 
            </summary>
            <param name="start"> Sets the starting time value for the TimeCoordinates scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetTimeScaleStart(System.Int32,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the starting value of the TimeCoordinates time scale. 
            </summary>
            <param name="axis"> Specifies the time scale axis. </param>
            <param name="start"> Sets the starting time value for the TimeCoordinates scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetTimeScaleStop(System.Int32,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the ending value of the TimeCoordinates time scale. 
            </summary>
            <param name="axis"> Specifies the time scale axis. </param>
            <param name="stop"> Sets the ending time value for the TimeCoordinates scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetTimeScaleStop(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the ending value of the TimeCoordinates time scale. 
            </summary>
            <param name="stop"> Sets the ending time value for the TimeCoordinates scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetTimeScaleStart(System.Int32)">
            <summary>
             This method returns the starting value of the TimeCoordinates time scale. 
            </summary>
            <param name="axis"> Specifies the time scale axis. </param>
            <returns> Returns the starting time value for the TimeCoordinates scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetTimeScaleStop(System.Int32)">
            <summary>
             This method returns the ending value of the TimeCoordinates time scale. 
            </summary>
            <param name="axis"> Specifies the time scale axis. </param>
            <returns> Returns the ending time value for the TimeCoordinates scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetTimeScaleStart">
            <summary>
             This method returns the starting value of the TimeCoordinates time scale. 
            </summary>
            <returns> Returns the starting time value for the TimeCoordinates scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetTimeScaleStop">
            <summary>
             This method returns the ending value of the TimeCoordinates time scale. 
            </summary>
            <returns> Returns the ending time value for the TimeCoordinates scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetScaleStartY(System.Double)">
            <summary>
             Sets the lower left y-coordinate of the TimeCoordinates scale. 
            </summary>
            <param name="rY1"> Sets the lower left y-value for the TimeCoordinates scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetScaleStopY(System.Double)">
            <summary>
             Sets the upper right y-coordinate of the TimeCoordinates scale. 
            </summary>
            <param name="rY2"> Sets the upper right y-value for the TimeCoordinates scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetScaleStartY">
            <summary>
             This method returns the lower left y-value for the plotting area of the physical coordinate system. 
            </summary>
            <returns> Returns the lower left y-value for the plotting area of the physical coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetScaleStopY">
            <summary>
             This method returns the upper right y-value for the plotting area of the physical coordinate system. 
            </summary>
            <returns> Returns the upper right y-value for the plotting area of the physical coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetTimeScale(System.Int32)">
            <summary>
             This method returns the TimeScale object associated with the specified axis. 
            </summary>
            <param name="axis"> Specifies the time scale axis. </param>
            <returns> Returns the TimeScale object associated with the specified axis.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.AutoScale(System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeCoordinates object, running the auto-axis algorithm on  the current minimum 
             and maximum scaling values. Linear scaling is assumed. 
            </summary>
            <param name="nroundmodex"> Sets the auto-scale mode for the x-axis. Use one of the  auto-scale rounding mode 
            constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT. </param>
            <param name="nroundmodey"> Sets the auto-scale mode for the y-axis. Use one of the  auto-scale rounding mode 
            constants: AUTOAXES_FAR, AUTOAXES_NEAR, AUTOAXES_EXACT.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetWeekType(System.Int32)">
            <summary>
             Sets the week type. Use one of the week type constants:  WEEK_5D or WEEK_7D. 
            </summary>
            <param name="weektype"> Sets the week type.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetWeekType">
            <summary>
             This method returns the week type. 
            </summary>
            <returns> Returns the week type.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.CheckValidDate(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method checks to see if the specified date is valid, checking  to see if it within the specified 
             time of day limits. 
            </summary>
            <param name="cdate"> The date that is checked. </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.CheckValidPoint(System.Double,System.Double)">
            <summary>
             This method checks to see if the specified data point is valid, checking  to see if the date component 
             it within the specified time of day limits,  and the numeric component is a valid number. 
            </summary>
            <param name="x"> The x-coordinate that is checked. </param>
            <param name="y"> The y-coordinate that is checked. </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetScaleStartTOD(System.Int64)">
            <summary>
             Sets the starting TOD value for the time scale. The value  is specified in milliseconds. The time 12 
             midnight would have the value 0.  The value 9:30 AM would have the value 9.5(hours)  60(minutes/hour)  
             60(seconds/minute)  1000 (milliseconds/second),  or 34200000. 
            </summary>
            <param name="starttime"> Sets the starting TOD value for the time scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetScaleStopTOD(System.Int64)">
            <summary>
             Sets the ending TOD value for the time scale. The value  is specified in milliseconds. The time 12 
             midnight would have the value 0.  The value 4:00 PM would have the value 16(hours)  60(minutes/hour)  
             60(seconds/minute)  1000 (milliseconds/second),  or 57600000. 
            </summary>
            <param name="stoptime"> Sets the ending TOD value for the time scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetScaleStartTOD">
            <summary>
             This method returns the starting TOD value for the time scale. 
            </summary>
            <returns> stoptime Returns the starting TOD value for the time scale. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetScaleStartTOD(System.Int64)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.GetScaleStopTOD">
            <summary>
             This method returns the ending TOD value for the time scale. 
            </summary>
            <returns> stoptime Returns the ending TOD value for the time scale. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.TimeCoordinates.SetScaleStopTOD(System.Int64)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeCoordinates.SwapScaleOrientation">
            <summary>
             This method swaps the minimum x-value of the coordinate system with the  minimum y-value; and the 
             maximum x-value with the maximum y-value.
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeCoordinates.TimeScaleStart">
            <summary>
             Sets the starting value of the TimeCoordinates time scale. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeCoordinates.TimeScaleStop">
            <summary>
             Sets the ending value of the TimeCoordinates time scale. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeCoordinates.WeekType">
            <summary>
             Sets the week type. Use one of the week type constants:  WEEK_5D or WEEK_7D. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeCoordinates.ScaleStartTOD">
            <summary>
             Sets the starting TOD value for the time scale. The value  is specified in milliseconds. The time 
             12 midnight would have the value 0.  The value 9:30 AM would have the value 9.5(hours)  60(minutes/hour)  
             60(seconds/minute)  1000 (milliseconds/second),  or 34200000. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeCoordinates.ScaleStopTOD">
            <summary>
             Sets the ending TOD value for the time scale. The value  is specified in milliseconds. The time 
             12 midnight would have the value 0.  The value 4:00 PM would have the value 16(hours)  60(minutes/hour)  
             60(seconds/minute)  1000 (milliseconds/second),  or 57600000. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeCoordinates.ScaleStartX">
            <summary>
             Set/Get the left x-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeCoordinates.ScaleStopX">
            <summary>
             Set/Get the right x-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeCoordinates.ScaleStartY">
            <summary>
             Set/Get the lower y-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeCoordinates.ScaleStopY">
            <summary>
             Get/Set the upper y-value for the plotting area of the physical coordinate system. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.TimeGroupDataset">
            <summary>
              Group data is a collection of data, where more than one dependent variable, the x's, corresponds to  
              the independent one, the y's.  The number of columns in this array must be equal to the number of 
              data points, and  the number of rows - to the number of dependent variables or groups.   The 
              TimeGroupDataset class extends the GroupDataset class  so that it can use ChartCalendar values 
              as the x- and y-values. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.ErrorCheck(System.Int32)">
            <summary>
              Checks the TimeGroupDataset object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.InitDefaults">
            <summary>
              Initializes default values for the TimeGroupDataset object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.InitDatasetBase(System.String,System.Int32,System.Int32)">
            <summary>
              An initialization method that sizes the group dataset arrays. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="nrows"> Specifies the number of rows, in the y group data array,  where y has the 
            dimensions [nrows,ncols]. The numberGroups field is set equal  to the nrows value. </param>
            <param name="ncols"> Specifies the number of columns in the y group data array,  where y has the 
            dimensions [nrows,ncols]. The numberDatapoints field is set equal  to the ncols value. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.InitializeData(com.quinncurtis.chart2dnet.ChartCalendar[],System.Double[0:,0:])">
            <summary>
              This method initializes the x- and y-data values  of a time dataset where the x-values are 
              ChartCalendar values  and the y-values are floating point numbers. 
            </summary>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.InitDataset(System.String,com.quinncurtis.chart2dnet.ChartCalendar[],System.Double[0:,0:])">
            <summary>
              This method initializes the name, x- and y-data values  of a time dataset where the x-values are 
              ChartCalendar values  and the y-values are floating point numbers. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.InitDataset(System.String,System.Double[],System.Double[0:,0:])">
            <summary>
              This method initializes the name, x- and y-data values  of a time dataset where the x-values are 
              double representing msecs  and the y-values are floating point numbers. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.InitDataset(System.String,System.Double[],com.quinncurtis.chart2dnet.ChartCalendar[0:,0:])">
            <summary>
              This method initializes the name, x- and y-data values  of a time dataset where the y-values are 
              ChartCalendar values  and the x-values are floating point numbers. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.InitDataset(System.String,com.quinncurtis.chart2dnet.ChartCalendar[],com.quinncurtis.chart2dnet.ChartCalendar[0:,0:])">
            <summary>
              This method initializes the name, x- and y-data values  of a time dataset that where the x- and 
              y-values are ChartCalendar values. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An arra that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.Copy(com.quinncurtis.chart2dnet.TimeGroupDataset)">
            <summary>
              Copies the source dataset. 
            </summary>
            <param name="source"> The source dataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.Clone">
            <summary>
             Returns an object that is a clone of this TimeGroupDataset object. 
            </summary>
            <returns> Returns a clone of this TimeGroupDataset object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.#ctor(System.String,com.quinncurtis.chart2dnet.ChartCalendar[],System.Double[0:,0:])">
            <summary>
              This constructor creates a new, group TimeGroupDataset object where the x-values  are ChartCalendar 
              values and the y-values are floating point numbers. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a group dataset. </param>
            <param name="y"> An array that specifies the y-values of a group dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.#ctor(System.String,com.quinncurtis.chart2dnet.ChartCalendar[],System.Double[])">
            <summary>
              This constructor creates a new, group TimeGroupDataset object where the x-values  are 
              ChartCalendar values and the y-values are floating point numbers. 
              It assumes that initially there is only one group (or row) and the y data values are passed in
              as a 1-D double array, rather than as a 2-D array
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a group dataset. </param>
            <param name="y"> An array that specifies the y-values of a group dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.#ctor(System.String,System.Double[],com.quinncurtis.chart2dnet.ChartCalendar[0:,0:])">
            <summary>
              This constructor creates a new, group TimeGroupDataset object where the y-values  are ChartCalendar 
              values and the x-values are floating point numbers. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a group dataset. </param>
            <param name="y"> An array that specifies the y-values of a group dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.#ctor(System.String,com.quinncurtis.chart2dnet.ChartCalendar[],com.quinncurtis.chart2dnet.ChartCalendar[0:,0:])">
            <summary>
              This constructor creates a new, group TimeGroupDataset object where the x- and y-values  are 
              ChartCalendar values. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a group dataset. </param>
            <param name="y"> An array that specifies the y-values of a group dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new, group TimeGroupDataset object of the specified size. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="nrows"> Number of rows, or groups in the dataset. </param>
            <param name="ncols"> Number of columns, or numDatapoints in the dataset.  </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.#ctor(com.quinncurtis.chart2dnet.CSV,System.String,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new TimeGroupDataset object from a file consisting of comma separated values. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file. </param>
            <param name="rowskip"> Skip this many rows before starting the read operation. </param>
            <param name="columnskip"> For each row of data, skip this many columns before reading the first 
            value from the row.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.#ctor">
            <summary>
             The default constructor for the TimeGroupDataset class. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.SetTimeXDataValue(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32)">
            <summary>
              Sets a time based x-value in a group dataset. 
            </summary>
            <param name="x"> Specifies the new x-value for the data point at the specified index. </param>
            <param name="index"> Specifies the index for the new data value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.GetTimeXDataValue(System.Int32)">
            <summary>
              This method returns a time based x-value in a group datasets. 
            </summary>
            <param name="index"> Specifies the index of the x-value. </param>
            <returns> Returns a time based x-value of the data point at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.SetTimeYDataValue(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.Int32)">
            <summary>
              Sets a time based y-value in a group dataset. 
            </summary>
            <param name="y"> Specifies the new y-value for the data point at the specified index. </param>
            <param name="group"> Specifies the group number for the new data value.</param>
            <param name="index"> Specifies the index for the new data value. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.SetTimeGroupDataColumn(com.quinncurtis.chart2dnet.ChartCalendar,System.Double[],System.Int32)">
            <summary>
              Sets the x- and y-values associated with a group dataset column index. 
            </summary>
            <param name="x"> Specifies the new x-value for the data point at the specified column index. </param>
            <param name="y"> An array that specifies the new y-values for the  group dataset at the specified column index. </param>
            <param name="ncolumn"> Specifies the column index for the new data values.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.AddTimeGroupDataPoints(com.quinncurtis.chart2dnet.ChartCalendar,System.Double[])">
            <summary>
              This method adds a new xy point to a dataset, increasing its size by one. 
            </summary>
            <param name="x"> Specifies the new x-value for the data point at the specified index. </param>
            <param name="y"> Specifies the new y-value for the data point at the specified index. </param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.GetTimeYDataValue(System.Int32,System.Int32)">
            <summary>
              This method returns a time based y-value in a group datasets. 
            </summary>
            <param name="group"> Specifies the group of the y-value. </param>
            <param name="index"> Specifies the index of the y-value. </param>
            <returns> Returns a time based y-value of the data point at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.GetTimeXData">
            <summary>
              This method returns a copy of the xData array, if it is based on time  values. 
            </summary>
            <returns> Returns a copy of the xData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.GetTimeYData">
            <summary>
              This method returns a copy of the yData array, if it is based on time values. 
            </summary>
            <returns> Returns a copy of the yData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.InsertTimeGroupDataPoints(com.quinncurtis.chart2dnet.ChartCalendar,System.Double[],System.Int32)">
            <summary>
              Insert a data point at the specified location, increasing the size of the dataset by one. 
            </summary>
            <param name="x"> The date x-value of the new data point to insert. </param>
            <param name="yvalue"> An array size [numberGroups], of the y-values of the data points to insert </param>
            <param name="insertpoint"> The insertion point of the data. Zero based array indexing  is used, so the 5th data 
            point in the array has an index value of 4.</param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.DeleteTimeGroupDataPoints(System.Int32)">
            <summary>
              Deletes a data point at the specified location, decreasing the size of the dataset by one. 
            </summary>
            <param name="deletepoint"> The delete point. Zero based array indexing  is used, so the 5th data point in the 
            array has an index value of 4.</param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.WriteTimeGroupDataset(com.quinncurtis.chart2dnet.CSV,System.String)">
            <summary>
              This methods will create a text file and output the dataset to that  file in a CSV (Comma Separated Value) 
              format. A CSV file can be read  by popular spreadsheet and word processing programs. Some localization  
              for different operating systems and locales can be handled by the  modifying the default csv (CSV) object.  
              The file can be organized so that  the columns represent groups and the rows represent data values for  
              each group (COLUMN_MAJOR), or the where the rows represent groups  and the columns represent data values 
              for each group (ROW_MAJOR).  Use the CSV.SetOrientation method to initialize the csv argument  for the 
              proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.WriteTimeGroupDataset(com.quinncurtis.chart2dnet.CSV,System.String,System.Boolean)">
            <summary>
              This methods will create a text file and output the dataset to that  file in a CSV (Comma Separated Value) 
              format. A CSV file can be read  by popular spreadsheet and word processing programs. Some localization  
              for different operating systems and locales can be handled by the  modifying the default csv (CSV) object.  
              The file can be organized so that  the columns represent groups and the rows represent data values for  
              each group (COLUMN_MAJOR), or the where the rows represent groups  and the columns represent data values 
              for each group (ROW_MAJOR).  Use the CSV.SetOrientation method to initialize the csv argument  for the 
              proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file.</param>
            <param name="append"> True and if the file exists, data is appended to the file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.ReadTimeGroupDataset(com.quinncurtis.chart2dnet.CSV,System.String,System.Int32,System.Int32)">
            <summary>
              This method initializes the TimeGroupDataset object from a file consisting of comma separated values. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file. </param>
            <param name="rowskip"> Skip this many rows before starting the read operation. </param>
            <param name="columnskip"> For each row of data, skip this many columns before reading the first 
            value from the row.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.CompressTimeGroupDataset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              This methods creates and returns a new dataset that is the data reduced  version of the source dataset. 
              The new, compressed dataset will contain  ((endindex - startindex + 1) / interval) datapoints, 
              except for the DATACOMPRESS_MINMAX  compress algorithm which is the previous formula x 2. 
            </summary>
            <param name="ctypex"> The compression type. Use one of the data compression type constants:  
            DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no compression),  
            DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  (use the average 
            x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and y-value in each interval), 
            DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), and DATACOMPRESS_MINMAX (use the minimum 
            and maximum x- and y-value in each interval). </param>
            <param name="ctypey"> The compression type for the y-values. Use one of the he data compression type constants. </param>
            <param name="interval"> The number of data points in each segment that is reduced to a single 
            datapoint (two  for the DATACOMPRESS_MINMAX compression type) in the compressed dataset. </param>
            <param name="startindex"> The starting point, inclusive, in the source dataset for the data compression. </param>
            <param name="endindex"> The ending index, inclusive, in the source dataset for the data compression. </param>
            <param name="newname"> The string name for the new dataset. </param>
            <returns> Returns the new, compressed TimeGroupDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.CompressTimeGroupDataset(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              This methods creates and returns a new dataset that is the data reduced  version of the source dataset. 
              The size of the new, compressed dataset is not known in advance. 
            </summary>
            <param name="ctypex"> The compression type. Use one of the data compression type constants:  
            DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no compression),  
            DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  (use the average 
            x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and y-value in each interval), 
            DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), and DATACOMPRESS_MINMAX (use the 
            minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX compression type is 
            best used when the compressed data values number more than  1000, where adjacent data values in the 
            rendered chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  compression type will 
            guarantee that the chart displays the same minimums and maximums as the original dataset. </param>
            <param name="ctypey"> An array of compression types for the y-values, one for each group. Use one of 
            the he data compression type constants. </param>
            <param name="interval"> The number of data points in each segment that is reduced to a single 
            datapoint (two  for the DATACOMPRESS_MINMAX compression type) in the compressed dataset. </param>
            <param name="startindex"> The starting point, inclusive, in the source dataset for the data compression. </param>
            <param name="endindex"> The ending index, inclusive, in the source dataset for the data compression. </param>
            <param name="newname"> The string name for the new dataset. </param>
            <returns> Returns the new, compressed TimeGroupDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.CompressTimeFieldGroupDataset(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              This methods creates and returns a new dataset that is the data reduced  version of the source dataset. 
              The size of the new, compressed dataset is not known in advance. 
            </summary>
            <param name="ctypex"> The compression type. Use one of the data compression type constants:  
            DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no compression),  
            DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  (use the average 
            x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and y-value in each interval), 
            DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), and DATACOMPRESS_MINMAX (use the 
            minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX compression type is best 
            used when the compressed data values number more than  1000, where adjacent data values in the rendered 
            chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  compression type will guarantee 
            that the chart displays the same minimum and maximum as the original dataset. </param>
            <param name="ctypey"> An array of compression types for the y-values, one for each group. Use one of the 
            data compression type constants. </param>
            <param name="timefield"> All values with the same timefield value are compressed to a single value. Use one  
            of the time field constants in the ChartCalendar class - ChartObj.YEAR, ChartObj.MONTH,  
            ChartCalendar.WEEK_OF_YEAR, ChartCalendar.WEEK_OF_MONTH, ChartObj.DAY_OF_YEAR, ChartObj.HOUR_OF_DAY, 
            ChartObj.MINUTE. </param>
            <param name="startindex"> The starting point, inclusive, in the source dataset for the data compression. </param>
            <param name="endindex"> The ending index, inclusive, in the source dataset for the data compression. </param>
            <param name="newname"> The string name for the new dataset. </param>
            <returns> Returns the new, compressed TimeGroupDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.CompressTimeFieldGroupDataset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              This methods creates and returns a new dataset that is the data reduced  version of the source dataset. 
              The size of the new, compressed dataset is not known in advance. 
            </summary>
            <param name="ctypex"> The compression type. Use one of the data compression type constants:  DATACOMPRESS_NONE 
            (returns a dataset containing the points in the specified range, no compression),  DATACOMPRESS_SKIP 
            (sample the dataset every interval points), DATACOMPRESS_AVERAGE  (use the average x- and y-value in 
            each interval), DATACOMPRESS_MIN  (use the minimum x- and y-value in each interval), DATACOMPRESS_MAX 
            (use the maximum x- and y-value  in each interval), and DATACOMPRESS_MINMAX (use the minimum and maximum 
            x- and y-value in each interval). </param>
            <param name="ctypey"> The compression type for the y-values. Use one of the he data compression type constants. </param>
            <param name="timefield"> All values with the same timefield value are compressed to a single value. 
            Use one  of the time field constants in the ChartCalendar class - ChartObj.YEAR, ChartObj.MONTH,  
            ChartCalendar.WEEK_OF_YEAR, ChartCalendar.WEEK_OF_MONTH, ChartObj.DAY_OF_YEAR, ChartObj.HOUR_OF_DAY, 
            ChartObj.MINUTE. </param>
            <param name="startindex"> The starting point, inclusive, in the source dataset for the data compression. </param>
            <param name="endindex"> The ending index, inclusive, in the source dataset for the data compression. </param>
            <param name="newname"> The string name for the new dataset. </param>
            <returns> Returns the new, compressed TimeGroupDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeGroupDataset.GetTimeSimpleDataset(System.String,System.Int32)">
            <summary>
              This methods creates a new, TimeSimpleDataset object using the x-values and the y-values
              of the specified group. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="group"> Specifies the y-values to include in the new TimeSimpleDataset. </param>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.TimeLabel">
            <summary>
             The TimeLabel class is used to format ChartCalendar objects  as strings and position in a chart.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeLabel.timeFormat">
            <summary>
             The time label format used to display ChartCalendar values
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeLabel.crossoverTimeFormat">
            <summary>
             Specifies if the time label uses a crossover time format
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeLabel.timeNumericValue">
            <summary>
             Specifies the time value in milliseconds
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeLabel.customTimeFormatString">
            <summary>
             The programmer uses this string to custom format time axis labels.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeLabel.timeFormatStrings">
            <summary>
             An array of format strings, one for each timeFormat constant, used to  convert the time 
             value to a text string.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.#ctor">
            <summary>
             The default TimeLabel constructor.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.ErrorCheck(System.Int32)">
            <summary>
              Checks the TimeLabel object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates)">
            <summary>
              This constructor creates a new TimeLabel object using the specified scale. 
            </summary>
            <param name="transform"> The text object is placed in the coordinate system defined by transform.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,com.quinncurtis.chart2dnet.ChartCalendar,System.Int32)">
            <summary>
              This constructor creates a new TimeLabel object using the specified scale,  and initializes it with the 
              specified calendar value and format. 
            </summary>
            <param name="transform"> The text object is placed in the coordinate system defined by transform. </param>
            <param name="date"> The calendar value used to initialize the label. </param>
            <param name="timeformat"> The format used to convert the calendar value to a text string. Use one  
            of the calendar format constants, TIMEDATEFORMAT_XXX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.#ctor(System.Int32)">
            <summary>
              This constructor creates a new TimeLabel object using the specified format. 
            </summary>
            <param name="timeformat"> The format used to convert the calendar value to a text string. Use one  of 
            the calendar format constants, TIMEDATEFORMAT_XXX.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.#ctor(com.quinncurtis.chart2dnet.PhysicalCoordinates,System.Drawing.Font,com.quinncurtis.chart2dnet.ChartCalendar,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
              This constructor creates a new TimeLabel object using the specified scale,  and initializes it with the 
              specified calendar value and format. 
            </summary>
            <param name="transform"> The text object is placed in the coordinate system defined by transform. </param>
            <param name="tfont"> A reference to a Font object. </param>
            <param name="date"> The calendar value used to initialize the label. </param>
            <param name="x"> Specifies the x-value of the text position </param>
            <param name="y"> Specifies the y-value of the text position </param>
            <param name="npostype"> Specifies the if the position of the text is specified in  physical coordinates, 
            normalized coordinates or window device coordinates.  Use one of the position constants: DEV_POS, PHYS_POS, 
            NORM_GRAPH_POS, NORM_PLOT_POS. </param>
            <param name="timeformat"> The format used to convert the calendar value to a text string. Use one  of the 
            calendar format constants, TIMEDATEFORMAT_XXX. </param>
            <param name="xjust"> Specifies the horizontal justification of the text. Use one of the text  justification 
            constants: JUSTIFY_MIN, JUSTIFY_CENTER or JUSTIFY_MAX. </param>
            <param name="yjust"> Specifies the vertical justification of the text. Use one of the text  justification 
            constants: JUSTIFY_MIN, JUSTIFY_CENTER or JUSTIFY_MAX. </param>
            <param name="rotation"> The rotation (-360 to 360 degrees) of the text in the normal viewing plane.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.InitDefaults">
            <summary>
              Initializes default values for the class.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.InitTimeFormatArray">
            <summary>
             Initializes the time format array with the strings used to convert  ChartCalendar values to text strings.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.Copy(com.quinncurtis.chart2dnet.TimeLabel)">
            <summary>
              Copies the source TimeLabel object. 
            </summary>
            <param name="source"> The source TimeLabel object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.Clone">
            <summary>
             Returns an object that is a clone of this TimeLabel object. 
            </summary>
            <returns> Returns a clone of this TimeLabel object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.DateToASCII(com.quinncurtis.chart2dnet.ChartCalendar,System.Int32,System.String)">
            <summary>
              Converts a Gregorian calendar date value into a formatted date string. 
            </summary>
            <param name="tdate"> The date value that is to be converted into a formatted date string. </param>
            <param name="ndateformat"> Specifies a predefined date format. Use one of the  Time/Date axis time 
            label constants in the GRID_MINOR class. </param>
            <param name="suserdefinedformatstring1"> If this string is not empty it is assumed  to be a 
                   time/date format string in a form compatible with the  TimeDate.ToString method. 
                   It is used to convert the tdate time/date value  into a formatted string.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.GetTimeString(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method converts a ChartCalendar value to a string,  using the current time format. 
            </summary>
            <param name="tdate"> The date that is converted. </param>
            <returns> Returns the ChartCalendar value as a formatted string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.MakeLabel">
            <summary>
             This method converts current time value to a formatted string,  using the current time format, 
             storing the result in the underlying  ChartLabel.ChartText.textString
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.MakeTimeLabel">
            <summary>
             This method converts current time value to a formatted string,  using the current time format, 
             storing the result in the underlying  ChartLabel.ChartText.textString
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.GetTextString">
            <summary>
             This method returns current time value as a formatted string. 
            </summary>
            <returns> This method returns current time value as a formatted string.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.Draw(System.Drawing.Graphics)">
            <summary>
              The draw method for this class. It converts the time/date value to a text string,  creates a 
              rotated font transform, calculates  the starting position of the justified text string, sets 
              foreground and  background colors, then draws the string to the specified graphics context. 
            </summary>
            <param name="g2"> The graphics context.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.GetTimeValue">
            <summary>
             Returns the current time value as a ChartCalendar date. 
            </summary>
            <returns> Returns the current time value as a ChartCalendar date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.SetTimeValue(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the current time value using a ChartCalendar date. 
            </summary>
            <param name="tdate"> The time value of the label. </param>
            <returns> Sets the current time value using a ChartCalendar date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.GetTimeFormat">
            <summary>
             Returns the current time format. 
            </summary>
            <returns> Returns the current time format.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.SetTimeFormat(System.Int32)">
            <summary>
             Sets the current time format. Use one of the time format constants: TIMEDATEFORMAT_XXX. 
            </summary>
            <param name="nformat"> Sets the current time format.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.GetCrossoverTimeFormat">
            <summary>
             Returns the current crossover time format. 
            </summary>
            <returns> Returns the current crossover time format.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.SetCrossoverTimeFormat(System.Int32)">
            <summary>
             Sets the current crossover time format. Use one of the time format constants: TIMEDATEFORMAT_XXX. 
            </summary>
            <param name="nformat"> Sets the current time format.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.GetTimeNumericValue">
            <summary>
             Returns the current time value in milliseconds. 
            </summary>
            <returns> Returns the current time value in milliseconds.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.SetTimeNumericValue(System.Double)">
            <summary>
             Sets the current time value using milliseconds. 
            </summary>
            <param name="rvalue"> Sets the current time value using milliseconds.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.SetTimeFormatStrings(System.Int32,System.String)">
            <summary>
             This methods sets the time/date format string at a specific index  in the timeFormatString array. 
            </summary>
            <param name="index"> The index of the string to set. </param>
            <param name="formatstring1"> Specifies the new time/date format string.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.GetTimeFormatStrings(System.Int32)">
            <summary>
             This methods returns the time/date format string at a specific index.  in the timeFormatString array. 
            </summary>
            <param name="index"> The index of the string to return. </param>
            <returns> Returns the time/date format string at a specific index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.SetCustomTimeFormatString(System.String)">
            <summary>
             This methods sets the custom format string for converting ChartCalendar  dates to text strings. 
             If the custom format string is not empty, it  is overrides the timeFormat value and the custom string 
             is used to format  the calendar values. 
            </summary>
            <param name="formatstring1"> Specifies the custom time/date format string.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeLabel.GetCustomTimeFormatStrings">
            <summary>
             This methods returns the custom format string for converting ChartCalendar  dates to text strings. 
             If the custom format string is not empty, it  is overrides the timeFormat value and the custom string 
             is used to format  the calendar values. 
            </summary>
            <returns> Returns the custom time/date format string.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeLabel.TimeValue">
            <summary>
             Set/Get the current time value as a ChartCalendar date. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeLabel.TimeFormat">
            <summary>
             Set/Get the current time format. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeLabel.CrossoverTimeFormat">
            <summary>
             Set/Get the current crossover time format. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeLabel.TimeNumericValue">
            <summary>
             Set/Get the current time value in milliseconds. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.TimeScale">
            <summary>
              The TimeScale class implements a time based coordinate system for a single  coordinate, x or y. 
              Two such scales are used to provide the scaling routines  for x and/or y in an PhysicalCoordinates 
              derived class, TimeCoordinates, for example.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeScale.weekType">
            <summary>
             Specifies the current week mode for calendar calculations. Use one of the time/date  week constants: 
             WEEK_7D or WEEK_5D.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeScale.timeAxis">
            <summary>
             Specifies the current time axis. This must be the X_AXIS at this time.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeScale.countedDays">
            <summary>
             Specifies the number of full days in the current time axis.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeScale.millisecondsPerDay">
            <summary>
             The number of seconds per day. The default value assumes a 24 hour day, it can be less
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeScale.totalMilliseconds">
            <summary>
             The number of seconds in represented by the time axis range. The default  value assumes a 24 hour day.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeScale.scaleDateStart">
            <summary>
             The starting calendar value for the time axis.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeScale.scaleDateStop">
            <summary>
             The ending calendar value for the time axis.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeScale.scaleStartTOD">
            <summary>
             The starting time-of-day value for non-24 hour days.
            </summary>
        </member>
        <member name="F:com.quinncurtis.chart2dnet.TimeScale.scaleStopTOD">
            <summary>
             The ending time-of-day value for non-24 hour days.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.InitDefaults">
            <summary>
             Initializes default values for the TimeScale object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.ErrorCheck(System.Int32)">
            <summary>
              Checks the current scale object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.Copy(com.quinncurtis.chart2dnet.TimeScale)">
            <summary>
              Copies the source scale. 
            </summary>
            <param name="source"> The source scale object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.Clone">
            <summary>
             Returns an object that is a clone of this TimeScale object. 
            </summary>
            <returns> Returns a clone of this TimeScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.#ctor">
            <summary>
             The default TimeScale constructor . 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.#ctor(System.Int32)">
            <summary>
             An TimeScale constructor is used to initialize the scale for a specific  axis. 
            </summary>
            <param name="timeaxis"> Specifies what axis the time scale is for. Use one of the  axis constants: 
            X_AXIS or Y_AXIS.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.#ctor(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             An TimeScale constructor is used to initialize the scale using  a starting date and an ending date. 
             By default the scale is initialized  for the X_AXIS. 
            </summary>
            <param name="startdate"> The starting date of the scale. </param>
            <param name="stopdate"> The ending date of the scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.#ctor(System.Int32,com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             An TimeScale constructor is used to initialize the scale using  a starting date and an ending date. 
            </summary>
            <param name="timeaxis"> Specifies what axis the time scale is for. Use one of the  axis constants: 
            X_AXIS or Y_AXIS. </param>
            <param name="startdate"> The starting date of the scale. </param>
            <param name="stopdate"> The ending date of the scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.#ctor(System.Int64,System.Int64)">
            <summary>
             An TimeScale constructor is used to initialize the scale using  a starting date and an ending date, 
             both specified in milliseconds .  By default the scale is initialized for the X_AXIS. 
            </summary>
            <param name="nstartdate"> The starting date of the scale. </param>
            <param name="nstopdate"> The ending date of the scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.#ctor(System.Int32,System.Int64,System.Int64)">
            <summary>
             An TimeScale constructor is used to initialize the scale using  a starting date and an ending date, 
             both specified in milliseconds . 
            </summary>
            <param name="timeaxis"> Specifies what axis the time scale is for. Use one of the  axis constants: 
            X_AXIS or Y_AXIS. </param>
            <param name="nstartdate"> The starting date of the scale. </param>
            <param name="nstopdate"> The ending date of the scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.GetCompatibleAutoScale">
            <summary>
             This method returns an AutoScale object that is compatible  with this TimeScale object, an 
             TimeAutoScale object. 
            </summary>
            <returns> Returns an AutoScale object that is compatible  with this TimeScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.GetCompatibleAxis">
            <summary>
             This method returns an Axis object that is compatible  with this TimeScale object, an TimeAxis object. 
            </summary>
            <returns> Returns an Axis object that is compatible  with this TimeScale object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.TimeValueGood(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method checks to see if the specified date is valid, checking  to see if it within the 
             specified time of day limits. 
            </summary>
            <param name="cdate"> The date that is checked. </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.TimeValueGood(System.Int64)">
            <summary>
             This method checks to see if the specified date is valid, checking  to see if it within the 
             specified time of day limits. 
            </summary>
            <param name="ndate"> The date, in milliseconds, that is checked. </param>
            <returns> Returns true if the date is valid.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.CheckTimeValue(System.Int64)">
            <summary>
             This method checks to see if the specified date is valid and returns  a double values that 
             represents the number of milliseconds in the date  if the date is valid, or the 
             ChartSupport.rBarDataValue otherwise. 
            </summary>
            <param name="ndate"> The date, in milliseconds, that is checked. </param>
            <returns> Returns ChartSupport.rBadDataValue if the date  is bad.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.CheckTimeValue(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method checks to see if the specified date is valid and returns  a double values that 
             represents the number of milliseconds in the date  if the date is valid,, or the 
             ChartSupport.rBarDataValue otherwise. 
            </summary>
            <param name="cdate"> The date that is checked. </param>
            <returns> Returns ChartSupport.rBadDataValue if the date  is bad.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.PhysToWorkingScale(System.Double)">
            <summary>
             This method converts an x- or y-coordinate from physical coordinates to working coordinates. 
            </summary>
            <param name="v"> The coordinate value that is converted from physical coordinates to working coordinates. </param>
            <returns> Returns the value of the coordinate in working coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.WorkingToPhysScale(System.Double)">
            <summary>
             This method converts an x- or y-coordinate from working coordinates to physical coordinates. 
            </summary>
            <param name="v"> The coordinate value that is converted from working coordinates to physical coordinates. </param>
            <returns> Returns the value of the coordinate in physical coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.PhysToWorkingScale(System.Int64)">
            <summary>
             This method converts an x- or y-coordinate from physical coordinates to working coordinates. 
            </summary>
            <param name="v"> The coordinate value that is converted from physical coordinates to working coordinates. </param>
            <returns> Returns the value of the coordinate in working coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.PhysToWorkingScale(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             This method converts an x- or y-coordinate from physical coordinates to working coordinates. 
            </summary>
            <param name="tval"> The coordinate value that is converted from physical coordinates to working coordinates. </param>
            <returns> Returns the value of the coordinate in working coordinates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.WorkingToPhysScale(com.quinncurtis.chart2dnet.ChartCalendar,System.Double)">
            <summary>
             This method converts an x- or y-coordinate from working coordinates to physical coordinates. 
            </summary>
            <param name="v"> The coordinate value that is converted from working coordinates to physical coordinates. </param>
            <param name="d"> Returns the value of the coordinate in physical coordinates as a ChartCalendar date.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.SetTimeScale(com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,com.quinncurtis.chart2dnet.ChartCalendar,System.Int64,System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeScale object using the specified  starting and ending dates, and the 
             minimum and maximum values for x- and y-axis.  A non-24 hour day can be used: for example 8:30 to 16:30. 
             Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting time of day and date value. </param>
            <param name="starttime"> Sets the start TOD value for non-24 hour days. </param>
            <param name="dstop"> Sets the ending date value. </param>
            <param name="stoptime"> Sets the stop TOD value for non-24 hour days. </param>
            <param name="ntimeaxis"> Specifies if the x- or y-coordinate is the time axis. Use the X_AXIS or Y_AXIS 
            constant. </param>
            <param name="nweektype"> Specifies the current week mode for calendar calculations. 
            Use one  of the time/date week constants: WEEK_7D or WEEK_5D.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.SetTimeScale(System.Double,System.Int64,System.Double,System.Int64,System.Int32,System.Int32)">
            <summary>
             This method initializes an TimeScale object using the specified  starting and ending dates, and the minimum 
             and maximum values for x- and y-axis.  A non-24 hour day can be used: for example 8:30 to 16:30. 
             Linear scaling is assumed. 
            </summary>
            <param name="dstart"> Sets the starting time of day and date value. </param>
            <param name="starttime"> Sets the start TOD value for non-24 hour days. </param>
            <param name="dstop"> Sets the ending date value. </param>
            <param name="stoptime"> Sets the stop TOD value for non-24 hour days. </param>
            <param name="ntimeaxis"> Specifies if the x- or y-coordinate is the time axis. Use the X_AXIS or Y_AXIS constant. </param>
            <param name="nweektype"> Specifies the current week mode for calendar calculations. Use one  of the time/date 
            week constants: WEEK_7D or WEEK_5D.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.AdjustTimeScaleEndpoints">
            <summary>
             This method adjust the starting and ending dates of the scale, making  sure that the dates do not fall on a 
             weekend if the WEEK_5D mode is set.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.CoordinateAdd(System.Double,System.Double)">
            <summary>
             This method adds two values in the current physical coordinates.  This function is needed because time 
             coordinates  do not have to be continuous. The CoordinateAdd method takes into account any  
             discontinuities in the coordinate system, weekends for example in time coordinates  that 
             use a 5 day week mode. 
            </summary>
            <param name="rdatevalue1"> The source coordinate value that is added to. </param>
            <param name="rsecs"> This value is added to the source value, in milliseconds. </param>
            <returns> Returns the sum of source + addvalue1, taking into account discontinuities in the  
            coordinate system.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.CalendarSecsDiff(com.quinncurtis.chart2dnet.ChartCalendar,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Calculates the number of seconds between two ChartCalendar  dates, taking into account if the 5- or 7-day 
             weeks, and days that have  less than 24 hours. 
            </summary>
            <param name="datestart"> The starting date. </param>
            <param name="datestop"> The ending date. </param>
            <returns> Returns the number of seconds between the dstop and dstart dates.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.ConvertXYCoordToTime(System.Int64)">
            <summary>
             This method converts an xy coordinate in the plotting area into a time/date  value. 
            </summary>
            <param name="x"> The coordinate that corresponds to a time coordinate. </param>
            <returns> Returns the time/date value corresponding to x.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.SetScaleStartTOD(System.Int64)">
            <summary>
             Sets the starting TOD value for the time scale. The value  is specified in milliseconds. The time 12 midnight 
             would have the value 0.  The value 9:30 AM would have the value 9.5(hours) x 60(minutes/hour) x 
             60(seconds/minute)x  1000 (milliseconds/second),  or 34200000. 
            </summary>
            <param name="starttime"> Sets the starting TOD value for the time scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.SetScaleStopTOD(System.Int64)">
            <summary>
             Sets the ending TOD value for the time scale. The value  is specified in milliseconds. The time 12 midnight 
             would have the value 0.  The value 4:00 PM would have the value 16(hours) x 60(minutes/hour) x 
             60(seconds/minute) x 1000 (milliseconds/second),  or 57600000. 
            </summary>
            <param name="stoptime"> Sets the ending TOD value for the time scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.GetScaleStartTOD">
            <summary>
             This method returns the starting TOD value for the time scale. 
            </summary>
            <returns> stoptime Returns the starting TOD value for the time scale. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.TimeScale.SetScaleStartTOD(System.Int64)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.GetScaleStopTOD">
            <summary>
             This method returns the ending TOD value for the time scale. 
            </summary>
            <returns> stoptime Returns the ending TOD value for the time scale. </returns>
            <see cref="M:com.quinncurtis.chart2dnet.TimeScale.SetScaleStopTOD(System.Int64)"/>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.SetScaleDateStart(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the starting date of the time scale. 
            </summary>
            <param name="startdate"> The starting date of the scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.SetScaleDateStop(com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
             Sets the ending date of the time scale. 
            </summary>
            <param name="stopdate"> The ending date of the scale.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.GetScaleDateStart">
            <summary>
             This method returns the starting date of the time scale. 
            </summary>
            <returns> Returns the starting date of the scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.GetScaleDateStop">
            <summary>
             This method returns the ending date of the time scale. 
            </summary>
            <returns> Returns the ending date of the scale.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.SetWeekType(System.Int32)">
            <summary>
             Sets the week type. Use one of the week type constants:  WEEK_5D or WEEK_7D. 
            </summary>
            <param name="weektype"> Sets the week type.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.GetWeekType">
            <summary>
             This method returns the week type. 
            </summary>
            <returns> Returns the week type.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.GetCountedDays">
            <summary>
             This method returns the number of full days between the starting and ending date. 
            </summary>
            <returns> Returns the number of full days between the starting and ending date.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.GetMillisecondsPerDay">
            <summary>
             This method returns the number of seconds in a day, taking into account non-24 hour  day modes. 
            </summary>
            <returns> Returns the number of seconds in a day.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeScale.GetTotalMilliseconds">
            <summary>
             This method returns the total number of milliseconds in the scale, taking into account non-24 hour  day modes. 
            </summary>
            <returns> This method returns the total number of milliseconds in the scale.</returns>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeScale.ScaleDateStart">
            <summary>
             Sets the starting value of the TimeCoordinates time scale. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeScale.ScaleDateStop">
            <summary>
             Sets the ending value of the TimeCoordinates time scale. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeScale.ScaleDateMin">
            <summary>
             Sets the minimum value of the TimeCoordinates time scale. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeScale.ScaleDateMax">
            <summary>
             Sets the maximum value of the TimeCoordinates time scale. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeScale.WeekType">
            <summary>
             Sets the week type. Use one of the week type constants:  WEEK_5D or WEEK_7D. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeScale.ScaleStartTOD">
            <summary>
             Sets the starting TOD value for the time scale. The value  is specified in milliseconds. The time 12 
             midnight would have the value 0.  The value 9:30 AM would have the value 9.5(hours) x 60(minutes/hour) x 
             60(seconds/minute) x 1000 (milliseconds/second),  or 34200000. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeScale.ScaleStopTOD">
            <summary>
             Sets the ending TOD value for the time scale. The value  is specified in milliseconds. The time 12 
             midnight would have the value 0.  The value 4:00 PM would have the value 16(hours) x 60(minutes/hour) x 
             60(seconds/minute) x 1000 (milliseconds/second),  or 57600000. 
            </summary>
        </member>
        <member name="P:com.quinncurtis.chart2dnet.TimeScale.IsContinuousTime">
            <summary>
             Returns true if the time scale has continuous time. 
            </summary>
        </member>
        <member name="T:com.quinncurtis.chart2dnet.TimeSimpleDataset">
            <summary>
              A simple dataset class  encapsulates x- and y-data values that are to be used  as source of chart 
              information. Copies of the original data  arrays are stored. The original source data can be deleted once  
              the dataset is created. If you want to make any changes to the data,  you must change the data in the 
              dataset, not the original source data.   The TimeSimpleDataset class extends the SimpleDataset class  
              so that it can use ChartCalendar values as the x- and y-values. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.ErrorCheck(System.Int32)">
            <summary>
              Checks the dataset object for common errors. 
            </summary>
            <param name="nerror"> Current error state </param>
            <returns> Returns an error code.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.InitDefaults">
            <summary>
              Initializes default values for the TimeSimpleDataset object.
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.InitDatasetBase(System.String,System.Int32)">
            <summary>
              A TimeSimpleDataset initialization method that initializes the name, x- and y-data arrays  of a simple dataset. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="n"> Specifies the number of xy data point pairs in x and y. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.InitializeData(com.quinncurtis.chart2dnet.ChartCalendar[],System.Double[])">
            <summary>
              an SimpleDataset initialization method that initializes the x- and y-data values  of a simple dataset. 
            </summary>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.InitDataset(System.String,com.quinncurtis.chart2dnet.ChartCalendar[],System.Double[])">
            <summary>
              A TimeSimpleDataset initialization method that initializes the name, x- and y- values  of a simple 
              dataset. The x-values use ChartCalendar dates and the y-values are floating  point. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.InitDataset(System.String,com.quinncurtis.chart2dnet.ChartCalendar[],System.Double[],System.Int32)">
            <summary>
              A TimeSimpleDataset initialization method that initializes the name, x- and y- values  of a simple 
              dataset. The x-values use ChartCalendar dates and the y-values are floating  point. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array the y-values of a dataset. </param>
            <param name="n"> Number of datapoints. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.InitDataset(System.String,System.Double[],System.Double[])">
            <summary>
              A TimeSimpleDataset initialization method that initializes the name, x- and y- values  of a simple dataset. 
              Doubles are used for x and y. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.InitDataset(System.String,System.Double[],com.quinncurtis.chart2dnet.ChartCalendar[])">
            <summary>
              A TimeSimpleDataset initialization method that initializes the name, x- and y- values  of a simple dataset. 
              The y-values use ChartCalendar dates and the x-values are floating  point. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.InitDataset(System.String,com.quinncurtis.chart2dnet.ChartCalendar[],com.quinncurtis.chart2dnet.ChartCalendar[])">
            <summary>
              A TimeSimpleDataset initialization method that initializes the name, x- and y- values  of a simple dataset. 
              The x-values and y-values use ChartCalendar dates. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.Copy(com.quinncurtis.chart2dnet.TimeSimpleDataset)">
            <summary>
              Copies the source dataset. 
            </summary>
            <param name="source"> The source dataset object.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.Clone">
            <summary>
             Returns an object that is a clone of this TimeSimpleDataset object. 
            </summary>
            <returns> Returns a clone of this TimeSimpleDataset object.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.#ctor(System.String,System.Double[],com.quinncurtis.chart2dnet.ChartCalendar[])">
            <summary>
              This constructor initializes the name, x- and y- values  of a simple dataset. The y-values use 
              ChartCalendar dates and the x-values are floating  point. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.#ctor(System.String,com.quinncurtis.chart2dnet.ChartCalendar[],System.Double[])">
            <summary>
              This constructor initializes the name, x- and y- values  of a simple dataset. The x-values use 
              ChartCalendar dates and the y-values are floating  point. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.#ctor(System.String,System.Double[],System.Double[])">
            <summary>
              This constructor initializes the name, x- and y- values  of a simple dataset. The x-values use 
              ChartCalendar dates and the y-values are floating  point. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.#ctor(System.String,com.quinncurtis.chart2dnet.ChartCalendar[],com.quinncurtis.chart2dnet.ChartCalendar[])">
            <summary>
              This constructor initializes the name, x- and y- values  of a simple dataset. The x-values and y-values 
              use ChartCalendar dates. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="x"> An array that specifies the x-values of a dataset. </param>
            <param name="y"> An array that specifies the y-values of a dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.#ctor(com.quinncurtis.chart2dnet.CSV,System.String,System.Int32,System.Int32)">
            <summary>
              This constructor creates a new TimeSimpleDataset object from a file consisting of comma separated values. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file. </param>
            <param name="rowskip"> Skip this many rows before starting the read operation. </param>
            <param name="columnskip"> For each row of data, skip this many columns before reading the first value 
            from the row.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.#ctor(System.String,System.Int32)">
            <summary>
              This constructor creates an uninitialized dataset of the specified size. The x- and y- values
              of the dataset must be initialized before any auto-scale or any auto-axes routines
              are called using the dataset.
               The x-values use ChartCalendar dates and the y-values are floating  point. 
            </summary>
            <param name="sname"> Specifies the name of the dataset. </param>
            <param name="n"> Specifies the number of datapoints in the dataset. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.#ctor">
            <summary>
             The default SimpleDataset constructor. 
            </summary>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.SetTimeXDataValue(System.Int32,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              Sets a ChartCalendar x-value at the specified index. 
            </summary>
            <param name="index"> Specifies the index for the new data value.</param>
            <param name="x"> Specifies the new x-value for the data point at the specified index. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.SetTimeYDataValue(System.Int32,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              Sets a ChartCalendar y-value at the specified index. 
            </summary>
            <param name="index"> Specifies the index for the new data value.</param>
            <param name="y"> Specifies the new y-value for the data point at the specified index. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.SetTimeDataPoint(System.Int32,com.quinncurtis.chart2dnet.ChartCalendar,System.Double)">
            <summary>
              Sets a data point (ChartCalendar x-value, floating point y-value)  at the specified index. 
            </summary>
            <param name="index"> Specifies the index for the new data value.</param>
            <param name="x"> Specifies the new x-value for the data point at the specified index. </param>
            <param name="y"> Specifies the new y-value for the data point at the specified index. </param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.SetTimeDataPoint(System.Int32,System.Double,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              Sets a data point (floating point x-value, ChartCalendar y-value)  at the specified index. 
            </summary>
            <param name="x"> Specifies the new x-value for the data point at the specified index. </param>
            <param name="y"> Specifies the new y-value for the data point at the specified index. </param>
            <param name="index"> Specifies the index for the new data value.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.AddTimeDataPoint(com.quinncurtis.chart2dnet.ChartCalendar,System.Double)">
            <summary>
              This method adds a new data point (ChartCalendar x-value, floating point y-value)  at the end of the 
              dataset, increasing its size by one. 
            </summary>
            <param name="x"> Specifies the new x-value for the data point at the specified index. </param>
            <param name="y"> Specifies the new y-value for the data point at the specified index.</param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.AddTimeDataPoint(System.Double,com.quinncurtis.chart2dnet.ChartCalendar)">
            <summary>
              This method adds a new data point (floating point x-value, ChartCalendar y-value)  at the end of the 
              dataset, increasing its size by one. 
            </summary>
            <param name="x"> Specifies the new x-value for the data point at the specified index. </param>
            <param name="y"> Specifies the new y-value for the data point at the specified index.</param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.GetTimeXDataValue(System.Int32)">
            <summary>
              This method returns the ChartCalendar x-value at the specified index. 
            </summary>
            <param name="index"> Specifies the index of the x-value. </param>
            <returns> Returns the x-value of the data point at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.GetTimeYDataValue(System.Int32)">
            <summary>
              This method returns the ChartCalendar y-value at the specified index. 
            </summary>
            <param name="index"> Specifies the index of the y-value. </param>
            <returns> Returns the y-value of the data point at the specified index.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.GetTimeXData">
            <summary>
              This method returns a reference to the xData array.  If the dataset uses ChartCalendar values  
              for x-values the xData array contains the equivalent seconds for each date. 
            </summary>
            <returns> Returns a reference to the xData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.GetTimeYData">
            <summary>
              This method returns a reference to the yData array.  If the dataset uses ChartCalendar values  
              for y-values the yData array contains the equivalent seconds for each date. 
            </summary>
            <returns> Returns a reference to the yData array.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.InsertTimeDataPoint(com.quinncurtis.chart2dnet.ChartCalendar,System.Double,System.Int32)">
            <summary>
              Insert a data point at the specified location, increasing the size of the dataset by one. 
            </summary>
            <param name="x"> The date x-value of the point to insert. </param>
            <param name="y"> The y-value of the point to insert </param>
            <param name="insertpoint"> The insertion point of the data. Zero based array indexing  is used, so the 
            5th data point in the array has an index value of 4.</param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.DeleteTimeDataPoint(System.Int32)">
            <summary>
              Deletes a data point at the specified location, decreasing the size of the dataset by one. 
            </summary>
            <param name="deletepoint"> The delete point. Zero based array indexing  is used, so the 5th data point 
            in the array has an index value of 4.</param>
            <returns> Returns the value of the numberDatapoints field.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.WriteTimeSimpleDataset(com.quinncurtis.chart2dnet.CSV,System.String)">
            <summary>
              This methods will create a text file and output the TimeSimpleDataset to that file in a CSV (Comma 
              Separated Value) format. A CSV file can be read  by popular spreadsheet and word processing programs. 
              Some localization  for different operating systems and locales can be handled by the  modifying the default 
              csv (CSV) object.  The file can be organized so that  the columns represent groups and the rows represent 
              data values for  each group (COLUMN_MAJOR), or the where the rows represent groups  and the columns 
              represent data values for each group (ROW_MAJOR).  Use the CSV.SetOrientation method to initialize 
              the csv argument  for the proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.WriteTimeSimpleDataset(com.quinncurtis.chart2dnet.CSV,System.String,System.Boolean)">
            <summary>
              This methods will create a text file and output the TimeSimpleDataset to that file in a CSV (Comma 
              Separated Value) format. A CSV file can be read  by popular spreadsheet and word processing programs. 
              Some localization  for different operating systems and locales can be handled by the  modifying the 
              default csv (CSV) object.  The file can be organized so that  the columns represent groups and the 
              rows represent data values for  each group (COLUMN_MAJOR), or the where the rows represent groups  
              and the columns represent data values for each group (ROW_MAJOR).  Use the CSV.SetOrientation 
              method to initialize the csv argument  for the proper data orientation. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file.</param>
            <param name="append"> True and if the file exists, data is appended to the file.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.ReadTimeSimpleDataset(com.quinncurtis.chart2dnet.CSV,System.String,System.Int32,System.Int32)">
            <summary>
              This method initializes the TimeSimpleDataset object from a file consisting of comma separated values. 
            </summary>
            <param name="csv"> An instance of an CSV object. </param>
            <param name="filename"> The name of the file. </param>
            <param name="rowskip"> Skip this many rows before starting the read operation. </param>
            <param name="columnskip"> For each row of data, skip this many columns before reading the first value 
            from the row.</param>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.CompressTimeSimpleDataset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              This methods creates and returns a new dataset that is the data reduced  version of the source dataset. 
              The size of the new, compressed dataset is not known in advance. 
            </summary>
            <param name="ctypex"> The compression type. Use one of the data compression type constants:  
            DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no compression),  
            DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  (use the average
             x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and y-value in each interval), 
             DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), and DATACOMPRESS_MINMAX (use the 
             minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX compression type is best 
             used when the compressed data values number more than  1000, where adjacent data values in the rendered 
             chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  compression type will guarantee 
             that the chart displays the same minimums and maximums as the original dataset. </param>
            <param name="ctypey"> The compression type for the y-values. Use one of the he data compression type 
            constants. </param>
            <param name="interval"> The number of data points in each segment that is reduced to a single datapoint 
            (two  for the DATACOMPRESS_MINMAX compression type) in the compressed dataset. </param>
            <param name="startindex"> The starting point, inclusive, in the source dataset for the data compression. </param>
            <param name="endindex"> The ending index, inclusive, in the source dataset for the data compression. </param>
            <param name="newname"> The string name for the new dataset. </param>
            <returns> Returns the new, compressed TimeSimpleDataset.</returns>
        </member>
        <member name="M:com.quinncurtis.chart2dnet.TimeSimpleDataset.CompressTimeFieldSimpleDataset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              This methods creates and returns a new dataset that is the data reduced  version of the source dataset. 
              The size of the new, compressed dataset is not known in advance. 
            </summary>
            <param name="ctypex"> The compression type. Use one of the data compression type constants:  
            DATACOMPRESS_NONE (returns a dataset containing the points in the specified range, no compression),  
            DATACOMPRESS_SKIP (sample the dataset every interval points), DATACOMPRESS_AVERAGE  (use the average 
            x- and y-value in each interval), DATACOMPRESS_MIN  (use the minimum x- and y-value in each interval), 
            DATACOMPRESS_MAX (use the maximum x- and y-value  in each interval), and DATACOMPRESS_MINMAX 
            (use the minimum and maximum x- and y-value in each interval).  The DATACOMPRESS_MINMAX compression 
            type is best used when the compressed data values number more than  1000, where adjacent data values 
            in the rendered chart differ by one horizontal pixel or less. The DATACOMPRESS_MINMAX  compression 
            type will guarantee that the chart displays the same minimums and maximums as the original dataset. </param>
            <param name="ctypey"> The compression type for the y-values. Use one of the he data compression type 
            constants. </param>
            <param name="timefield"> All values with the same timefield value are compressed to a single value. 
            Use one  of the time field constants in the ChartCalendar class - ChartObj.YEAR, ChartObj.MONTH,  
            ChartCalendar.WEEK_OF_YEAR, ChartCalendar.WEEK_OF_MONTH, ChartObj.DAY_OF_YEAR, ChartObj.HOUR_OF_DAY, 
            ChartObj.MINUTE. </param>
            <param name="startindex"> The starting point, inclusive, in the source dataset for the data compression. </param>
            <param name="endindex"> The ending index, inclusive, in the source dataset for the data compression. </param>
            <param name="newname"> The string name for the new dataset. </param>
            <returns> Returns the new, compressed TimeSimpleDataset.</returns>
        </member>
    </members>
</doc>
